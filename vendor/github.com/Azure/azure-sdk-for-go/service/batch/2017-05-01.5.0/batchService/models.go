package batchservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"io"
	"net/http"
)

// AccessScope enumerates the values for access scope.
type AccessScope string

const (
	// Job specifies the job state for access scope.
	Job AccessScope = "job"
)

// AllocationState enumerates the values for allocation state.
type AllocationState string

const (
	// Resizing specifies the resizing state for allocation state.
	Resizing AllocationState = "resizing"
	// Steady specifies the steady state for allocation state.
	Steady AllocationState = "steady"
	// Stopping specifies the stopping state for allocation state.
	Stopping AllocationState = "stopping"
)

// AutoUserScope enumerates the values for auto user scope.
type AutoUserScope string

const (
	// Pool specifies the pool state for auto user scope.
	Pool AutoUserScope = "pool"
	// Task specifies the task state for auto user scope.
	Task AutoUserScope = "task"
)

// CachingType enumerates the values for caching type.
type CachingType string

const (
	// None specifies the none state for caching type.
	None CachingType = "none"
	// ReadOnly specifies the read only state for caching type.
	ReadOnly CachingType = "readOnly"
	// ReadWrite specifies the read write state for caching type.
	ReadWrite CachingType = "readWrite"
)

// CertificateFormat enumerates the values for certificate format.
type CertificateFormat string

const (
	// Cer specifies the cer state for certificate format.
	Cer CertificateFormat = "cer"
	// Pfx specifies the pfx state for certificate format.
	Pfx CertificateFormat = "pfx"
)

// CertificateState enumerates the values for certificate state.
type CertificateState string

const (
	// Active specifies the active state for certificate state.
	Active CertificateState = "active"
	// DeleteFailed specifies the delete failed state for certificate state.
	DeleteFailed CertificateState = "deleteFailed"
	// Deleting specifies the deleting state for certificate state.
	Deleting CertificateState = "deleting"
)

// CertificateStoreLocation enumerates the values for certificate store
// location.
type CertificateStoreLocation string

const (
	// CurrentUser specifies the current user state for certificate store
	// location.
	CurrentUser CertificateStoreLocation = "currentUser"
	// LocalMachine specifies the local machine state for certificate store
	// location.
	LocalMachine CertificateStoreLocation = "localMachine"
)

// CertificateVisibility enumerates the values for certificate visibility.
type CertificateVisibility string

const (
	// CertificateVisibilityRemoteUser specifies the certificate visibility
	// remote user state for certificate visibility.
	CertificateVisibilityRemoteUser CertificateVisibility = "remoteUser"
	// CertificateVisibilityStartTask specifies the certificate visibility
	// start task state for certificate visibility.
	CertificateVisibilityStartTask CertificateVisibility = "startTask"
	// CertificateVisibilityTask specifies the certificate visibility task
	// state for certificate visibility.
	CertificateVisibilityTask CertificateVisibility = "task"
)

// ComputeNodeDeallocationOption enumerates the values for compute node
// deallocation option.
type ComputeNodeDeallocationOption string

const (
	// Requeue specifies the requeue state for compute node deallocation
	// option.
	Requeue ComputeNodeDeallocationOption = "requeue"
	// RetainedData specifies the retained data state for compute node
	// deallocation option.
	RetainedData ComputeNodeDeallocationOption = "retainedData"
	// TaskCompletion specifies the task completion state for compute node
	// deallocation option.
	TaskCompletion ComputeNodeDeallocationOption = "taskCompletion"
	// Terminate specifies the terminate state for compute node deallocation
	// option.
	Terminate ComputeNodeDeallocationOption = "terminate"
)

// ComputeNodeFillType enumerates the values for compute node fill type.
type ComputeNodeFillType string

const (
	// Pack specifies the pack state for compute node fill type.
	Pack ComputeNodeFillType = "pack"
	// Spread specifies the spread state for compute node fill type.
	Spread ComputeNodeFillType = "spread"
)

// ComputeNodeRebootOption enumerates the values for compute node reboot
// option.
type ComputeNodeRebootOption string

const (
	// ComputeNodeRebootOptionRequeue specifies the compute node reboot option
	// requeue state for compute node reboot option.
	ComputeNodeRebootOptionRequeue ComputeNodeRebootOption = "requeue"
	// ComputeNodeRebootOptionRetainedData specifies the compute node reboot
	// option retained data state for compute node reboot option.
	ComputeNodeRebootOptionRetainedData ComputeNodeRebootOption = "retainedData"
	// ComputeNodeRebootOptionTaskCompletion specifies the compute node reboot
	// option task completion state for compute node reboot option.
	ComputeNodeRebootOptionTaskCompletion ComputeNodeRebootOption = "taskCompletion"
	// ComputeNodeRebootOptionTerminate specifies the compute node reboot
	// option terminate state for compute node reboot option.
	ComputeNodeRebootOptionTerminate ComputeNodeRebootOption = "terminate"
)

// ComputeNodeReimageOption enumerates the values for compute node reimage
// option.
type ComputeNodeReimageOption string

const (
	// ComputeNodeReimageOptionRequeue specifies the compute node reimage
	// option requeue state for compute node reimage option.
	ComputeNodeReimageOptionRequeue ComputeNodeReimageOption = "requeue"
	// ComputeNodeReimageOptionRetainedData specifies the compute node reimage
	// option retained data state for compute node reimage option.
	ComputeNodeReimageOptionRetainedData ComputeNodeReimageOption = "retainedData"
	// ComputeNodeReimageOptionTaskCompletion specifies the compute node
	// reimage option task completion state for compute node reimage option.
	ComputeNodeReimageOptionTaskCompletion ComputeNodeReimageOption = "taskCompletion"
	// ComputeNodeReimageOptionTerminate specifies the compute node reimage
	// option terminate state for compute node reimage option.
	ComputeNodeReimageOptionTerminate ComputeNodeReimageOption = "terminate"
)

// ComputeNodeState enumerates the values for compute node state.
type ComputeNodeState string

const (
	// Creating specifies the creating state for compute node state.
	Creating ComputeNodeState = "creating"
	// Idle specifies the idle state for compute node state.
	Idle ComputeNodeState = "idle"
	// LeavingPool specifies the leaving pool state for compute node state.
	LeavingPool ComputeNodeState = "leavingPool"
	// Offline specifies the offline state for compute node state.
	Offline ComputeNodeState = "offline"
	// Preempted specifies the preempted state for compute node state.
	Preempted ComputeNodeState = "preempted"
	// Rebooting specifies the rebooting state for compute node state.
	Rebooting ComputeNodeState = "rebooting"
	// Reimaging specifies the reimaging state for compute node state.
	Reimaging ComputeNodeState = "reimaging"
	// Running specifies the running state for compute node state.
	Running ComputeNodeState = "running"
	// Starting specifies the starting state for compute node state.
	Starting ComputeNodeState = "starting"
	// StartTaskFailed specifies the start task failed state for compute node
	// state.
	StartTaskFailed ComputeNodeState = "startTaskFailed"
	// Unknown specifies the unknown state for compute node state.
	Unknown ComputeNodeState = "unknown"
	// Unusable specifies the unusable state for compute node state.
	Unusable ComputeNodeState = "unusable"
	// WaitingForStartTask specifies the waiting for start task state for
	// compute node state.
	WaitingForStartTask ComputeNodeState = "waitingForStartTask"
)

// DependencyAction enumerates the values for dependency action.
type DependencyAction string

const (
	// Block specifies the block state for dependency action.
	Block DependencyAction = "block"
	// Satisfy specifies the satisfy state for dependency action.
	Satisfy DependencyAction = "satisfy"
)

// DisableComputeNodeSchedulingOption enumerates the values for disable compute
// node scheduling option.
type DisableComputeNodeSchedulingOption string

const (
	// DisableComputeNodeSchedulingOptionRequeue specifies the disable compute
	// node scheduling option requeue state for disable compute node scheduling
	// option.
	DisableComputeNodeSchedulingOptionRequeue DisableComputeNodeSchedulingOption = "requeue"
	// DisableComputeNodeSchedulingOptionTaskCompletion specifies the disable
	// compute node scheduling option task completion state for disable compute
	// node scheduling option.
	DisableComputeNodeSchedulingOptionTaskCompletion DisableComputeNodeSchedulingOption = "taskCompletion"
	// DisableComputeNodeSchedulingOptionTerminate specifies the disable
	// compute node scheduling option terminate state for disable compute node
	// scheduling option.
	DisableComputeNodeSchedulingOptionTerminate DisableComputeNodeSchedulingOption = "terminate"
)

// DisableJobOption enumerates the values for disable job option.
type DisableJobOption string

const (
	// DisableJobOptionRequeue specifies the disable job option requeue state
	// for disable job option.
	DisableJobOptionRequeue DisableJobOption = "requeue"
	// DisableJobOptionTerminate specifies the disable job option terminate
	// state for disable job option.
	DisableJobOptionTerminate DisableJobOption = "terminate"
	// DisableJobOptionWait specifies the disable job option wait state for
	// disable job option.
	DisableJobOptionWait DisableJobOption = "wait"
)

// ElevationLevel enumerates the values for elevation level.
type ElevationLevel string

const (
	// Admin specifies the admin state for elevation level.
	Admin ElevationLevel = "admin"
	// NonAdmin specifies the non admin state for elevation level.
	NonAdmin ElevationLevel = "nonAdmin"
)

// ErrorCategory enumerates the values for error category.
type ErrorCategory string

const (
	// ServerError specifies the server error state for error category.
	ServerError ErrorCategory = "serverError"
	// UserError specifies the user error state for error category.
	UserError ErrorCategory = "userError"
)

// JobAction enumerates the values for job action.
type JobAction string

const (
	// JobActionDisable specifies the job action disable state for job action.
	JobActionDisable JobAction = "disable"
	// JobActionNone specifies the job action none state for job action.
	JobActionNone JobAction = "none"
	// JobActionTerminate specifies the job action terminate state for job
	// action.
	JobActionTerminate JobAction = "terminate"
)

// JobPreparationTaskState enumerates the values for job preparation task
// state.
type JobPreparationTaskState string

const (
	// JobPreparationTaskStateCompleted specifies the job preparation task
	// state completed state for job preparation task state.
	JobPreparationTaskStateCompleted JobPreparationTaskState = "completed"
	// JobPreparationTaskStateRunning specifies the job preparation task state
	// running state for job preparation task state.
	JobPreparationTaskStateRunning JobPreparationTaskState = "running"
)

// JobReleaseTaskState enumerates the values for job release task state.
type JobReleaseTaskState string

const (
	// JobReleaseTaskStateCompleted specifies the job release task state
	// completed state for job release task state.
	JobReleaseTaskStateCompleted JobReleaseTaskState = "completed"
	// JobReleaseTaskStateRunning specifies the job release task state running
	// state for job release task state.
	JobReleaseTaskStateRunning JobReleaseTaskState = "running"
)

// JobScheduleState enumerates the values for job schedule state.
type JobScheduleState string

const (
	// JobScheduleStateActive specifies the job schedule state active state for
	// job schedule state.
	JobScheduleStateActive JobScheduleState = "active"
	// JobScheduleStateCompleted specifies the job schedule state completed
	// state for job schedule state.
	JobScheduleStateCompleted JobScheduleState = "completed"
	// JobScheduleStateDeleting specifies the job schedule state deleting state
	// for job schedule state.
	JobScheduleStateDeleting JobScheduleState = "deleting"
	// JobScheduleStateDisabled specifies the job schedule state disabled state
	// for job schedule state.
	JobScheduleStateDisabled JobScheduleState = "disabled"
	// JobScheduleStateTerminating specifies the job schedule state terminating
	// state for job schedule state.
	JobScheduleStateTerminating JobScheduleState = "terminating"
)

// JobState enumerates the values for job state.
type JobState string

const (
	// JobStateActive specifies the job state active state for job state.
	JobStateActive JobState = "active"
	// JobStateCompleted specifies the job state completed state for job state.
	JobStateCompleted JobState = "completed"
	// JobStateDeleting specifies the job state deleting state for job state.
	JobStateDeleting JobState = "deleting"
	// JobStateDisabled specifies the job state disabled state for job state.
	JobStateDisabled JobState = "disabled"
	// JobStateDisabling specifies the job state disabling state for job state.
	JobStateDisabling JobState = "disabling"
	// JobStateEnabling specifies the job state enabling state for job state.
	JobStateEnabling JobState = "enabling"
	// JobStateTerminating specifies the job state terminating state for job
	// state.
	JobStateTerminating JobState = "terminating"
)

// OnAllTasksComplete enumerates the values for on all tasks complete.
type OnAllTasksComplete string

const (
	// NoAction specifies the no action state for on all tasks complete.
	NoAction OnAllTasksComplete = "noAction"
	// TerminateJob specifies the terminate job state for on all tasks
	// complete.
	TerminateJob OnAllTasksComplete = "terminateJob"
)

// OnTaskFailure enumerates the values for on task failure.
type OnTaskFailure string

const (
	// OnTaskFailureNoAction specifies the on task failure no action state for
	// on task failure.
	OnTaskFailureNoAction OnTaskFailure = "noAction"
	// OnTaskFailurePerformExitOptionsJobAction specifies the on task failure
	// perform exit options job action state for on task failure.
	OnTaskFailurePerformExitOptionsJobAction OnTaskFailure = "performExitOptionsJobAction"
)

// OSType enumerates the values for os type.
type OSType string

const (
	// Linux specifies the linux state for os type.
	Linux OSType = "linux"
	// Windows specifies the windows state for os type.
	Windows OSType = "windows"
)

// OutputFileUploadCondition enumerates the values for output file upload
// condition.
type OutputFileUploadCondition string

const (
	// OutputFileUploadConditionTaskCompletion specifies the output file upload
	// condition task completion state for output file upload condition.
	OutputFileUploadConditionTaskCompletion OutputFileUploadCondition = "taskCompletion"
	// OutputFileUploadConditionTaskFailure specifies the output file upload
	// condition task failure state for output file upload condition.
	OutputFileUploadConditionTaskFailure OutputFileUploadCondition = "taskFailure"
	// OutputFileUploadConditionTaskSuccess specifies the output file upload
	// condition task success state for output file upload condition.
	OutputFileUploadConditionTaskSuccess OutputFileUploadCondition = "taskSuccess"
)

// PoolLifetimeOption enumerates the values for pool lifetime option.
type PoolLifetimeOption string

const (
	// PoolLifetimeOptionJob specifies the pool lifetime option job state for
	// pool lifetime option.
	PoolLifetimeOptionJob PoolLifetimeOption = "job"
	// PoolLifetimeOptionJobSchedule specifies the pool lifetime option job
	// schedule state for pool lifetime option.
	PoolLifetimeOptionJobSchedule PoolLifetimeOption = "jobSchedule"
)

// PoolState enumerates the values for pool state.
type PoolState string

const (
	// PoolStateActive specifies the pool state active state for pool state.
	PoolStateActive PoolState = "active"
	// PoolStateDeleting specifies the pool state deleting state for pool
	// state.
	PoolStateDeleting PoolState = "deleting"
	// PoolStateUpgrading specifies the pool state upgrading state for pool
	// state.
	PoolStateUpgrading PoolState = "upgrading"
)

// SchedulingState enumerates the values for scheduling state.
type SchedulingState string

const (
	// Disabled specifies the disabled state for scheduling state.
	Disabled SchedulingState = "disabled"
	// Enabled specifies the enabled state for scheduling state.
	Enabled SchedulingState = "enabled"
)

// StartTaskState enumerates the values for start task state.
type StartTaskState string

const (
	// StartTaskStateCompleted specifies the start task state completed state
	// for start task state.
	StartTaskStateCompleted StartTaskState = "completed"
	// StartTaskStateRunning specifies the start task state running state for
	// start task state.
	StartTaskStateRunning StartTaskState = "running"
)

// SubtaskState enumerates the values for subtask state.
type SubtaskState string

const (
	// SubtaskStateCompleted specifies the subtask state completed state for
	// subtask state.
	SubtaskStateCompleted SubtaskState = "completed"
	// SubtaskStatePreparing specifies the subtask state preparing state for
	// subtask state.
	SubtaskStatePreparing SubtaskState = "preparing"
	// SubtaskStateRunning specifies the subtask state running state for
	// subtask state.
	SubtaskStateRunning SubtaskState = "running"
)

// TaskAddStatus enumerates the values for task add status.
type TaskAddStatus string

const (
	// TaskAddStatusClientError specifies the task add status client error
	// state for task add status.
	TaskAddStatusClientError TaskAddStatus = "clientError"
	// TaskAddStatusServerError specifies the task add status server error
	// state for task add status.
	TaskAddStatusServerError TaskAddStatus = "serverError"
	// TaskAddStatusSuccess specifies the task add status success state for
	// task add status.
	TaskAddStatusSuccess TaskAddStatus = "success"
)

// TaskExecutionResult enumerates the values for task execution result.
type TaskExecutionResult string

const (
	// Failure specifies the failure state for task execution result.
	Failure TaskExecutionResult = "failure"
	// Success specifies the success state for task execution result.
	Success TaskExecutionResult = "success"
)

// TaskState enumerates the values for task state.
type TaskState string

const (
	// TaskStateActive specifies the task state active state for task state.
	TaskStateActive TaskState = "active"
	// TaskStateCompleted specifies the task state completed state for task
	// state.
	TaskStateCompleted TaskState = "completed"
	// TaskStatePreparing specifies the task state preparing state for task
	// state.
	TaskStatePreparing TaskState = "preparing"
	// TaskStateRunning specifies the task state running state for task state.
	TaskStateRunning TaskState = "running"
)

// AccountListNodeAgentSkusResult is
type AccountListNodeAgentSkusResult struct {
	autorest.Response `json:"-"`
	Value             *[]NodeAgentSku `json:"value,omitempty"`
	OdataNextLink     *string         `json:"odata.nextLink,omitempty"`
}

// AccountListNodeAgentSkusResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client AccountListNodeAgentSkusResult) AccountListNodeAgentSkusResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// AffinityInformation is
type AffinityInformation struct {
	AffinityID *string `json:"affinityId,omitempty"`
}

// ApplicationListResult is
type ApplicationListResult struct {
	autorest.Response `json:"-"`
	Value             *[]ApplicationSummary `json:"value,omitempty"`
	OdataNextLink     *string               `json:"odata.nextLink,omitempty"`
}

// ApplicationListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ApplicationListResult) ApplicationListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// ApplicationPackageReference is
type ApplicationPackageReference struct {
	ApplicationID *string `json:"applicationId,omitempty"`
	Version       *string `json:"version,omitempty"`
}

// ApplicationSummary is
type ApplicationSummary struct {
	autorest.Response `json:"-"`
	ID                *string   `json:"id,omitempty"`
	DisplayName       *string   `json:"displayName,omitempty"`
	Versions          *[]string `json:"versions,omitempty"`
}

// AuthenticationTokenSettings is
type AuthenticationTokenSettings struct {
	Access *[]AccessScope `json:"access,omitempty"`
}

// AutoPoolSpecification is
type AutoPoolSpecification struct {
	AutoPoolIDPrefix   *string            `json:"autoPoolIdPrefix,omitempty"`
	PoolLifetimeOption PoolLifetimeOption `json:"poolLifetimeOption,omitempty"`
	KeepAlive          *bool              `json:"keepAlive,omitempty"`
	Pool               *PoolSpecification `json:"pool,omitempty"`
}

// AutoScaleRun is
type AutoScaleRun struct {
	autorest.Response `json:"-"`
	Timestamp         *date.Time         `json:"timestamp,omitempty"`
	Results           *string            `json:"results,omitempty"`
	Error             *AutoScaleRunError `json:"error,omitempty"`
}

// AutoScaleRunError is
type AutoScaleRunError struct {
	Code    *string          `json:"code,omitempty"`
	Message *string          `json:"message,omitempty"`
	Values  *[]NameValuePair `json:"values,omitempty"`
}

// AutoUserSpecification is
type AutoUserSpecification struct {
	Scope          AutoUserScope  `json:"scope,omitempty"`
	ElevationLevel ElevationLevel `json:"elevationLevel,omitempty"`
}

// BatchError is
type BatchError struct {
	Code    *string             `json:"code,omitempty"`
	Message *ErrorMessage       `json:"message,omitempty"`
	Values  *[]BatchErrorDetail `json:"values,omitempty"`
}

// BatchErrorDetail is
type BatchErrorDetail struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Certificate is a certificate that can be installed on compute nodes and can
// be used to authenticate operations on the machine.
type Certificate struct {
	autorest.Response           `json:"-"`
	Thumbprint                  *string                 `json:"thumbprint,omitempty"`
	ThumbprintAlgorithm         *string                 `json:"thumbprintAlgorithm,omitempty"`
	URL                         *string                 `json:"url,omitempty"`
	State                       CertificateState        `json:"state,omitempty"`
	StateTransitionTime         *date.Time              `json:"stateTransitionTime,omitempty"`
	PreviousState               CertificateState        `json:"previousState,omitempty"`
	PreviousStateTransitionTime *date.Time              `json:"previousStateTransitionTime,omitempty"`
	PublicData                  *string                 `json:"publicData,omitempty"`
	DeleteCertificateError      *DeleteCertificateError `json:"deleteCertificateError,omitempty"`
}

// CertificateAddParameter is
type CertificateAddParameter struct {
	Thumbprint          *string           `json:"thumbprint,omitempty"`
	ThumbprintAlgorithm *string           `json:"thumbprintAlgorithm,omitempty"`
	Data                *string           `json:"data,omitempty"`
	CertificateFormat   CertificateFormat `json:"certificateFormat,omitempty"`
	Password            *string           `json:"password,omitempty"`
}

// CertificateListResult is
type CertificateListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Certificate `json:"value,omitempty"`
	OdataNextLink     *string        `json:"odata.nextLink,omitempty"`
}

// CertificateListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CertificateListResult) CertificateListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// CertificateReference is
type CertificateReference struct {
	Thumbprint          *string                  `json:"thumbprint,omitempty"`
	ThumbprintAlgorithm *string                  `json:"thumbprintAlgorithm,omitempty"`
	StoreLocation       CertificateStoreLocation `json:"storeLocation,omitempty"`
	StoreName           *string                  `json:"storeName,omitempty"`
	Visibility          *[]CertificateVisibility `json:"visibility,omitempty"`
}

// CloudJob is
type CloudJob struct {
	autorest.Response           `json:"-"`
	ID                          *string                  `json:"id,omitempty"`
	DisplayName                 *string                  `json:"displayName,omitempty"`
	UsesTaskDependencies        *bool                    `json:"usesTaskDependencies,omitempty"`
	URL                         *string                  `json:"url,omitempty"`
	ETag                        *string                  `json:"eTag,omitempty"`
	LastModified                *date.Time               `json:"lastModified,omitempty"`
	CreationTime                *date.Time               `json:"creationTime,omitempty"`
	State                       JobState                 `json:"state,omitempty"`
	StateTransitionTime         *date.Time               `json:"stateTransitionTime,omitempty"`
	PreviousState               JobState                 `json:"previousState,omitempty"`
	PreviousStateTransitionTime *date.Time               `json:"previousStateTransitionTime,omitempty"`
	Priority                    *int32                   `json:"priority,omitempty"`
	Constraints                 *JobConstraints          `json:"constraints,omitempty"`
	JobManagerTask              *JobManagerTask          `json:"jobManagerTask,omitempty"`
	JobPreparationTask          *JobPreparationTask      `json:"jobPreparationTask,omitempty"`
	JobReleaseTask              *JobReleaseTask          `json:"jobReleaseTask,omitempty"`
	CommonEnvironmentSettings   *[]EnvironmentSetting    `json:"commonEnvironmentSettings,omitempty"`
	PoolInfo                    *PoolInformation         `json:"poolInfo,omitempty"`
	OnAllTasksComplete          OnAllTasksComplete       `json:"onAllTasksComplete,omitempty"`
	OnTaskFailure               OnTaskFailure            `json:"onTaskFailure,omitempty"`
	Metadata                    *[]MetadataItem          `json:"metadata,omitempty"`
	ExecutionInfo               *JobExecutionInformation `json:"executionInfo,omitempty"`
	Stats                       *JobStatistics           `json:"stats,omitempty"`
}

// CloudJobListPreparationAndReleaseTaskStatusResult is
type CloudJobListPreparationAndReleaseTaskStatusResult struct {
	autorest.Response `json:"-"`
	Value             *[]JobPreparationAndReleaseTaskExecutionInformation `json:"value,omitempty"`
	OdataNextLink     *string                                             `json:"odata.nextLink,omitempty"`
}

// CloudJobListPreparationAndReleaseTaskStatusResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CloudJobListPreparationAndReleaseTaskStatusResult) CloudJobListPreparationAndReleaseTaskStatusResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// CloudJobListResult is
type CloudJobListResult struct {
	autorest.Response `json:"-"`
	Value             *[]CloudJob `json:"value,omitempty"`
	OdataNextLink     *string     `json:"odata.nextLink,omitempty"`
}

// CloudJobListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CloudJobListResult) CloudJobListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// CloudJobSchedule is
type CloudJobSchedule struct {
	autorest.Response           `json:"-"`
	ID                          *string                          `json:"id,omitempty"`
	DisplayName                 *string                          `json:"displayName,omitempty"`
	URL                         *string                          `json:"url,omitempty"`
	ETag                        *string                          `json:"eTag,omitempty"`
	LastModified                *date.Time                       `json:"lastModified,omitempty"`
	CreationTime                *date.Time                       `json:"creationTime,omitempty"`
	State                       JobScheduleState                 `json:"state,omitempty"`
	StateTransitionTime         *date.Time                       `json:"stateTransitionTime,omitempty"`
	PreviousState               JobScheduleState                 `json:"previousState,omitempty"`
	PreviousStateTransitionTime *date.Time                       `json:"previousStateTransitionTime,omitempty"`
	Schedule                    *Schedule                        `json:"schedule,omitempty"`
	JobSpecification            *JobSpecification                `json:"jobSpecification,omitempty"`
	ExecutionInfo               *JobScheduleExecutionInformation `json:"executionInfo,omitempty"`
	Metadata                    *[]MetadataItem                  `json:"metadata,omitempty"`
	Stats                       *JobScheduleStatistics           `json:"stats,omitempty"`
}

// CloudJobScheduleListResult is
type CloudJobScheduleListResult struct {
	autorest.Response `json:"-"`
	Value             *[]CloudJobSchedule `json:"value,omitempty"`
	OdataNextLink     *string             `json:"odata.nextLink,omitempty"`
}

// CloudJobScheduleListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CloudJobScheduleListResult) CloudJobScheduleListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// CloudPool is
type CloudPool struct {
	autorest.Response             `json:"-"`
	ID                            *string                        `json:"id,omitempty"`
	DisplayName                   *string                        `json:"displayName,omitempty"`
	URL                           *string                        `json:"url,omitempty"`
	ETag                          *string                        `json:"eTag,omitempty"`
	LastModified                  *date.Time                     `json:"lastModified,omitempty"`
	CreationTime                  *date.Time                     `json:"creationTime,omitempty"`
	State                         PoolState                      `json:"state,omitempty"`
	StateTransitionTime           *date.Time                     `json:"stateTransitionTime,omitempty"`
	AllocationState               AllocationState                `json:"allocationState,omitempty"`
	AllocationStateTransitionTime *date.Time                     `json:"allocationStateTransitionTime,omitempty"`
	VMSize                        *string                        `json:"vmSize,omitempty"`
	CloudServiceConfiguration     *CloudServiceConfiguration     `json:"cloudServiceConfiguration,omitempty"`
	VirtualMachineConfiguration   *VirtualMachineConfiguration   `json:"virtualMachineConfiguration,omitempty"`
	ResizeTimeout                 *string                        `json:"resizeTimeout,omitempty"`
	ResizeErrors                  *[]ResizeError                 `json:"resizeErrors,omitempty"`
	CurrentDedicatedNodes         *int32                         `json:"currentDedicatedNodes,omitempty"`
	CurrentLowPriorityNodes       *int32                         `json:"currentLowPriorityNodes,omitempty"`
	TargetDedicatedNodes          *int32                         `json:"targetDedicatedNodes,omitempty"`
	TargetLowPriorityNodes        *int32                         `json:"targetLowPriorityNodes,omitempty"`
	EnableAutoScale               *bool                          `json:"enableAutoScale,omitempty"`
	AutoScaleFormula              *string                        `json:"autoScaleFormula,omitempty"`
	AutoScaleEvaluationInterval   *string                        `json:"autoScaleEvaluationInterval,omitempty"`
	AutoScaleRun                  *AutoScaleRun                  `json:"autoScaleRun,omitempty"`
	EnableInterNodeCommunication  *bool                          `json:"enableInterNodeCommunication,omitempty"`
	NetworkConfiguration          *NetworkConfiguration          `json:"networkConfiguration,omitempty"`
	StartTask                     *StartTask                     `json:"startTask,omitempty"`
	CertificateReferences         *[]CertificateReference        `json:"certificateReferences,omitempty"`
	ApplicationPackageReferences  *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	ApplicationLicenses           *[]string                      `json:"applicationLicenses,omitempty"`
	MaxTasksPerNode               *int32                         `json:"maxTasksPerNode,omitempty"`
	TaskSchedulingPolicy          *TaskSchedulingPolicy          `json:"taskSchedulingPolicy,omitempty"`
	UserAccounts                  *[]UserAccount                 `json:"userAccounts,omitempty"`
	Metadata                      *[]MetadataItem                `json:"metadata,omitempty"`
	Stats                         *PoolStatistics                `json:"stats,omitempty"`
}

// CloudPoolListResult is
type CloudPoolListResult struct {
	autorest.Response `json:"-"`
	Value             *[]CloudPool `json:"value,omitempty"`
	OdataNextLink     *string      `json:"odata.nextLink,omitempty"`
}

// CloudPoolListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CloudPoolListResult) CloudPoolListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// CloudServiceConfiguration is
type CloudServiceConfiguration struct {
	OsFamily         *string `json:"osFamily,omitempty"`
	TargetOSVersion  *string `json:"targetOSVersion,omitempty"`
	CurrentOSVersion *string `json:"currentOSVersion,omitempty"`
}

// CloudTask is
type CloudTask struct {
	autorest.Response            `json:"-"`
	ID                           *string                        `json:"id,omitempty"`
	DisplayName                  *string                        `json:"displayName,omitempty"`
	URL                          *string                        `json:"url,omitempty"`
	ETag                         *string                        `json:"eTag,omitempty"`
	LastModified                 *date.Time                     `json:"lastModified,omitempty"`
	CreationTime                 *date.Time                     `json:"creationTime,omitempty"`
	ExitConditions               *ExitConditions                `json:"exitConditions,omitempty"`
	State                        TaskState                      `json:"state,omitempty"`
	StateTransitionTime          *date.Time                     `json:"stateTransitionTime,omitempty"`
	PreviousState                TaskState                      `json:"previousState,omitempty"`
	PreviousStateTransitionTime  *date.Time                     `json:"previousStateTransitionTime,omitempty"`
	CommandLine                  *string                        `json:"commandLine,omitempty"`
	ResourceFiles                *[]ResourceFile                `json:"resourceFiles,omitempty"`
	OutputFiles                  *[]OutputFile                  `json:"outputFiles,omitempty"`
	EnvironmentSettings          *[]EnvironmentSetting          `json:"environmentSettings,omitempty"`
	AffinityInfo                 *AffinityInformation           `json:"affinityInfo,omitempty"`
	Constraints                  *TaskConstraints               `json:"constraints,omitempty"`
	UserIdentity                 *UserIdentity                  `json:"userIdentity,omitempty"`
	ExecutionInfo                *TaskExecutionInformation      `json:"executionInfo,omitempty"`
	NodeInfo                     *ComputeNodeInformation        `json:"nodeInfo,omitempty"`
	MultiInstanceSettings        *MultiInstanceSettings         `json:"multiInstanceSettings,omitempty"`
	Stats                        *TaskStatistics                `json:"stats,omitempty"`
	DependsOn                    *TaskDependencies              `json:"dependsOn,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	AuthenticationTokenSettings  *AuthenticationTokenSettings   `json:"authenticationTokenSettings,omitempty"`
}

// CloudTaskListResult is
type CloudTaskListResult struct {
	autorest.Response `json:"-"`
	Value             *[]CloudTask `json:"value,omitempty"`
	OdataNextLink     *string      `json:"odata.nextLink,omitempty"`
}

// CloudTaskListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CloudTaskListResult) CloudTaskListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// CloudTaskListSubtasksResult is
type CloudTaskListSubtasksResult struct {
	autorest.Response `json:"-"`
	Value             *[]SubtaskInformation `json:"value,omitempty"`
}

// ComputeNode is
type ComputeNode struct {
	autorest.Response     `json:"-"`
	ID                    *string                 `json:"id,omitempty"`
	URL                   *string                 `json:"url,omitempty"`
	State                 ComputeNodeState        `json:"state,omitempty"`
	SchedulingState       SchedulingState         `json:"schedulingState,omitempty"`
	StateTransitionTime   *date.Time              `json:"stateTransitionTime,omitempty"`
	LastBootTime          *date.Time              `json:"lastBootTime,omitempty"`
	AllocationTime        *date.Time              `json:"allocationTime,omitempty"`
	IPAddress             *string                 `json:"ipAddress,omitempty"`
	AffinityID            *string                 `json:"affinityId,omitempty"`
	VMSize                *string                 `json:"vmSize,omitempty"`
	TotalTasksRun         *int32                  `json:"totalTasksRun,omitempty"`
	RunningTasksCount     *int32                  `json:"runningTasksCount,omitempty"`
	TotalTasksSucceeded   *int32                  `json:"totalTasksSucceeded,omitempty"`
	RecentTasks           *[]TaskInformation      `json:"recentTasks,omitempty"`
	StartTask             *StartTask              `json:"startTask,omitempty"`
	StartTaskInfo         *StartTaskInformation   `json:"startTaskInfo,omitempty"`
	CertificateReferences *[]CertificateReference `json:"certificateReferences,omitempty"`
	Errors                *[]ComputeNodeError     `json:"errors,omitempty"`
	IsDedicated           *bool                   `json:"isDedicated,omitempty"`
}

// ComputeNodeError is
type ComputeNodeError struct {
	Code         *string          `json:"code,omitempty"`
	Message      *string          `json:"message,omitempty"`
	ErrorDetails *[]NameValuePair `json:"errorDetails,omitempty"`
}

// ComputeNodeGetRemoteLoginSettingsResult is
type ComputeNodeGetRemoteLoginSettingsResult struct {
	autorest.Response    `json:"-"`
	RemoteLoginIPAddress *string `json:"remoteLoginIPAddress,omitempty"`
	RemoteLoginPort      *int32  `json:"remoteLoginPort,omitempty"`
}

// ComputeNodeInformation is
type ComputeNodeInformation struct {
	AffinityID           *string `json:"affinityId,omitempty"`
	NodeURL              *string `json:"nodeUrl,omitempty"`
	PoolID               *string `json:"poolId,omitempty"`
	NodeID               *string `json:"nodeId,omitempty"`
	TaskRootDirectory    *string `json:"taskRootDirectory,omitempty"`
	TaskRootDirectoryURL *string `json:"taskRootDirectoryUrl,omitempty"`
}

// ComputeNodeListResult is
type ComputeNodeListResult struct {
	autorest.Response `json:"-"`
	Value             *[]ComputeNode `json:"value,omitempty"`
	OdataNextLink     *string        `json:"odata.nextLink,omitempty"`
}

// ComputeNodeListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ComputeNodeListResult) ComputeNodeListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// ComputeNodeUser is
type ComputeNodeUser struct {
	Name         *string    `json:"name,omitempty"`
	IsAdmin      *bool      `json:"isAdmin,omitempty"`
	ExpiryTime   *date.Time `json:"expiryTime,omitempty"`
	Password     *string    `json:"password,omitempty"`
	SSHPublicKey *string    `json:"sshPublicKey,omitempty"`
}

// DeleteCertificateError is
type DeleteCertificateError struct {
	Code    *string          `json:"code,omitempty"`
	Message *string          `json:"message,omitempty"`
	Values  *[]NameValuePair `json:"values,omitempty"`
}

// EnvironmentSetting is
type EnvironmentSetting struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ErrorMessage is
type ErrorMessage struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ExitCodeMapping is
type ExitCodeMapping struct {
	Code        *int32       `json:"code,omitempty"`
	ExitOptions *ExitOptions `json:"exitOptions,omitempty"`
}

// ExitCodeRangeMapping is
type ExitCodeRangeMapping struct {
	Start       *int32       `json:"start,omitempty"`
	End         *int32       `json:"end,omitempty"`
	ExitOptions *ExitOptions `json:"exitOptions,omitempty"`
}

// ExitConditions is
type ExitConditions struct {
	ExitCodes          *[]ExitCodeMapping      `json:"exitCodes,omitempty"`
	ExitCodeRanges     *[]ExitCodeRangeMapping `json:"exitCodeRanges,omitempty"`
	PreProcessingError *ExitOptions            `json:"preProcessingError,omitempty"`
	FileUploadError    *ExitOptions            `json:"fileUploadError,omitempty"`
	Default            *ExitOptions            `json:"default,omitempty"`
}

// ExitOptions is
type ExitOptions struct {
	JobAction        JobAction        `json:"jobAction,omitempty"`
	DependencyAction DependencyAction `json:"dependencyAction,omitempty"`
}

// FileProperties is
type FileProperties struct {
	CreationTime  *date.Time `json:"creationTime,omitempty"`
	LastModified  *date.Time `json:"lastModified,omitempty"`
	ContentLength *int64     `json:"contentLength,omitempty"`
	ContentType   *string    `json:"contentType,omitempty"`
	FileMode      *string    `json:"fileMode,omitempty"`
}

// ImageReference is
type ImageReference struct {
	Publisher *string `json:"publisher,omitempty"`
	Offer     *string `json:"offer,omitempty"`
	Sku       *string `json:"sku,omitempty"`
	Version   *string `json:"version,omitempty"`
}

// JobAddParameter is
type JobAddParameter struct {
	ID                        *string               `json:"id,omitempty"`
	DisplayName               *string               `json:"displayName,omitempty"`
	Priority                  *int32                `json:"priority,omitempty"`
	Constraints               *JobConstraints       `json:"constraints,omitempty"`
	JobManagerTask            *JobManagerTask       `json:"jobManagerTask,omitempty"`
	JobPreparationTask        *JobPreparationTask   `json:"jobPreparationTask,omitempty"`
	JobReleaseTask            *JobReleaseTask       `json:"jobReleaseTask,omitempty"`
	CommonEnvironmentSettings *[]EnvironmentSetting `json:"commonEnvironmentSettings,omitempty"`
	PoolInfo                  *PoolInformation      `json:"poolInfo,omitempty"`
	OnAllTasksComplete        OnAllTasksComplete    `json:"onAllTasksComplete,omitempty"`
	OnTaskFailure             OnTaskFailure         `json:"onTaskFailure,omitempty"`
	Metadata                  *[]MetadataItem       `json:"metadata,omitempty"`
	UsesTaskDependencies      *bool                 `json:"usesTaskDependencies,omitempty"`
}

// JobConstraints is
type JobConstraints struct {
	MaxWallClockTime  *string `json:"maxWallClockTime,omitempty"`
	MaxTaskRetryCount *int32  `json:"maxTaskRetryCount,omitempty"`
}

// JobDisableParameter is
type JobDisableParameter struct {
	DisableTasks DisableJobOption `json:"disableTasks,omitempty"`
}

// JobExecutionInformation is
type JobExecutionInformation struct {
	StartTime       *date.Time          `json:"startTime,omitempty"`
	EndTime         *date.Time          `json:"endTime,omitempty"`
	PoolID          *string             `json:"poolId,omitempty"`
	SchedulingError *JobSchedulingError `json:"schedulingError,omitempty"`
	TerminateReason *string             `json:"terminateReason,omitempty"`
}

// JobManagerTask is
type JobManagerTask struct {
	ID                           *string                        `json:"id,omitempty"`
	DisplayName                  *string                        `json:"displayName,omitempty"`
	CommandLine                  *string                        `json:"commandLine,omitempty"`
	ResourceFiles                *[]ResourceFile                `json:"resourceFiles,omitempty"`
	OutputFiles                  *[]OutputFile                  `json:"outputFiles,omitempty"`
	EnvironmentSettings          *[]EnvironmentSetting          `json:"environmentSettings,omitempty"`
	Constraints                  *TaskConstraints               `json:"constraints,omitempty"`
	KillJobOnCompletion          *bool                          `json:"killJobOnCompletion,omitempty"`
	UserIdentity                 *UserIdentity                  `json:"userIdentity,omitempty"`
	RunExclusive                 *bool                          `json:"runExclusive,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	AuthenticationTokenSettings  *AuthenticationTokenSettings   `json:"authenticationTokenSettings,omitempty"`
	AllowLowPriorityNode         *bool                          `json:"allowLowPriorityNode,omitempty"`
}

// JobPatchParameter is
type JobPatchParameter struct {
	Priority           *int32             `json:"priority,omitempty"`
	OnAllTasksComplete OnAllTasksComplete `json:"onAllTasksComplete,omitempty"`
	Constraints        *JobConstraints    `json:"constraints,omitempty"`
	PoolInfo           *PoolInformation   `json:"poolInfo,omitempty"`
	Metadata           *[]MetadataItem    `json:"metadata,omitempty"`
}

// JobPreparationAndReleaseTaskExecutionInformation is
type JobPreparationAndReleaseTaskExecutionInformation struct {
	PoolID                          *string                                 `json:"poolId,omitempty"`
	NodeID                          *string                                 `json:"nodeId,omitempty"`
	NodeURL                         *string                                 `json:"nodeUrl,omitempty"`
	JobPreparationTaskExecutionInfo *JobPreparationTaskExecutionInformation `json:"jobPreparationTaskExecutionInfo,omitempty"`
	JobReleaseTaskExecutionInfo     *JobReleaseTaskExecutionInformation     `json:"jobReleaseTaskExecutionInfo,omitempty"`
}

// JobPreparationTask is
type JobPreparationTask struct {
	ID                            *string               `json:"id,omitempty"`
	CommandLine                   *string               `json:"commandLine,omitempty"`
	ResourceFiles                 *[]ResourceFile       `json:"resourceFiles,omitempty"`
	EnvironmentSettings           *[]EnvironmentSetting `json:"environmentSettings,omitempty"`
	Constraints                   *TaskConstraints      `json:"constraints,omitempty"`
	WaitForSuccess                *bool                 `json:"waitForSuccess,omitempty"`
	UserIdentity                  *UserIdentity         `json:"userIdentity,omitempty"`
	RerunOnNodeRebootAfterSuccess *bool                 `json:"rerunOnNodeRebootAfterSuccess,omitempty"`
}

// JobPreparationTaskExecutionInformation is
type JobPreparationTaskExecutionInformation struct {
	StartTime            *date.Time              `json:"startTime,omitempty"`
	EndTime              *date.Time              `json:"endTime,omitempty"`
	State                JobPreparationTaskState `json:"state,omitempty"`
	TaskRootDirectory    *string                 `json:"taskRootDirectory,omitempty"`
	TaskRootDirectoryURL *string                 `json:"taskRootDirectoryUrl,omitempty"`
	ExitCode             *int32                  `json:"exitCode,omitempty"`
	FailureInfo          *TaskFailureInformation `json:"failureInfo,omitempty"`
	RetryCount           *int32                  `json:"retryCount,omitempty"`
	LastRetryTime        *date.Time              `json:"lastRetryTime,omitempty"`
	Result               TaskExecutionResult     `json:"result,omitempty"`
}

// JobReleaseTask is
type JobReleaseTask struct {
	ID                  *string               `json:"id,omitempty"`
	CommandLine         *string               `json:"commandLine,omitempty"`
	ResourceFiles       *[]ResourceFile       `json:"resourceFiles,omitempty"`
	EnvironmentSettings *[]EnvironmentSetting `json:"environmentSettings,omitempty"`
	MaxWallClockTime    *string               `json:"maxWallClockTime,omitempty"`
	RetentionTime       *string               `json:"retentionTime,omitempty"`
	UserIdentity        *UserIdentity         `json:"userIdentity,omitempty"`
}

// JobReleaseTaskExecutionInformation is
type JobReleaseTaskExecutionInformation struct {
	StartTime            *date.Time              `json:"startTime,omitempty"`
	EndTime              *date.Time              `json:"endTime,omitempty"`
	State                JobReleaseTaskState     `json:"state,omitempty"`
	TaskRootDirectory    *string                 `json:"taskRootDirectory,omitempty"`
	TaskRootDirectoryURL *string                 `json:"taskRootDirectoryUrl,omitempty"`
	ExitCode             *int32                  `json:"exitCode,omitempty"`
	FailureInfo          *TaskFailureInformation `json:"failureInfo,omitempty"`
	Result               TaskExecutionResult     `json:"result,omitempty"`
}

// JobScheduleAddParameter is
type JobScheduleAddParameter struct {
	ID               *string           `json:"id,omitempty"`
	DisplayName      *string           `json:"displayName,omitempty"`
	Schedule         *Schedule         `json:"schedule,omitempty"`
	JobSpecification *JobSpecification `json:"jobSpecification,omitempty"`
	Metadata         *[]MetadataItem   `json:"metadata,omitempty"`
}

// JobScheduleExecutionInformation is
type JobScheduleExecutionInformation struct {
	NextRunTime *date.Time `json:"nextRunTime,omitempty"`
	RecentJob   *RecentJob `json:"recentJob,omitempty"`
	EndTime     *date.Time `json:"endTime,omitempty"`
}

// JobSchedulePatchParameter is
type JobSchedulePatchParameter struct {
	Schedule         *Schedule         `json:"schedule,omitempty"`
	JobSpecification *JobSpecification `json:"jobSpecification,omitempty"`
	Metadata         *[]MetadataItem   `json:"metadata,omitempty"`
}

// JobScheduleStatistics is
type JobScheduleStatistics struct {
	URL               *string    `json:"url,omitempty"`
	StartTime         *date.Time `json:"startTime,omitempty"`
	LastUpdateTime    *date.Time `json:"lastUpdateTime,omitempty"`
	UserCPUTime       *string    `json:"userCPUTime,omitempty"`
	KernelCPUTime     *string    `json:"kernelCPUTime,omitempty"`
	WallClockTime     *string    `json:"wallClockTime,omitempty"`
	ReadIOps          *int64     `json:"readIOps,omitempty"`
	WriteIOps         *int64     `json:"writeIOps,omitempty"`
	ReadIOGiB         *float64   `json:"readIOGiB,omitempty"`
	WriteIOGiB        *float64   `json:"writeIOGiB,omitempty"`
	NumSucceededTasks *int64     `json:"numSucceededTasks,omitempty"`
	NumFailedTasks    *int64     `json:"numFailedTasks,omitempty"`
	NumTaskRetries    *int64     `json:"numTaskRetries,omitempty"`
	WaitTime          *string    `json:"waitTime,omitempty"`
}

// JobScheduleUpdateParameter is
type JobScheduleUpdateParameter struct {
	Schedule         *Schedule         `json:"schedule,omitempty"`
	JobSpecification *JobSpecification `json:"jobSpecification,omitempty"`
	Metadata         *[]MetadataItem   `json:"metadata,omitempty"`
}

// JobSchedulingError is
type JobSchedulingError struct {
	Category ErrorCategory    `json:"category,omitempty"`
	Code     *string          `json:"code,omitempty"`
	Message  *string          `json:"message,omitempty"`
	Details  *[]NameValuePair `json:"details,omitempty"`
}

// JobSpecification is
type JobSpecification struct {
	Priority                  *int32                `json:"priority,omitempty"`
	DisplayName               *string               `json:"displayName,omitempty"`
	UsesTaskDependencies      *bool                 `json:"usesTaskDependencies,omitempty"`
	OnAllTasksComplete        OnAllTasksComplete    `json:"onAllTasksComplete,omitempty"`
	OnTaskFailure             OnTaskFailure         `json:"onTaskFailure,omitempty"`
	Constraints               *JobConstraints       `json:"constraints,omitempty"`
	JobManagerTask            *JobManagerTask       `json:"jobManagerTask,omitempty"`
	JobPreparationTask        *JobPreparationTask   `json:"jobPreparationTask,omitempty"`
	JobReleaseTask            *JobReleaseTask       `json:"jobReleaseTask,omitempty"`
	CommonEnvironmentSettings *[]EnvironmentSetting `json:"commonEnvironmentSettings,omitempty"`
	PoolInfo                  *PoolInformation      `json:"poolInfo,omitempty"`
	Metadata                  *[]MetadataItem       `json:"metadata,omitempty"`
}

// JobStatistics is
type JobStatistics struct {
	autorest.Response `json:"-"`
	URL               *string    `json:"url,omitempty"`
	StartTime         *date.Time `json:"startTime,omitempty"`
	LastUpdateTime    *date.Time `json:"lastUpdateTime,omitempty"`
	UserCPUTime       *string    `json:"userCPUTime,omitempty"`
	KernelCPUTime     *string    `json:"kernelCPUTime,omitempty"`
	WallClockTime     *string    `json:"wallClockTime,omitempty"`
	ReadIOps          *int64     `json:"readIOps,omitempty"`
	WriteIOps         *int64     `json:"writeIOps,omitempty"`
	ReadIOGiB         *float64   `json:"readIOGiB,omitempty"`
	WriteIOGiB        *float64   `json:"writeIOGiB,omitempty"`
	NumSucceededTasks *int64     `json:"numSucceededTasks,omitempty"`
	NumFailedTasks    *int64     `json:"numFailedTasks,omitempty"`
	NumTaskRetries    *int64     `json:"numTaskRetries,omitempty"`
	WaitTime          *string    `json:"waitTime,omitempty"`
}

// JobTerminateParameter is
type JobTerminateParameter struct {
	TerminateReason *string `json:"terminateReason,omitempty"`
}

// JobUpdateParameter is
type JobUpdateParameter struct {
	Priority           *int32             `json:"priority,omitempty"`
	Constraints        *JobConstraints    `json:"constraints,omitempty"`
	PoolInfo           *PoolInformation   `json:"poolInfo,omitempty"`
	Metadata           *[]MetadataItem    `json:"metadata,omitempty"`
	OnAllTasksComplete OnAllTasksComplete `json:"onAllTasksComplete,omitempty"`
}

// LinuxUserConfiguration is
type LinuxUserConfiguration struct {
	UID           *int32  `json:"uid,omitempty"`
	Gid           *int32  `json:"gid,omitempty"`
	SSHPrivateKey *string `json:"sshPrivateKey,omitempty"`
}

// MetadataItem is the Batch service does not assign any meaning to this
// metadata; it is solely for the use of user code.
type MetadataItem struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// MultiInstanceSettings is multi-instance tasks are commonly used to support
// MPI tasks.
type MultiInstanceSettings struct {
	NumberOfInstances       *int32          `json:"numberOfInstances,omitempty"`
	CoordinationCommandLine *string         `json:"coordinationCommandLine,omitempty"`
	CommonResourceFiles     *[]ResourceFile `json:"commonResourceFiles,omitempty"`
}

// NameValuePair is
type NameValuePair struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NetworkConfiguration is the network configuration for a pool.
type NetworkConfiguration struct {
	SubnetID *string `json:"subnetId,omitempty"`
}

// NodeAgentSku is the Batch node agent is a program that runs on each node in
// the pool, and provides the command-and-control interface between the node
// and the Batch service. There are different implementations of the node
// agent, known as SKUs, for different operating systems.
type NodeAgentSku struct {
	ID                      *string           `json:"id,omitempty"`
	VerifiedImageReferences *[]ImageReference `json:"verifiedImageReferences,omitempty"`
	OsType                  OSType            `json:"osType,omitempty"`
}

// NodeDisableSchedulingParameter is
type NodeDisableSchedulingParameter struct {
	NodeDisableSchedulingOption DisableComputeNodeSchedulingOption `json:"nodeDisableSchedulingOption,omitempty"`
}

// NodeFile is
type NodeFile struct {
	Name        *string         `json:"name,omitempty"`
	URL         *string         `json:"url,omitempty"`
	IsDirectory *bool           `json:"isDirectory,omitempty"`
	Properties  *FileProperties `json:"properties,omitempty"`
}

// NodeFileListResult is
type NodeFileListResult struct {
	autorest.Response `json:"-"`
	Value             *[]NodeFile `json:"value,omitempty"`
	OdataNextLink     *string     `json:"odata.nextLink,omitempty"`
}

// NodeFileListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client NodeFileListResult) NodeFileListResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// NodeRebootParameter is
type NodeRebootParameter struct {
	NodeRebootOption ComputeNodeRebootOption `json:"nodeRebootOption,omitempty"`
}

// NodeReimageParameter is
type NodeReimageParameter struct {
	NodeReimageOption ComputeNodeReimageOption `json:"nodeReimageOption,omitempty"`
}

// NodeRemoveParameter is
type NodeRemoveParameter struct {
	NodeList               *[]string                     `json:"nodeList,omitempty"`
	ResizeTimeout          *string                       `json:"resizeTimeout,omitempty"`
	NodeDeallocationOption ComputeNodeDeallocationOption `json:"nodeDeallocationOption,omitempty"`
}

// NodeUpdateUserParameter is
type NodeUpdateUserParameter struct {
	Password     *string    `json:"password,omitempty"`
	ExpiryTime   *date.Time `json:"expiryTime,omitempty"`
	SSHPublicKey *string    `json:"sshPublicKey,omitempty"`
}

// OSDisk is
type OSDisk struct {
	ImageUris *[]string   `json:"imageUris,omitempty"`
	Caching   CachingType `json:"caching,omitempty"`
}

// OutputFile is
type OutputFile struct {
	FilePattern   *string                  `json:"filePattern,omitempty"`
	Destination   *OutputFileDestination   `json:"destination,omitempty"`
	UploadOptions *OutputFileUploadOptions `json:"uploadOptions,omitempty"`
}

// OutputFileBlobContainerDestination is
type OutputFileBlobContainerDestination struct {
	Path         *string `json:"path,omitempty"`
	ContainerURL *string `json:"containerUrl,omitempty"`
}

// OutputFileDestination is
type OutputFileDestination struct {
	Container *OutputFileBlobContainerDestination `json:"container,omitempty"`
}

// OutputFileUploadOptions is
type OutputFileUploadOptions struct {
	UploadCondition OutputFileUploadCondition `json:"uploadCondition,omitempty"`
}

// PoolAddParameter is
type PoolAddParameter struct {
	ID                           *string                        `json:"id,omitempty"`
	DisplayName                  *string                        `json:"displayName,omitempty"`
	VMSize                       *string                        `json:"vmSize,omitempty"`
	CloudServiceConfiguration    *CloudServiceConfiguration     `json:"cloudServiceConfiguration,omitempty"`
	VirtualMachineConfiguration  *VirtualMachineConfiguration   `json:"virtualMachineConfiguration,omitempty"`
	ResizeTimeout                *string                        `json:"resizeTimeout,omitempty"`
	TargetDedicatedNodes         *int32                         `json:"targetDedicatedNodes,omitempty"`
	TargetLowPriorityNodes       *int32                         `json:"targetLowPriorityNodes,omitempty"`
	EnableAutoScale              *bool                          `json:"enableAutoScale,omitempty"`
	AutoScaleFormula             *string                        `json:"autoScaleFormula,omitempty"`
	AutoScaleEvaluationInterval  *string                        `json:"autoScaleEvaluationInterval,omitempty"`
	EnableInterNodeCommunication *bool                          `json:"enableInterNodeCommunication,omitempty"`
	NetworkConfiguration         *NetworkConfiguration          `json:"networkConfiguration,omitempty"`
	StartTask                    *StartTask                     `json:"startTask,omitempty"`
	CertificateReferences        *[]CertificateReference        `json:"certificateReferences,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	ApplicationLicenses          *[]string                      `json:"applicationLicenses,omitempty"`
	MaxTasksPerNode              *int32                         `json:"maxTasksPerNode,omitempty"`
	TaskSchedulingPolicy         *TaskSchedulingPolicy          `json:"taskSchedulingPolicy,omitempty"`
	UserAccounts                 *[]UserAccount                 `json:"userAccounts,omitempty"`
	Metadata                     *[]MetadataItem                `json:"metadata,omitempty"`
}

// PoolEnableAutoScaleParameter is
type PoolEnableAutoScaleParameter struct {
	AutoScaleFormula            *string `json:"autoScaleFormula,omitempty"`
	AutoScaleEvaluationInterval *string `json:"autoScaleEvaluationInterval,omitempty"`
}

// PoolEvaluateAutoScaleParameter is
type PoolEvaluateAutoScaleParameter struct {
	AutoScaleFormula *string `json:"autoScaleFormula,omitempty"`
}

// PoolInformation is
type PoolInformation struct {
	PoolID                *string                `json:"poolId,omitempty"`
	AutoPoolSpecification *AutoPoolSpecification `json:"autoPoolSpecification,omitempty"`
}

// PoolListUsageMetricsResult is
type PoolListUsageMetricsResult struct {
	autorest.Response `json:"-"`
	Value             *[]PoolUsageMetrics `json:"value,omitempty"`
	OdataNextLink     *string             `json:"odata.nextLink,omitempty"`
}

// PoolListUsageMetricsResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client PoolListUsageMetricsResult) PoolListUsageMetricsResultPreparer() (*http.Request, error) {
	if client.OdataNextLink == nil || len(to.String(client.OdataNextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.OdataNextLink)))
}

// PoolPatchParameter is
type PoolPatchParameter struct {
	StartTask                    *StartTask                     `json:"startTask,omitempty"`
	CertificateReferences        *[]CertificateReference        `json:"certificateReferences,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	Metadata                     *[]MetadataItem                `json:"metadata,omitempty"`
}

// PoolResizeParameter is
type PoolResizeParameter struct {
	TargetDedicatedNodes   *int32                        `json:"targetDedicatedNodes,omitempty"`
	TargetLowPriorityNodes *int32                        `json:"targetLowPriorityNodes,omitempty"`
	ResizeTimeout          *string                       `json:"resizeTimeout,omitempty"`
	NodeDeallocationOption ComputeNodeDeallocationOption `json:"nodeDeallocationOption,omitempty"`
}

// PoolSpecification is
type PoolSpecification struct {
	DisplayName                  *string                        `json:"displayName,omitempty"`
	VMSize                       *string                        `json:"vmSize,omitempty"`
	CloudServiceConfiguration    *CloudServiceConfiguration     `json:"cloudServiceConfiguration,omitempty"`
	VirtualMachineConfiguration  *VirtualMachineConfiguration   `json:"virtualMachineConfiguration,omitempty"`
	MaxTasksPerNode              *int32                         `json:"maxTasksPerNode,omitempty"`
	TaskSchedulingPolicy         *TaskSchedulingPolicy          `json:"taskSchedulingPolicy,omitempty"`
	ResizeTimeout                *string                        `json:"resizeTimeout,omitempty"`
	TargetDedicatedNodes         *int32                         `json:"targetDedicatedNodes,omitempty"`
	TargetLowPriorityNodes       *int32                         `json:"targetLowPriorityNodes,omitempty"`
	EnableAutoScale              *bool                          `json:"enableAutoScale,omitempty"`
	AutoScaleFormula             *string                        `json:"autoScaleFormula,omitempty"`
	AutoScaleEvaluationInterval  *string                        `json:"autoScaleEvaluationInterval,omitempty"`
	EnableInterNodeCommunication *bool                          `json:"enableInterNodeCommunication,omitempty"`
	NetworkConfiguration         *NetworkConfiguration          `json:"networkConfiguration,omitempty"`
	StartTask                    *StartTask                     `json:"startTask,omitempty"`
	CertificateReferences        *[]CertificateReference        `json:"certificateReferences,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	ApplicationLicenses          *[]string                      `json:"applicationLicenses,omitempty"`
	UserAccounts                 *[]UserAccount                 `json:"userAccounts,omitempty"`
	Metadata                     *[]MetadataItem                `json:"metadata,omitempty"`
}

// PoolStatistics is
type PoolStatistics struct {
	autorest.Response `json:"-"`
	URL               *string             `json:"url,omitempty"`
	StartTime         *date.Time          `json:"startTime,omitempty"`
	LastUpdateTime    *date.Time          `json:"lastUpdateTime,omitempty"`
	UsageStats        *UsageStatistics    `json:"usageStats,omitempty"`
	ResourceStats     *ResourceStatistics `json:"resourceStats,omitempty"`
}

// PoolUpdatePropertiesParameter is
type PoolUpdatePropertiesParameter struct {
	StartTask                    *StartTask                     `json:"startTask,omitempty"`
	CertificateReferences        *[]CertificateReference        `json:"certificateReferences,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	Metadata                     *[]MetadataItem                `json:"metadata,omitempty"`
}

// PoolUpgradeOSParameter is
type PoolUpgradeOSParameter struct {
	TargetOSVersion *string `json:"targetOSVersion,omitempty"`
}

// PoolUsageMetrics is
type PoolUsageMetrics struct {
	PoolID         *string    `json:"poolId,omitempty"`
	StartTime      *date.Time `json:"startTime,omitempty"`
	EndTime        *date.Time `json:"endTime,omitempty"`
	VMSize         *string    `json:"vmSize,omitempty"`
	TotalCoreHours *float64   `json:"totalCoreHours,omitempty"`
	DataIngressGiB *float64   `json:"dataIngressGiB,omitempty"`
	DataEgressGiB  *float64   `json:"dataEgressGiB,omitempty"`
}

// ReadCloser is
type ReadCloser struct {
	autorest.Response `json:"-"`
	Value             *io.ReadCloser `json:"value,omitempty"`
}

// RecentJob is
type RecentJob struct {
	ID  *string `json:"id,omitempty"`
	URL *string `json:"url,omitempty"`
}

// ResizeError is
type ResizeError struct {
	Code    *string          `json:"code,omitempty"`
	Message *string          `json:"message,omitempty"`
	Values  *[]NameValuePair `json:"values,omitempty"`
}

// ResourceFile is
type ResourceFile struct {
	BlobSource *string `json:"blobSource,omitempty"`
	FilePath   *string `json:"filePath,omitempty"`
	FileMode   *string `json:"fileMode,omitempty"`
}

// ResourceStatistics is
type ResourceStatistics struct {
	StartTime        *date.Time `json:"startTime,omitempty"`
	LastUpdateTime   *date.Time `json:"lastUpdateTime,omitempty"`
	AvgCPUPercentage *float64   `json:"avgCPUPercentage,omitempty"`
	AvgMemoryGiB     *float64   `json:"avgMemoryGiB,omitempty"`
	PeakMemoryGiB    *float64   `json:"peakMemoryGiB,omitempty"`
	AvgDiskGiB       *float64   `json:"avgDiskGiB,omitempty"`
	PeakDiskGiB      *float64   `json:"peakDiskGiB,omitempty"`
	DiskReadIOps     *int64     `json:"diskReadIOps,omitempty"`
	DiskWriteIOps    *int64     `json:"diskWriteIOps,omitempty"`
	DiskReadGiB      *float64   `json:"diskReadGiB,omitempty"`
	DiskWriteGiB     *float64   `json:"diskWriteGiB,omitempty"`
	NetworkReadGiB   *float64   `json:"networkReadGiB,omitempty"`
	NetworkWriteGiB  *float64   `json:"networkWriteGiB,omitempty"`
}

// Schedule is
type Schedule struct {
	DoNotRunUntil      *date.Time `json:"doNotRunUntil,omitempty"`
	DoNotRunAfter      *date.Time `json:"doNotRunAfter,omitempty"`
	StartWindow        *string    `json:"startWindow,omitempty"`
	RecurrenceInterval *string    `json:"recurrenceInterval,omitempty"`
}

// StartTask is
type StartTask struct {
	CommandLine         *string               `json:"commandLine,omitempty"`
	ResourceFiles       *[]ResourceFile       `json:"resourceFiles,omitempty"`
	EnvironmentSettings *[]EnvironmentSetting `json:"environmentSettings,omitempty"`
	UserIdentity        *UserIdentity         `json:"userIdentity,omitempty"`
	MaxTaskRetryCount   *int32                `json:"maxTaskRetryCount,omitempty"`
	WaitForSuccess      *bool                 `json:"waitForSuccess,omitempty"`
}

// StartTaskInformation is
type StartTaskInformation struct {
	State         StartTaskState          `json:"state,omitempty"`
	StartTime     *date.Time              `json:"startTime,omitempty"`
	EndTime       *date.Time              `json:"endTime,omitempty"`
	ExitCode      *int32                  `json:"exitCode,omitempty"`
	FailureInfo   *TaskFailureInformation `json:"failureInfo,omitempty"`
	RetryCount    *int32                  `json:"retryCount,omitempty"`
	LastRetryTime *date.Time              `json:"lastRetryTime,omitempty"`
	Result        TaskExecutionResult     `json:"result,omitempty"`
}

// SubtaskInformation is
type SubtaskInformation struct {
	ID                          *int32                  `json:"id,omitempty"`
	NodeInfo                    *ComputeNodeInformation `json:"nodeInfo,omitempty"`
	StartTime                   *date.Time              `json:"startTime,omitempty"`
	EndTime                     *date.Time              `json:"endTime,omitempty"`
	ExitCode                    *int32                  `json:"exitCode,omitempty"`
	FailureInfo                 *TaskFailureInformation `json:"failureInfo,omitempty"`
	State                       SubtaskState            `json:"state,omitempty"`
	StateTransitionTime         *date.Time              `json:"stateTransitionTime,omitempty"`
	PreviousState               SubtaskState            `json:"previousState,omitempty"`
	PreviousStateTransitionTime *date.Time              `json:"previousStateTransitionTime,omitempty"`
	Result                      TaskExecutionResult     `json:"result,omitempty"`
}

// TaskAddCollectionParameter is
type TaskAddCollectionParameter struct {
	Value *[]TaskAddParameter `json:"value,omitempty"`
}

// TaskAddCollectionResult is
type TaskAddCollectionResult struct {
	autorest.Response `json:"-"`
	Value             *[]TaskAddResult `json:"value,omitempty"`
}

// TaskAddParameter is
type TaskAddParameter struct {
	ID                           *string                        `json:"id,omitempty"`
	DisplayName                  *string                        `json:"displayName,omitempty"`
	CommandLine                  *string                        `json:"commandLine,omitempty"`
	ExitConditions               *ExitConditions                `json:"exitConditions,omitempty"`
	ResourceFiles                *[]ResourceFile                `json:"resourceFiles,omitempty"`
	OutputFiles                  *[]OutputFile                  `json:"outputFiles,omitempty"`
	EnvironmentSettings          *[]EnvironmentSetting          `json:"environmentSettings,omitempty"`
	AffinityInfo                 *AffinityInformation           `json:"affinityInfo,omitempty"`
	Constraints                  *TaskConstraints               `json:"constraints,omitempty"`
	UserIdentity                 *UserIdentity                  `json:"userIdentity,omitempty"`
	MultiInstanceSettings        *MultiInstanceSettings         `json:"multiInstanceSettings,omitempty"`
	DependsOn                    *TaskDependencies              `json:"dependsOn,omitempty"`
	ApplicationPackageReferences *[]ApplicationPackageReference `json:"applicationPackageReferences,omitempty"`
	AuthenticationTokenSettings  *AuthenticationTokenSettings   `json:"authenticationTokenSettings,omitempty"`
}

// TaskAddResult is
type TaskAddResult struct {
	Status       TaskAddStatus `json:"status,omitempty"`
	TaskID       *string       `json:"taskId,omitempty"`
	ETag         *string       `json:"eTag,omitempty"`
	LastModified *date.Time    `json:"lastModified,omitempty"`
	Location     *string       `json:"location,omitempty"`
	Error        *BatchError   `json:"error,omitempty"`
}

// TaskConstraints is
type TaskConstraints struct {
	MaxWallClockTime  *string `json:"maxWallClockTime,omitempty"`
	RetentionTime     *string `json:"retentionTime,omitempty"`
	MaxTaskRetryCount *int32  `json:"maxTaskRetryCount,omitempty"`
}

// TaskDependencies is
type TaskDependencies struct {
	TaskIds      *[]string      `json:"taskIds,omitempty"`
	TaskIDRanges *[]TaskIDRange `json:"taskIdRanges,omitempty"`
}

// TaskExecutionInformation is
type TaskExecutionInformation struct {
	StartTime       *date.Time              `json:"startTime,omitempty"`
	EndTime         *date.Time              `json:"endTime,omitempty"`
	ExitCode        *int32                  `json:"exitCode,omitempty"`
	FailureInfo     *TaskFailureInformation `json:"failureInfo,omitempty"`
	RetryCount      *int32                  `json:"retryCount,omitempty"`
	LastRetryTime   *date.Time              `json:"lastRetryTime,omitempty"`
	RequeueCount    *int32                  `json:"requeueCount,omitempty"`
	LastRequeueTime *date.Time              `json:"lastRequeueTime,omitempty"`
	Result          TaskExecutionResult     `json:"result,omitempty"`
}

// TaskFailureInformation is
type TaskFailureInformation struct {
	Category ErrorCategory    `json:"category,omitempty"`
	Code     *string          `json:"code,omitempty"`
	Message  *string          `json:"message,omitempty"`
	Details  *[]NameValuePair `json:"details,omitempty"`
}

// TaskIDRange is the start and end of the range are inclusive. For example, if
// a range has start 9 and end 12, then it represents tasks '9', '10', '11' and
// '12'.
type TaskIDRange struct {
	Start *int32 `json:"start,omitempty"`
	End   *int32 `json:"end,omitempty"`
}

// TaskInformation is
type TaskInformation struct {
	TaskURL       *string                   `json:"taskUrl,omitempty"`
	JobID         *string                   `json:"jobId,omitempty"`
	TaskID        *string                   `json:"taskId,omitempty"`
	SubtaskID     *int32                    `json:"subtaskId,omitempty"`
	TaskState     TaskState                 `json:"taskState,omitempty"`
	ExecutionInfo *TaskExecutionInformation `json:"executionInfo,omitempty"`
}

// TaskSchedulingPolicy is
type TaskSchedulingPolicy struct {
	NodeFillType ComputeNodeFillType `json:"nodeFillType,omitempty"`
}

// TaskStatistics is
type TaskStatistics struct {
	URL            *string    `json:"url,omitempty"`
	StartTime      *date.Time `json:"startTime,omitempty"`
	LastUpdateTime *date.Time `json:"lastUpdateTime,omitempty"`
	UserCPUTime    *string    `json:"userCPUTime,omitempty"`
	KernelCPUTime  *string    `json:"kernelCPUTime,omitempty"`
	WallClockTime  *string    `json:"wallClockTime,omitempty"`
	ReadIOps       *int64     `json:"readIOps,omitempty"`
	WriteIOps      *int64     `json:"writeIOps,omitempty"`
	ReadIOGiB      *float64   `json:"readIOGiB,omitempty"`
	WriteIOGiB     *float64   `json:"writeIOGiB,omitempty"`
	WaitTime       *string    `json:"waitTime,omitempty"`
}

// TaskUpdateParameter is
type TaskUpdateParameter struct {
	Constraints *TaskConstraints `json:"constraints,omitempty"`
}

// UsageStatistics is
type UsageStatistics struct {
	StartTime         *date.Time `json:"startTime,omitempty"`
	LastUpdateTime    *date.Time `json:"lastUpdateTime,omitempty"`
	DedicatedCoreTime *string    `json:"dedicatedCoreTime,omitempty"`
}

// UserAccount is
type UserAccount struct {
	Name                   *string                 `json:"name,omitempty"`
	Password               *string                 `json:"password,omitempty"`
	ElevationLevel         ElevationLevel          `json:"elevationLevel,omitempty"`
	LinuxUserConfiguration *LinuxUserConfiguration `json:"linuxUserConfiguration,omitempty"`
}

// UserIdentity is specify either the userName or autoUser property, but not
// both.
type UserIdentity struct {
	UserName *string                `json:"username,omitempty"`
	AutoUser *AutoUserSpecification `json:"autoUser,omitempty"`
}

// VirtualMachineConfiguration is
type VirtualMachineConfiguration struct {
	ImageReference       *ImageReference       `json:"imageReference,omitempty"`
	OsDisk               *OSDisk               `json:"osDisk,omitempty"`
	NodeAgentSKUID       *string               `json:"nodeAgentSKUId,omitempty"`
	WindowsConfiguration *WindowsConfiguration `json:"windowsConfiguration,omitempty"`
}

// WindowsConfiguration is
type WindowsConfiguration struct {
	EnableAutomaticUpdates *bool `json:"enableAutomaticUpdates,omitempty"`
}
