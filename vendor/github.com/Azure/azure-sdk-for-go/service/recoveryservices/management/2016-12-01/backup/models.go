package backup

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
)

// EnhancedSecurityState enumerates the values for enhanced security state.
type EnhancedSecurityState string

const (
	// Disabled specifies the disabled state for enhanced security state.
	Disabled EnhancedSecurityState = "Disabled"
	// Enabled specifies the enabled state for enhanced security state.
	Enabled EnhancedSecurityState = "Enabled"
	// Invalid specifies the invalid state for enhanced security state.
	Invalid EnhancedSecurityState = "Invalid"
)

// SkuName enumerates the values for sku name.
type SkuName string

const (
	// RS0 specifies the rs0 state for sku name.
	RS0 SkuName = "RS0"
	// Standard specifies the standard state for sku name.
	Standard SkuName = "Standard"
)

// StorageModelType enumerates the values for storage model type.
type StorageModelType string

const (
	// StorageModelTypeGeoRedundant specifies the storage model type geo
	// redundant state for storage model type.
	StorageModelTypeGeoRedundant StorageModelType = "GeoRedundant"
	// StorageModelTypeInvalid specifies the storage model type invalid state
	// for storage model type.
	StorageModelTypeInvalid StorageModelType = "Invalid"
	// StorageModelTypeLocallyRedundant specifies the storage model type
	// locally redundant state for storage model type.
	StorageModelTypeLocallyRedundant StorageModelType = "LocallyRedundant"
)

// StorageType enumerates the values for storage type.
type StorageType string

const (
	// StorageTypeGeoRedundant specifies the storage type geo redundant state
	// for storage type.
	StorageTypeGeoRedundant StorageType = "GeoRedundant"
	// StorageTypeInvalid specifies the storage type invalid state for storage
	// type.
	StorageTypeInvalid StorageType = "Invalid"
	// StorageTypeLocallyRedundant specifies the storage type locally redundant
	// state for storage type.
	StorageTypeLocallyRedundant StorageType = "LocallyRedundant"
)

// StorageTypeState enumerates the values for storage type state.
type StorageTypeState string

const (
	// StorageTypeStateInvalid specifies the storage type state invalid state
	// for storage type state.
	StorageTypeStateInvalid StorageTypeState = "Invalid"
	// StorageTypeStateLocked specifies the storage type state locked state for
	// storage type state.
	StorageTypeStateLocked StorageTypeState = "Locked"
	// StorageTypeStateUnlocked specifies the storage type state unlocked state
	// for storage type state.
	StorageTypeStateUnlocked StorageTypeState = "Unlocked"
)

// TriggerType enumerates the values for trigger type.
type TriggerType string

const (
	// ForcedUpgrade specifies the forced upgrade state for trigger type.
	ForcedUpgrade TriggerType = "ForcedUpgrade"
	// UserTriggered specifies the user triggered state for trigger type.
	UserTriggered TriggerType = "UserTriggered"
)

// VaultUpgradeState enumerates the values for vault upgrade state.
type VaultUpgradeState string

const (
	// Failed specifies the failed state for vault upgrade state.
	Failed VaultUpgradeState = "Failed"
	// InProgress specifies the in progress state for vault upgrade state.
	InProgress VaultUpgradeState = "InProgress"
	// Unknown specifies the unknown state for vault upgrade state.
	Unknown VaultUpgradeState = "Unknown"
	// Upgraded specifies the upgraded state for vault upgrade state.
	Upgraded VaultUpgradeState = "Upgraded"
)

// Resource is aRM Resource.
type Resource struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	ETag *string `json:"eTag,omitempty"`
}

// Sku is identifies the unique system identifier for each Azure resource.
type Sku struct {
	Name SkuName `json:"name,omitempty"`
}

// StorageConfig is the backup storage config.
type StorageConfig struct {
	autorest.Response        `json:"-"`
	ID                       *string `json:"id,omitempty"`
	Name                     *string `json:"name,omitempty"`
	Type                     *string `json:"type,omitempty"`
	ETag                     *string `json:"eTag,omitempty"`
	*StorageConfigProperties `json:"properties,omitempty"`
}

// StorageConfigProperties is the backup storage config.
type StorageConfigProperties struct {
	StorageModelType StorageModelType `json:"storageModelType,omitempty"`
	StorageType      StorageType      `json:"storageType,omitempty"`
	StorageTypeState StorageTypeState `json:"storageTypeState,omitempty"`
}

// TrackedResource is tracked resource with location.
type TrackedResource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	ETag     *string             `json:"eTag,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// UpgradeDetails is details for upgrading vault.
type UpgradeDetails struct {
	OperationID        *string           `json:"operationId,omitempty"`
	StartTimeUtc       *date.Time        `json:"startTimeUtc,omitempty"`
	LastUpdatedTimeUtc *date.Time        `json:"lastUpdatedTimeUtc,omitempty"`
	EndTimeUtc         *date.Time        `json:"endTimeUtc,omitempty"`
	Status             VaultUpgradeState `json:"status,omitempty"`
	Message            *string           `json:"message,omitempty"`
	TriggerType        TriggerType       `json:"triggerType,omitempty"`
	UpgradedResourceID *string           `json:"upgradedResourceId,omitempty"`
	PreviousResourceID *string           `json:"previousResourceId,omitempty"`
}

// Vault is resource information, as returned by the resource provider.
type Vault struct {
	ID         *string             `json:"id,omitempty"`
	Name       *string             `json:"name,omitempty"`
	Type       *string             `json:"type,omitempty"`
	ETag       *string             `json:"eTag,omitempty"`
	Location   *string             `json:"location,omitempty"`
	Tags       *map[string]*string `json:"tags,omitempty"`
	Properties *VaultProperties    `json:"properties,omitempty"`
	Sku        *Sku                `json:"sku,omitempty"`
}

// VaultConfig is backup vault config details.
type VaultConfig struct {
	autorest.Response      `json:"-"`
	ID                     *string `json:"id,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Type                   *string `json:"type,omitempty"`
	ETag                   *string `json:"eTag,omitempty"`
	*VaultConfigProperties `json:"properties,omitempty"`
}

// VaultConfigProperties is backup vault config details.
type VaultConfigProperties struct {
	StorageType           StorageType           `json:"storageType,omitempty"`
	StorageTypeState      StorageTypeState      `json:"storageTypeState,omitempty"`
	EnhancedSecurityState EnhancedSecurityState `json:"enhancedSecurityState,omitempty"`
}

// VaultExtendedInfo is vault extended information.
type VaultExtendedInfo struct {
	IntegrityKey            *string `json:"integrityKey,omitempty"`
	EncryptionKey           *string `json:"encryptionKey,omitempty"`
	EncryptionKeyThumbprint *string `json:"encryptionKeyThumbprint,omitempty"`
	Algorithm               *string `json:"algorithm,omitempty"`
}

// VaultExtendedInfoResource is vault extended information.
type VaultExtendedInfoResource struct {
	ID                 *string `json:"id,omitempty"`
	Name               *string `json:"name,omitempty"`
	Type               *string `json:"type,omitempty"`
	ETag               *string `json:"eTag,omitempty"`
	*VaultExtendedInfo `json:"properties,omitempty"`
}

// VaultProperties is properties of the vault.
type VaultProperties struct {
	ProvisioningState *string         `json:"provisioningState,omitempty"`
	UpgradeDetails    *UpgradeDetails `json:"upgradeDetails,omitempty"`
}
