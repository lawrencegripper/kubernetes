package vmssnetworkinterface

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// IPAllocationMethod enumerates the values for ip allocation method.
type IPAllocationMethod string

const (
	// Dynamic specifies the dynamic state for ip allocation method.
	Dynamic IPAllocationMethod = "Dynamic"
	// Static specifies the static state for ip allocation method.
	Static IPAllocationMethod = "Static"
)

// IPVersion enumerates the values for ip version.
type IPVersion string

const (
	// IPv4 specifies the i pv 4 state for ip version.
	IPv4 IPVersion = "IPv4"
	// IPv6 specifies the i pv 6 state for ip version.
	IPv6 IPVersion = "IPv6"
)

// RouteNextHopType enumerates the values for route next hop type.
type RouteNextHopType string

const (
	// Internet specifies the internet state for route next hop type.
	Internet RouteNextHopType = "Internet"
	// None specifies the none state for route next hop type.
	None RouteNextHopType = "None"
	// VirtualAppliance specifies the virtual appliance state for route next
	// hop type.
	VirtualAppliance RouteNextHopType = "VirtualAppliance"
	// VirtualNetworkGateway specifies the virtual network gateway state for
	// route next hop type.
	VirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
	// VnetLocal specifies the vnet local state for route next hop type.
	VnetLocal RouteNextHopType = "VnetLocal"
)

// SecurityRuleAccess enumerates the values for security rule access.
type SecurityRuleAccess string

const (
	// Allow specifies the allow state for security rule access.
	Allow SecurityRuleAccess = "Allow"
	// Deny specifies the deny state for security rule access.
	Deny SecurityRuleAccess = "Deny"
)

// SecurityRuleDirection enumerates the values for security rule direction.
type SecurityRuleDirection string

const (
	// Inbound specifies the inbound state for security rule direction.
	Inbound SecurityRuleDirection = "Inbound"
	// Outbound specifies the outbound state for security rule direction.
	Outbound SecurityRuleDirection = "Outbound"
)

// SecurityRuleProtocol enumerates the values for security rule protocol.
type SecurityRuleProtocol string

const (
	// Asterisk specifies the asterisk state for security rule protocol.
	Asterisk SecurityRuleProtocol = "*"
	// TCP specifies the tcp state for security rule protocol.
	TCP SecurityRuleProtocol = "Tcp"
	// UDP specifies the udp state for security rule protocol.
	UDP SecurityRuleProtocol = "Udp"
)

// TransportProtocol enumerates the values for transport protocol.
type TransportProtocol string

const (
	// TransportProtocolTCP specifies the transport protocol tcp state for
	// transport protocol.
	TransportProtocolTCP TransportProtocol = "Tcp"
	// TransportProtocolUDP specifies the transport protocol udp state for
	// transport protocol.
	TransportProtocolUDP TransportProtocol = "Udp"
)

// ApplicationGatewayBackendAddress is backend address of an application
// gateway.
type ApplicationGatewayBackendAddress struct {
	Fqdn      *string `json:"fqdn,omitempty"`
	IPAddress *string `json:"ipAddress,omitempty"`
}

// ApplicationGatewayBackendAddressPool is backend Address Pool of an
// application gateway.
type ApplicationGatewayBackendAddressPool struct {
	ID                                                    *string `json:"id,omitempty"`
	*ApplicationGatewayBackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	Name                                                  *string `json:"name,omitempty"`
	Etag                                                  *string `json:"etag,omitempty"`
}

// ApplicationGatewayBackendAddressPoolPropertiesFormat is properties of
// Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
	BackendIPConfigurations *[]NetworkInterfaceIPConfiguration  `json:"backendIPConfigurations,omitempty"`
	BackendAddresses        *[]ApplicationGatewayBackendAddress `json:"backendAddresses,omitempty"`
	ProvisioningState       *string                             `json:"provisioningState,omitempty"`
}

// BackendAddressPool is pool of backend IP addresses.
type BackendAddressPool struct {
	ID                                  *string `json:"id,omitempty"`
	*BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	Name                                *string `json:"name,omitempty"`
	Etag                                *string `json:"etag,omitempty"`
}

// BackendAddressPoolPropertiesFormat is properties of the backend address
// pool.
type BackendAddressPoolPropertiesFormat struct {
	BackendIPConfigurations *[]NetworkInterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	LoadBalancingRules      *[]SubResource                     `json:"loadBalancingRules,omitempty"`
	OutboundNatRule         *SubResource                       `json:"outboundNatRule,omitempty"`
	ProvisioningState       *string                            `json:"provisioningState,omitempty"`
}

// InboundNatRule is inbound NAT rule of the load balancer.
type InboundNatRule struct {
	ID                              *string `json:"id,omitempty"`
	*InboundNatRulePropertiesFormat `json:"properties,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Etag                            *string `json:"etag,omitempty"`
}

// InboundNatRulePropertiesFormat is properties of the inbound NAT rule.
type InboundNatRulePropertiesFormat struct {
	FrontendIPConfiguration *SubResource                     `json:"frontendIPConfiguration,omitempty"`
	BackendIPConfiguration  *NetworkInterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`
	Protocol                TransportProtocol                `json:"protocol,omitempty"`
	FrontendPort            *int32                           `json:"frontendPort,omitempty"`
	BackendPort             *int32                           `json:"backendPort,omitempty"`
	IdleTimeoutInMinutes    *int32                           `json:"idleTimeoutInMinutes,omitempty"`
	EnableFloatingIP        *bool                            `json:"enableFloatingIP,omitempty"`
	ProvisioningState       *string                          `json:"provisioningState,omitempty"`
}

// IPConfiguration is iPConfiguration
type IPConfiguration struct {
	ID                               *string `json:"id,omitempty"`
	*IPConfigurationPropertiesFormat `json:"properties,omitempty"`
	Name                             *string `json:"name,omitempty"`
	Etag                             *string `json:"etag,omitempty"`
}

// IPConfigurationPropertiesFormat is properties of IP configuration.
type IPConfigurationPropertiesFormat struct {
	PrivateIPAddress          *string            `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
	Subnet                    *Subnet            `json:"subnet,omitempty"`
	PublicIPAddress           *PublicIPAddress   `json:"publicIPAddress,omitempty"`
	ProvisioningState         *string            `json:"provisioningState,omitempty"`
}

// NetworkInterface is a network interface in a resource group.
type NetworkInterface struct {
	autorest.Response                 `json:"-"`
	ID                                *string             `json:"id,omitempty"`
	Name                              *string             `json:"name,omitempty"`
	Type                              *string             `json:"type,omitempty"`
	Location                          *string             `json:"location,omitempty"`
	Tags                              *map[string]*string `json:"tags,omitempty"`
	*NetworkInterfacePropertiesFormat `json:"properties,omitempty"`
	Etag                              *string `json:"etag,omitempty"`
}

// NetworkInterfaceDNSSettings is dNS settings of a network interface.
type NetworkInterfaceDNSSettings struct {
	DNSServers               *[]string `json:"dnsServers,omitempty"`
	AppliedDNSServers        *[]string `json:"appliedDnsServers,omitempty"`
	InternalDNSNameLabel     *string   `json:"internalDnsNameLabel,omitempty"`
	InternalFqdn             *string   `json:"internalFqdn,omitempty"`
	InternalDomainNameSuffix *string   `json:"internalDomainNameSuffix,omitempty"`
}

// NetworkInterfaceIPConfiguration is iPConfiguration in a network interface.
type NetworkInterfaceIPConfiguration struct {
	ID                                               *string `json:"id,omitempty"`
	*NetworkInterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	Name                                             *string `json:"name,omitempty"`
	Etag                                             *string `json:"etag,omitempty"`
}

// NetworkInterfaceIPConfigurationPropertiesFormat is properties of IP
// configuration.
type NetworkInterfaceIPConfigurationPropertiesFormat struct {
	ApplicationGatewayBackendAddressPools *[]ApplicationGatewayBackendAddressPool `json:"applicationGatewayBackendAddressPools,omitempty"`
	LoadBalancerBackendAddressPools       *[]BackendAddressPool                   `json:"loadBalancerBackendAddressPools,omitempty"`
	LoadBalancerInboundNatRules           *[]InboundNatRule                       `json:"loadBalancerInboundNatRules,omitempty"`
	PrivateIPAddress                      *string                                 `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod             IPAllocationMethod                      `json:"privateIPAllocationMethod,omitempty"`
	PrivateIPAddressVersion               IPVersion                               `json:"privateIPAddressVersion,omitempty"`
	Subnet                                *Subnet                                 `json:"subnet,omitempty"`
	Primary                               *bool                                   `json:"primary,omitempty"`
	PublicIPAddress                       *PublicIPAddress                        `json:"publicIPAddress,omitempty"`
	ProvisioningState                     *string                                 `json:"provisioningState,omitempty"`
}

// NetworkInterfaceListResult is response for the ListNetworkInterface API
// service call.
type NetworkInterfaceListResult struct {
	autorest.Response `json:"-"`
	Value             *[]NetworkInterface `json:"value,omitempty"`
	NextLink          *string             `json:"nextLink,omitempty"`
}

// NetworkInterfaceListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client NetworkInterfaceListResult) NetworkInterfaceListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// NetworkInterfacePropertiesFormat is networkInterface properties.
type NetworkInterfacePropertiesFormat struct {
	VirtualMachine              *SubResource                       `json:"virtualMachine,omitempty"`
	NetworkSecurityGroup        *NetworkSecurityGroup              `json:"networkSecurityGroup,omitempty"`
	IPConfigurations            *[]NetworkInterfaceIPConfiguration `json:"ipConfigurations,omitempty"`
	DNSSettings                 *NetworkInterfaceDNSSettings       `json:"dnsSettings,omitempty"`
	MacAddress                  *string                            `json:"macAddress,omitempty"`
	Primary                     *bool                              `json:"primary,omitempty"`
	EnableAcceleratedNetworking *bool                              `json:"enableAcceleratedNetworking,omitempty"`
	EnableIPForwarding          *bool                              `json:"enableIPForwarding,omitempty"`
	ResourceGUID                *string                            `json:"resourceGuid,omitempty"`
	ProvisioningState           *string                            `json:"provisioningState,omitempty"`
}

// NetworkSecurityGroup is networkSecurityGroup resource.
type NetworkSecurityGroup struct {
	ID                                    *string             `json:"id,omitempty"`
	Name                                  *string             `json:"name,omitempty"`
	Type                                  *string             `json:"type,omitempty"`
	Location                              *string             `json:"location,omitempty"`
	Tags                                  *map[string]*string `json:"tags,omitempty"`
	*NetworkSecurityGroupPropertiesFormat `json:"properties,omitempty"`
	Etag                                  *string `json:"etag,omitempty"`
}

// NetworkSecurityGroupPropertiesFormat is network Security Group resource.
type NetworkSecurityGroupPropertiesFormat struct {
	SecurityRules        *[]SecurityRule     `json:"securityRules,omitempty"`
	DefaultSecurityRules *[]SecurityRule     `json:"defaultSecurityRules,omitempty"`
	NetworkInterfaces    *[]NetworkInterface `json:"networkInterfaces,omitempty"`
	Subnets              *[]Subnet           `json:"subnets,omitempty"`
	ResourceGUID         *string             `json:"resourceGuid,omitempty"`
	ProvisioningState    *string             `json:"provisioningState,omitempty"`
}

// PublicIPAddress is public IP address resource.
type PublicIPAddress struct {
	ID                               *string             `json:"id,omitempty"`
	Name                             *string             `json:"name,omitempty"`
	Type                             *string             `json:"type,omitempty"`
	Location                         *string             `json:"location,omitempty"`
	Tags                             *map[string]*string `json:"tags,omitempty"`
	*PublicIPAddressPropertiesFormat `json:"properties,omitempty"`
	Etag                             *string `json:"etag,omitempty"`
}

// PublicIPAddressDNSSettings is contains FQDN of the DNS record associated
// with the public IP address
type PublicIPAddressDNSSettings struct {
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
	Fqdn            *string `json:"fqdn,omitempty"`
	ReverseFqdn     *string `json:"reverseFqdn,omitempty"`
}

// PublicIPAddressPropertiesFormat is public IP address properties.
type PublicIPAddressPropertiesFormat struct {
	PublicIPAllocationMethod IPAllocationMethod          `json:"publicIPAllocationMethod,omitempty"`
	PublicIPAddressVersion   IPVersion                   `json:"publicIPAddressVersion,omitempty"`
	IPConfiguration          *IPConfiguration            `json:"ipConfiguration,omitempty"`
	DNSSettings              *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`
	IPAddress                *string                     `json:"ipAddress,omitempty"`
	IdleTimeoutInMinutes     *int32                      `json:"idleTimeoutInMinutes,omitempty"`
	ResourceGUID             *string                     `json:"resourceGuid,omitempty"`
	ProvisioningState        *string                     `json:"provisioningState,omitempty"`
}

// Resource is
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceNavigationLink is resourceNavigationLink resource.
type ResourceNavigationLink struct {
	ID                            *string `json:"id,omitempty"`
	*ResourceNavigationLinkFormat `json:"properties,omitempty"`
	Name                          *string `json:"name,omitempty"`
	Etag                          *string `json:"etag,omitempty"`
}

// ResourceNavigationLinkFormat is properties of ResourceNavigationLink.
type ResourceNavigationLinkFormat struct {
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`
	Link               *string `json:"link,omitempty"`
	ProvisioningState  *string `json:"provisioningState,omitempty"`
}

// Route is route resource
type Route struct {
	ID                     *string `json:"id,omitempty"`
	*RoutePropertiesFormat `json:"properties,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Etag                   *string `json:"etag,omitempty"`
}

// RoutePropertiesFormat is route resource
type RoutePropertiesFormat struct {
	AddressPrefix     *string          `json:"addressPrefix,omitempty"`
	NextHopType       RouteNextHopType `json:"nextHopType,omitempty"`
	NextHopIPAddress  *string          `json:"nextHopIpAddress,omitempty"`
	ProvisioningState *string          `json:"provisioningState,omitempty"`
}

// RouteTable is route table resource.
type RouteTable struct {
	ID                          *string             `json:"id,omitempty"`
	Name                        *string             `json:"name,omitempty"`
	Type                        *string             `json:"type,omitempty"`
	Location                    *string             `json:"location,omitempty"`
	Tags                        *map[string]*string `json:"tags,omitempty"`
	*RouteTablePropertiesFormat `json:"properties,omitempty"`
	Etag                        *string `json:"etag,omitempty"`
}

// RouteTablePropertiesFormat is route Table resource
type RouteTablePropertiesFormat struct {
	Routes            *[]Route  `json:"routes,omitempty"`
	Subnets           *[]Subnet `json:"subnets,omitempty"`
	ProvisioningState *string   `json:"provisioningState,omitempty"`
}

// SecurityRule is network security rule.
type SecurityRule struct {
	ID                            *string `json:"id,omitempty"`
	*SecurityRulePropertiesFormat `json:"properties,omitempty"`
	Name                          *string `json:"name,omitempty"`
	Etag                          *string `json:"etag,omitempty"`
}

// SecurityRulePropertiesFormat is
type SecurityRulePropertiesFormat struct {
	Description              *string               `json:"description,omitempty"`
	Protocol                 SecurityRuleProtocol  `json:"protocol,omitempty"`
	SourcePortRange          *string               `json:"sourcePortRange,omitempty"`
	DestinationPortRange     *string               `json:"destinationPortRange,omitempty"`
	SourceAddressPrefix      *string               `json:"sourceAddressPrefix,omitempty"`
	DestinationAddressPrefix *string               `json:"destinationAddressPrefix,omitempty"`
	Access                   SecurityRuleAccess    `json:"access,omitempty"`
	Priority                 *int32                `json:"priority,omitempty"`
	Direction                SecurityRuleDirection `json:"direction,omitempty"`
	ProvisioningState        *string               `json:"provisioningState,omitempty"`
}

// Subnet is subnet in a virtual network resource.
type Subnet struct {
	ID                      *string `json:"id,omitempty"`
	*SubnetPropertiesFormat `json:"properties,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Etag                    *string `json:"etag,omitempty"`
}

// SubnetPropertiesFormat is
type SubnetPropertiesFormat struct {
	AddressPrefix           *string                   `json:"addressPrefix,omitempty"`
	NetworkSecurityGroup    *NetworkSecurityGroup     `json:"networkSecurityGroup,omitempty"`
	RouteTable              *RouteTable               `json:"routeTable,omitempty"`
	IPConfigurations        *[]IPConfiguration        `json:"ipConfigurations,omitempty"`
	ResourceNavigationLinks *[]ResourceNavigationLink `json:"resourceNavigationLinks,omitempty"`
	ProvisioningState       *string                   `json:"provisioningState,omitempty"`
}

// SubResource is
type SubResource struct {
	ID *string `json:"id,omitempty"`
}
