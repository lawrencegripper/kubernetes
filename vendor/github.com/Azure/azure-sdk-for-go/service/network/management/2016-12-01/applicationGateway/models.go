package applicationgateway

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// BackendHealthServerHealth enumerates the values for backend health server
// health.
type BackendHealthServerHealth string

const (
	// Down specifies the down state for backend health server health.
	Down BackendHealthServerHealth = "Down"
	// Partial specifies the partial state for backend health server health.
	Partial BackendHealthServerHealth = "Partial"
	// Unknown specifies the unknown state for backend health server health.
	Unknown BackendHealthServerHealth = "Unknown"
	// Up specifies the up state for backend health server health.
	Up BackendHealthServerHealth = "Up"
)

// CookieBasedAffinity enumerates the values for cookie based affinity.
type CookieBasedAffinity string

const (
	// Disabled specifies the disabled state for cookie based affinity.
	Disabled CookieBasedAffinity = "Disabled"
	// Enabled specifies the enabled state for cookie based affinity.
	Enabled CookieBasedAffinity = "Enabled"
)

// FirewallMode enumerates the values for firewall mode.
type FirewallMode string

const (
	// Detection specifies the detection state for firewall mode.
	Detection FirewallMode = "Detection"
	// Prevention specifies the prevention state for firewall mode.
	Prevention FirewallMode = "Prevention"
)

// IPAllocationMethod enumerates the values for ip allocation method.
type IPAllocationMethod string

const (
	// Dynamic specifies the dynamic state for ip allocation method.
	Dynamic IPAllocationMethod = "Dynamic"
	// Static specifies the static state for ip allocation method.
	Static IPAllocationMethod = "Static"
)

// IPVersion enumerates the values for ip version.
type IPVersion string

const (
	// IPv4 specifies the i pv 4 state for ip version.
	IPv4 IPVersion = "IPv4"
	// IPv6 specifies the i pv 6 state for ip version.
	IPv6 IPVersion = "IPv6"
)

// OperationalState enumerates the values for operational state.
type OperationalState string

const (
	// Running specifies the running state for operational state.
	Running OperationalState = "Running"
	// Starting specifies the starting state for operational state.
	Starting OperationalState = "Starting"
	// Stopped specifies the stopped state for operational state.
	Stopped OperationalState = "Stopped"
	// Stopping specifies the stopping state for operational state.
	Stopping OperationalState = "Stopping"
)

// Protocol enumerates the values for protocol.
type Protocol string

const (
	// HTTP specifies the http state for protocol.
	HTTP Protocol = "Http"
	// HTTPS specifies the https state for protocol.
	HTTPS Protocol = "Https"
)

// RequestRoutingRuleType enumerates the values for request routing rule type.
type RequestRoutingRuleType string

const (
	// Basic specifies the basic state for request routing rule type.
	Basic RequestRoutingRuleType = "Basic"
	// PathBasedRouting specifies the path based routing state for request
	// routing rule type.
	PathBasedRouting RequestRoutingRuleType = "PathBasedRouting"
)

// RouteNextHopType enumerates the values for route next hop type.
type RouteNextHopType string

const (
	// Internet specifies the internet state for route next hop type.
	Internet RouteNextHopType = "Internet"
	// None specifies the none state for route next hop type.
	None RouteNextHopType = "None"
	// VirtualAppliance specifies the virtual appliance state for route next
	// hop type.
	VirtualAppliance RouteNextHopType = "VirtualAppliance"
	// VirtualNetworkGateway specifies the virtual network gateway state for
	// route next hop type.
	VirtualNetworkGateway RouteNextHopType = "VirtualNetworkGateway"
	// VnetLocal specifies the vnet local state for route next hop type.
	VnetLocal RouteNextHopType = "VnetLocal"
)

// SecurityRuleAccess enumerates the values for security rule access.
type SecurityRuleAccess string

const (
	// Allow specifies the allow state for security rule access.
	Allow SecurityRuleAccess = "Allow"
	// Deny specifies the deny state for security rule access.
	Deny SecurityRuleAccess = "Deny"
)

// SecurityRuleDirection enumerates the values for security rule direction.
type SecurityRuleDirection string

const (
	// Inbound specifies the inbound state for security rule direction.
	Inbound SecurityRuleDirection = "Inbound"
	// Outbound specifies the outbound state for security rule direction.
	Outbound SecurityRuleDirection = "Outbound"
)

// SecurityRuleProtocol enumerates the values for security rule protocol.
type SecurityRuleProtocol string

const (
	// Asterisk specifies the asterisk state for security rule protocol.
	Asterisk SecurityRuleProtocol = "*"
	// TCP specifies the tcp state for security rule protocol.
	TCP SecurityRuleProtocol = "Tcp"
	// UDP specifies the udp state for security rule protocol.
	UDP SecurityRuleProtocol = "Udp"
)

// SkuName enumerates the values for sku name.
type SkuName string

const (
	// StandardLarge specifies the standard large state for sku name.
	StandardLarge SkuName = "Standard_Large"
	// StandardMedium specifies the standard medium state for sku name.
	StandardMedium SkuName = "Standard_Medium"
	// StandardSmall specifies the standard small state for sku name.
	StandardSmall SkuName = "Standard_Small"
	// WAFLarge specifies the waf large state for sku name.
	WAFLarge SkuName = "WAF_Large"
	// WAFMedium specifies the waf medium state for sku name.
	WAFMedium SkuName = "WAF_Medium"
)

// SslProtocol enumerates the values for ssl protocol.
type SslProtocol string

const (
	// TLSv10 specifies the tl sv 10 state for ssl protocol.
	TLSv10 SslProtocol = "TLSv1_0"
	// TLSv11 specifies the tl sv 11 state for ssl protocol.
	TLSv11 SslProtocol = "TLSv1_1"
	// TLSv12 specifies the tl sv 12 state for ssl protocol.
	TLSv12 SslProtocol = "TLSv1_2"
)

// Tier enumerates the values for tier.
type Tier string

const (
	// Standard specifies the standard state for tier.
	Standard Tier = "Standard"
	// WAF specifies the waf state for tier.
	WAF Tier = "WAF"
)

// TransportProtocol enumerates the values for transport protocol.
type TransportProtocol string

const (
	// TransportProtocolTCP specifies the transport protocol tcp state for
	// transport protocol.
	TransportProtocolTCP TransportProtocol = "Tcp"
	// TransportProtocolUDP specifies the transport protocol udp state for
	// transport protocol.
	TransportProtocolUDP TransportProtocol = "Udp"
)

// AuthenticationCertificate is authentication certificates of an application
// gateway.
type AuthenticationCertificate struct {
	ID                                         *string `json:"id,omitempty"`
	*AuthenticationCertificatePropertiesFormat `json:"properties,omitempty"`
	Name                                       *string `json:"name,omitempty"`
	Etag                                       *string `json:"etag,omitempty"`
}

// AuthenticationCertificatePropertiesFormat is authentication certificates
// properties of an application gateway.
type AuthenticationCertificatePropertiesFormat struct {
	Data              *string `json:"data,omitempty"`
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// BackendAddress is backend address of an application gateway.
type BackendAddress struct {
	Fqdn      *string `json:"fqdn,omitempty"`
	IPAddress *string `json:"ipAddress,omitempty"`
}

// BackendAddressPool is pool of backend IP addresses.
type BackendAddressPool struct {
	ID                                  *string `json:"id,omitempty"`
	*BackendAddressPoolPropertiesFormat `json:"properties,omitempty"`
	Name                                *string `json:"name,omitempty"`
	Etag                                *string `json:"etag,omitempty"`
}

// BackendAddressPoolPropertiesFormat is properties of the backend address
// pool.
type BackendAddressPoolPropertiesFormat struct {
	BackendIPConfigurations *[]NetworkInterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	LoadBalancingRules      *[]SubResource                     `json:"loadBalancingRules,omitempty"`
	OutboundNatRule         *SubResource                       `json:"outboundNatRule,omitempty"`
	ProvisioningState       *string                            `json:"provisioningState,omitempty"`
}

// BackendAddressPoolPropertiesFormatType is properties of Backend Address Pool
// of an application gateway.
type BackendAddressPoolPropertiesFormatType struct {
	BackendIPConfigurations *[]NetworkInterfaceIPConfiguration `json:"backendIPConfigurations,omitempty"`
	BackendAddresses        *[]BackendAddress                  `json:"backendAddresses,omitempty"`
	ProvisioningState       *string                            `json:"provisioningState,omitempty"`
}

// BackendAddressPoolType is backend Address Pool of an application gateway.
type BackendAddressPoolType struct {
	ID                                      *string `json:"id,omitempty"`
	*BackendAddressPoolPropertiesFormatType `json:"properties,omitempty"`
	Name                                    *string `json:"name,omitempty"`
	Etag                                    *string `json:"etag,omitempty"`
}

// BackendHealthHTTPSettings is application gateway BackendHealthHttp settings.
type BackendHealthHTTPSettings struct {
	BackendHTTPSettings *BackendHTTPSettings   `json:"backendHttpSettings,omitempty"`
	Servers             *[]BackendHealthServer `json:"servers,omitempty"`
}

// BackendHealthPool is application gateway BackendHealth pool.
type BackendHealthPool struct {
	BackendAddressPool            *BackendAddressPoolType      `json:"backendAddressPool,omitempty"`
	BackendHTTPSettingsCollection *[]BackendHealthHTTPSettings `json:"backendHttpSettingsCollection,omitempty"`
}

// BackendHealthServer is application gateway backendhealth http settings.
type BackendHealthServer struct {
	Address         *string                   `json:"address,omitempty"`
	IPConfiguration *SubResource              `json:"ipConfiguration,omitempty"`
	Health          BackendHealthServerHealth `json:"health,omitempty"`
}

// BackendHealthType is list of ApplicationGatewayBackendHealthPool resources.
type BackendHealthType struct {
	autorest.Response   `json:"-"`
	BackendAddressPools *[]BackendHealthPool `json:"backendAddressPools,omitempty"`
}

// BackendHTTPSettings is backend address pool settings of an application
// gateway.
type BackendHTTPSettings struct {
	ID                                   *string `json:"id,omitempty"`
	*BackendHTTPSettingsPropertiesFormat `json:"properties,omitempty"`
	Name                                 *string `json:"name,omitempty"`
	Etag                                 *string `json:"etag,omitempty"`
}

// BackendHTTPSettingsPropertiesFormat is properties of Backend address pool
// settings of an application gateway.
type BackendHTTPSettingsPropertiesFormat struct {
	Port                       *int32              `json:"port,omitempty"`
	Protocol                   Protocol            `json:"protocol,omitempty"`
	CookieBasedAffinity        CookieBasedAffinity `json:"cookieBasedAffinity,omitempty"`
	RequestTimeout             *int32              `json:"requestTimeout,omitempty"`
	Probe                      *SubResource        `json:"probe,omitempty"`
	AuthenticationCertificates *[]SubResource      `json:"authenticationCertificates,omitempty"`
	ProvisioningState          *string             `json:"provisioningState,omitempty"`
	ConnectionDraining         *ConnectionDraining `json:"connectionDraining,omitempty"`
}

// ConnectionDraining is connection draining allows open connections to a
// backend server to be active for a specified time after the backend server
// got removed from the configuration.
type ConnectionDraining struct {
	Enabled           *bool  `json:"enabled,omitempty"`
	DrainTimeoutInSec *int32 `json:"drainTimeoutInSec,omitempty"`
}

// FrontendIPConfiguration is frontend IP configuration of an application
// gateway.
type FrontendIPConfiguration struct {
	ID                                       *string `json:"id,omitempty"`
	*FrontendIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	Name                                     *string `json:"name,omitempty"`
	Etag                                     *string `json:"etag,omitempty"`
}

// FrontendIPConfigurationPropertiesFormat is properties of Frontend IP
// configuration of an application gateway.
type FrontendIPConfigurationPropertiesFormat struct {
	PrivateIPAddress          *string            `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
	Subnet                    *SubResource       `json:"subnet,omitempty"`
	PublicIPAddress           *SubResource       `json:"publicIPAddress,omitempty"`
	ProvisioningState         *string            `json:"provisioningState,omitempty"`
}

// FrontendPort is frontend port of an application gateway.
type FrontendPort struct {
	ID                            *string `json:"id,omitempty"`
	*FrontendPortPropertiesFormat `json:"properties,omitempty"`
	Name                          *string `json:"name,omitempty"`
	Etag                          *string `json:"etag,omitempty"`
}

// FrontendPortPropertiesFormat is properties of Frontend port of an
// application gateway.
type FrontendPortPropertiesFormat struct {
	Port              *int32  `json:"port,omitempty"`
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// HTTPListener is http listener of an application gateway.
type HTTPListener struct {
	ID                            *string `json:"id,omitempty"`
	*HTTPListenerPropertiesFormat `json:"properties,omitempty"`
	Name                          *string `json:"name,omitempty"`
	Etag                          *string `json:"etag,omitempty"`
}

// HTTPListenerPropertiesFormat is properties of HTTP listener of an
// application gateway.
type HTTPListenerPropertiesFormat struct {
	FrontendIPConfiguration     *SubResource `json:"frontendIPConfiguration,omitempty"`
	FrontendPort                *SubResource `json:"frontendPort,omitempty"`
	Protocol                    Protocol     `json:"protocol,omitempty"`
	HostName                    *string      `json:"hostName,omitempty"`
	SslCertificate              *SubResource `json:"sslCertificate,omitempty"`
	RequireServerNameIndication *bool        `json:"requireServerNameIndication,omitempty"`
	ProvisioningState           *string      `json:"provisioningState,omitempty"`
}

// InboundNatRule is inbound NAT rule of the load balancer.
type InboundNatRule struct {
	ID                              *string `json:"id,omitempty"`
	*InboundNatRulePropertiesFormat `json:"properties,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Etag                            *string `json:"etag,omitempty"`
}

// InboundNatRulePropertiesFormat is properties of the inbound NAT rule.
type InboundNatRulePropertiesFormat struct {
	FrontendIPConfiguration *SubResource                     `json:"frontendIPConfiguration,omitempty"`
	BackendIPConfiguration  *NetworkInterfaceIPConfiguration `json:"backendIPConfiguration,omitempty"`
	Protocol                TransportProtocol                `json:"protocol,omitempty"`
	FrontendPort            *int32                           `json:"frontendPort,omitempty"`
	BackendPort             *int32                           `json:"backendPort,omitempty"`
	IdleTimeoutInMinutes    *int32                           `json:"idleTimeoutInMinutes,omitempty"`
	EnableFloatingIP        *bool                            `json:"enableFloatingIP,omitempty"`
	ProvisioningState       *string                          `json:"provisioningState,omitempty"`
}

// IPConfiguration is iPConfiguration
type IPConfiguration struct {
	ID                               *string `json:"id,omitempty"`
	*IPConfigurationPropertiesFormat `json:"properties,omitempty"`
	Name                             *string `json:"name,omitempty"`
	Etag                             *string `json:"etag,omitempty"`
}

// IPConfigurationPropertiesFormat is properties of IP configuration.
type IPConfigurationPropertiesFormat struct {
	PrivateIPAddress          *string            `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod IPAllocationMethod `json:"privateIPAllocationMethod,omitempty"`
	Subnet                    *Subnet            `json:"subnet,omitempty"`
	PublicIPAddress           *PublicIPAddress   `json:"publicIPAddress,omitempty"`
	ProvisioningState         *string            `json:"provisioningState,omitempty"`
}

// IPConfigurationPropertiesFormatType is properties of IP configuration of an
// application gateway.
type IPConfigurationPropertiesFormatType struct {
	Subnet            *SubResource `json:"subnet,omitempty"`
	ProvisioningState *string      `json:"provisioningState,omitempty"`
}

// IPConfigurationType is iP configuration of an application gateway. Currently
// 1 public and 1 private IP configuration is allowed.
type IPConfigurationType struct {
	ID                                   *string `json:"id,omitempty"`
	*IPConfigurationPropertiesFormatType `json:"properties,omitempty"`
	Name                                 *string `json:"name,omitempty"`
	Etag                                 *string `json:"etag,omitempty"`
}

// ListResult is response for ListApplicationGateways API service call.
type ListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Model `json:"value,omitempty"`
	NextLink          *string  `json:"nextLink,omitempty"`
}

// ListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ListResult) ListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// Model is application gateway resource
type Model struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*PropertiesFormat `json:"properties,omitempty"`
	Etag              *string `json:"etag,omitempty"`
}

// NetworkInterface is a network interface in a resource group.
type NetworkInterface struct {
	ID                                *string             `json:"id,omitempty"`
	Name                              *string             `json:"name,omitempty"`
	Type                              *string             `json:"type,omitempty"`
	Location                          *string             `json:"location,omitempty"`
	Tags                              *map[string]*string `json:"tags,omitempty"`
	*NetworkInterfacePropertiesFormat `json:"properties,omitempty"`
	Etag                              *string `json:"etag,omitempty"`
}

// NetworkInterfaceDNSSettings is dNS settings of a network interface.
type NetworkInterfaceDNSSettings struct {
	DNSServers               *[]string `json:"dnsServers,omitempty"`
	AppliedDNSServers        *[]string `json:"appliedDnsServers,omitempty"`
	InternalDNSNameLabel     *string   `json:"internalDnsNameLabel,omitempty"`
	InternalFqdn             *string   `json:"internalFqdn,omitempty"`
	InternalDomainNameSuffix *string   `json:"internalDomainNameSuffix,omitempty"`
}

// NetworkInterfaceIPConfiguration is iPConfiguration in a network interface.
type NetworkInterfaceIPConfiguration struct {
	ID                                               *string `json:"id,omitempty"`
	*NetworkInterfaceIPConfigurationPropertiesFormat `json:"properties,omitempty"`
	Name                                             *string `json:"name,omitempty"`
	Etag                                             *string `json:"etag,omitempty"`
}

// NetworkInterfaceIPConfigurationPropertiesFormat is properties of IP
// configuration.
type NetworkInterfaceIPConfigurationPropertiesFormat struct {
	ApplicationGatewayBackendAddressPools *[]BackendAddressPoolType `json:"applicationGatewayBackendAddressPools,omitempty"`
	LoadBalancerBackendAddressPools       *[]BackendAddressPool     `json:"loadBalancerBackendAddressPools,omitempty"`
	LoadBalancerInboundNatRules           *[]InboundNatRule         `json:"loadBalancerInboundNatRules,omitempty"`
	PrivateIPAddress                      *string                   `json:"privateIPAddress,omitempty"`
	PrivateIPAllocationMethod             IPAllocationMethod        `json:"privateIPAllocationMethod,omitempty"`
	PrivateIPAddressVersion               IPVersion                 `json:"privateIPAddressVersion,omitempty"`
	Subnet                                *Subnet                   `json:"subnet,omitempty"`
	Primary                               *bool                     `json:"primary,omitempty"`
	PublicIPAddress                       *PublicIPAddress          `json:"publicIPAddress,omitempty"`
	ProvisioningState                     *string                   `json:"provisioningState,omitempty"`
}

// NetworkInterfacePropertiesFormat is networkInterface properties.
type NetworkInterfacePropertiesFormat struct {
	VirtualMachine              *SubResource                       `json:"virtualMachine,omitempty"`
	NetworkSecurityGroup        *NetworkSecurityGroup              `json:"networkSecurityGroup,omitempty"`
	IPConfigurations            *[]NetworkInterfaceIPConfiguration `json:"ipConfigurations,omitempty"`
	DNSSettings                 *NetworkInterfaceDNSSettings       `json:"dnsSettings,omitempty"`
	MacAddress                  *string                            `json:"macAddress,omitempty"`
	Primary                     *bool                              `json:"primary,omitempty"`
	EnableAcceleratedNetworking *bool                              `json:"enableAcceleratedNetworking,omitempty"`
	EnableIPForwarding          *bool                              `json:"enableIPForwarding,omitempty"`
	ResourceGUID                *string                            `json:"resourceGuid,omitempty"`
	ProvisioningState           *string                            `json:"provisioningState,omitempty"`
}

// NetworkSecurityGroup is networkSecurityGroup resource.
type NetworkSecurityGroup struct {
	ID                                    *string             `json:"id,omitempty"`
	Name                                  *string             `json:"name,omitempty"`
	Type                                  *string             `json:"type,omitempty"`
	Location                              *string             `json:"location,omitempty"`
	Tags                                  *map[string]*string `json:"tags,omitempty"`
	*NetworkSecurityGroupPropertiesFormat `json:"properties,omitempty"`
	Etag                                  *string `json:"etag,omitempty"`
}

// NetworkSecurityGroupPropertiesFormat is network Security Group resource.
type NetworkSecurityGroupPropertiesFormat struct {
	SecurityRules        *[]SecurityRule     `json:"securityRules,omitempty"`
	DefaultSecurityRules *[]SecurityRule     `json:"defaultSecurityRules,omitempty"`
	NetworkInterfaces    *[]NetworkInterface `json:"networkInterfaces,omitempty"`
	Subnets              *[]Subnet           `json:"subnets,omitempty"`
	ResourceGUID         *string             `json:"resourceGuid,omitempty"`
	ProvisioningState    *string             `json:"provisioningState,omitempty"`
}

// PathRule is path rule of URL path map of an application gateway.
type PathRule struct {
	ID                        *string `json:"id,omitempty"`
	*PathRulePropertiesFormat `json:"properties,omitempty"`
	Name                      *string `json:"name,omitempty"`
	Etag                      *string `json:"etag,omitempty"`
}

// PathRulePropertiesFormat is properties of probe of an application gateway.
type PathRulePropertiesFormat struct {
	Paths               *[]string    `json:"paths,omitempty"`
	BackendAddressPool  *SubResource `json:"backendAddressPool,omitempty"`
	BackendHTTPSettings *SubResource `json:"backendHttpSettings,omitempty"`
	ProvisioningState   *string      `json:"provisioningState,omitempty"`
}

// Probe is probe of the application gateway.
type Probe struct {
	ID                     *string `json:"id,omitempty"`
	*ProbePropertiesFormat `json:"properties,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Etag                   *string `json:"etag,omitempty"`
}

// ProbePropertiesFormat is properties of probe of an application gateway.
type ProbePropertiesFormat struct {
	Protocol           Protocol `json:"protocol,omitempty"`
	Host               *string  `json:"host,omitempty"`
	Path               *string  `json:"path,omitempty"`
	Interval           *int32   `json:"interval,omitempty"`
	Timeout            *int32   `json:"timeout,omitempty"`
	UnhealthyThreshold *int32   `json:"unhealthyThreshold,omitempty"`
	ProvisioningState  *string  `json:"provisioningState,omitempty"`
}

// PropertiesFormat is properties of the application gateway.
type PropertiesFormat struct {
	Sku                                 *Sku                                 `json:"sku,omitempty"`
	SslPolicy                           *SslPolicy                           `json:"sslPolicy,omitempty"`
	OperationalState                    OperationalState                     `json:"operationalState,omitempty"`
	GatewayIPConfigurations             *[]IPConfigurationType               `json:"gatewayIPConfigurations,omitempty"`
	AuthenticationCertificates          *[]AuthenticationCertificate         `json:"authenticationCertificates,omitempty"`
	SslCertificates                     *[]SslCertificate                    `json:"sslCertificates,omitempty"`
	FrontendIPConfigurations            *[]FrontendIPConfiguration           `json:"frontendIPConfigurations,omitempty"`
	FrontendPorts                       *[]FrontendPort                      `json:"frontendPorts,omitempty"`
	Probes                              *[]Probe                             `json:"probes,omitempty"`
	BackendAddressPools                 *[]BackendAddressPoolType            `json:"backendAddressPools,omitempty"`
	BackendHTTPSettingsCollection       *[]BackendHTTPSettings               `json:"backendHttpSettingsCollection,omitempty"`
	HTTPListeners                       *[]HTTPListener                      `json:"httpListeners,omitempty"`
	URLPathMaps                         *[]URLPathMap                        `json:"urlPathMaps,omitempty"`
	RequestRoutingRules                 *[]RequestRoutingRule                `json:"requestRoutingRules,omitempty"`
	WebApplicationFirewallConfiguration *WebApplicationFirewallConfiguration `json:"webApplicationFirewallConfiguration,omitempty"`
	ResourceGUID                        *string                              `json:"resourceGuid,omitempty"`
	ProvisioningState                   *string                              `json:"provisioningState,omitempty"`
}

// PublicIPAddress is public IP address resource.
type PublicIPAddress struct {
	ID                               *string             `json:"id,omitempty"`
	Name                             *string             `json:"name,omitempty"`
	Type                             *string             `json:"type,omitempty"`
	Location                         *string             `json:"location,omitempty"`
	Tags                             *map[string]*string `json:"tags,omitempty"`
	*PublicIPAddressPropertiesFormat `json:"properties,omitempty"`
	Etag                             *string `json:"etag,omitempty"`
}

// PublicIPAddressDNSSettings is contains FQDN of the DNS record associated
// with the public IP address
type PublicIPAddressDNSSettings struct {
	DomainNameLabel *string `json:"domainNameLabel,omitempty"`
	Fqdn            *string `json:"fqdn,omitempty"`
	ReverseFqdn     *string `json:"reverseFqdn,omitempty"`
}

// PublicIPAddressPropertiesFormat is public IP address properties.
type PublicIPAddressPropertiesFormat struct {
	PublicIPAllocationMethod IPAllocationMethod          `json:"publicIPAllocationMethod,omitempty"`
	PublicIPAddressVersion   IPVersion                   `json:"publicIPAddressVersion,omitempty"`
	IPConfiguration          *IPConfiguration            `json:"ipConfiguration,omitempty"`
	DNSSettings              *PublicIPAddressDNSSettings `json:"dnsSettings,omitempty"`
	IPAddress                *string                     `json:"ipAddress,omitempty"`
	IdleTimeoutInMinutes     *int32                      `json:"idleTimeoutInMinutes,omitempty"`
	ResourceGUID             *string                     `json:"resourceGuid,omitempty"`
	ProvisioningState        *string                     `json:"provisioningState,omitempty"`
}

// RequestRoutingRule is request routing rule of an application gateway.
type RequestRoutingRule struct {
	ID                                  *string `json:"id,omitempty"`
	*RequestRoutingRulePropertiesFormat `json:"properties,omitempty"`
	Name                                *string `json:"name,omitempty"`
	Etag                                *string `json:"etag,omitempty"`
}

// RequestRoutingRulePropertiesFormat is properties of request routing rule of
// the application gateway.
type RequestRoutingRulePropertiesFormat struct {
	RuleType            RequestRoutingRuleType `json:"ruleType,omitempty"`
	BackendAddressPool  *SubResource           `json:"backendAddressPool,omitempty"`
	BackendHTTPSettings *SubResource           `json:"backendHttpSettings,omitempty"`
	HTTPListener        *SubResource           `json:"httpListener,omitempty"`
	URLPathMap          *SubResource           `json:"urlPathMap,omitempty"`
	ProvisioningState   *string                `json:"provisioningState,omitempty"`
}

// Resource is
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceNavigationLink is resourceNavigationLink resource.
type ResourceNavigationLink struct {
	ID                            *string `json:"id,omitempty"`
	*ResourceNavigationLinkFormat `json:"properties,omitempty"`
	Name                          *string `json:"name,omitempty"`
	Etag                          *string `json:"etag,omitempty"`
}

// ResourceNavigationLinkFormat is properties of ResourceNavigationLink.
type ResourceNavigationLinkFormat struct {
	LinkedResourceType *string `json:"linkedResourceType,omitempty"`
	Link               *string `json:"link,omitempty"`
	ProvisioningState  *string `json:"provisioningState,omitempty"`
}

// Route is route resource
type Route struct {
	ID                     *string `json:"id,omitempty"`
	*RoutePropertiesFormat `json:"properties,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Etag                   *string `json:"etag,omitempty"`
}

// RoutePropertiesFormat is route resource
type RoutePropertiesFormat struct {
	AddressPrefix     *string          `json:"addressPrefix,omitempty"`
	NextHopType       RouteNextHopType `json:"nextHopType,omitempty"`
	NextHopIPAddress  *string          `json:"nextHopIpAddress,omitempty"`
	ProvisioningState *string          `json:"provisioningState,omitempty"`
}

// RouteTable is route table resource.
type RouteTable struct {
	ID                          *string             `json:"id,omitempty"`
	Name                        *string             `json:"name,omitempty"`
	Type                        *string             `json:"type,omitempty"`
	Location                    *string             `json:"location,omitempty"`
	Tags                        *map[string]*string `json:"tags,omitempty"`
	*RouteTablePropertiesFormat `json:"properties,omitempty"`
	Etag                        *string `json:"etag,omitempty"`
}

// RouteTablePropertiesFormat is route Table resource
type RouteTablePropertiesFormat struct {
	Routes            *[]Route  `json:"routes,omitempty"`
	Subnets           *[]Subnet `json:"subnets,omitempty"`
	ProvisioningState *string   `json:"provisioningState,omitempty"`
}

// SecurityRule is network security rule.
type SecurityRule struct {
	ID                            *string `json:"id,omitempty"`
	*SecurityRulePropertiesFormat `json:"properties,omitempty"`
	Name                          *string `json:"name,omitempty"`
	Etag                          *string `json:"etag,omitempty"`
}

// SecurityRulePropertiesFormat is
type SecurityRulePropertiesFormat struct {
	Description              *string               `json:"description,omitempty"`
	Protocol                 SecurityRuleProtocol  `json:"protocol,omitempty"`
	SourcePortRange          *string               `json:"sourcePortRange,omitempty"`
	DestinationPortRange     *string               `json:"destinationPortRange,omitempty"`
	SourceAddressPrefix      *string               `json:"sourceAddressPrefix,omitempty"`
	DestinationAddressPrefix *string               `json:"destinationAddressPrefix,omitempty"`
	Access                   SecurityRuleAccess    `json:"access,omitempty"`
	Priority                 *int32                `json:"priority,omitempty"`
	Direction                SecurityRuleDirection `json:"direction,omitempty"`
	ProvisioningState        *string               `json:"provisioningState,omitempty"`
}

// Sku is sKU of an application gateway
type Sku struct {
	Name     SkuName `json:"name,omitempty"`
	Tier     Tier    `json:"tier,omitempty"`
	Capacity *int32  `json:"capacity,omitempty"`
}

// SslCertificate is sSL certificates of an application gateway.
type SslCertificate struct {
	ID                              *string `json:"id,omitempty"`
	*SslCertificatePropertiesFormat `json:"properties,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Etag                            *string `json:"etag,omitempty"`
}

// SslCertificatePropertiesFormat is properties of SSL certificates of an
// application gateway.
type SslCertificatePropertiesFormat struct {
	Data              *string `json:"data,omitempty"`
	Password          *string `json:"password,omitempty"`
	PublicCertData    *string `json:"publicCertData,omitempty"`
	ProvisioningState *string `json:"provisioningState,omitempty"`
}

// SslPolicy is application gateway SSL policy.
type SslPolicy struct {
	DisabledSslProtocols *[]SslProtocol `json:"disabledSslProtocols,omitempty"`
}

// Subnet is subnet in a virtual network resource.
type Subnet struct {
	ID                      *string `json:"id,omitempty"`
	*SubnetPropertiesFormat `json:"properties,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Etag                    *string `json:"etag,omitempty"`
}

// SubnetPropertiesFormat is
type SubnetPropertiesFormat struct {
	AddressPrefix           *string                   `json:"addressPrefix,omitempty"`
	NetworkSecurityGroup    *NetworkSecurityGroup     `json:"networkSecurityGroup,omitempty"`
	RouteTable              *RouteTable               `json:"routeTable,omitempty"`
	IPConfigurations        *[]IPConfiguration        `json:"ipConfigurations,omitempty"`
	ResourceNavigationLinks *[]ResourceNavigationLink `json:"resourceNavigationLinks,omitempty"`
	ProvisioningState       *string                   `json:"provisioningState,omitempty"`
}

// SubResource is
type SubResource struct {
	ID *string `json:"id,omitempty"`
}

// URLPathMap is urlPathMaps give a url path to the backend mapping information
// for PathBasedRouting.
type URLPathMap struct {
	ID                          *string `json:"id,omitempty"`
	*URLPathMapPropertiesFormat `json:"properties,omitempty"`
	Name                        *string `json:"name,omitempty"`
	Etag                        *string `json:"etag,omitempty"`
}

// URLPathMapPropertiesFormat is properties of UrlPathMap of the application
// gateway.
type URLPathMapPropertiesFormat struct {
	DefaultBackendAddressPool  *SubResource `json:"defaultBackendAddressPool,omitempty"`
	DefaultBackendHTTPSettings *SubResource `json:"defaultBackendHttpSettings,omitempty"`
	PathRules                  *[]PathRule  `json:"pathRules,omitempty"`
	ProvisioningState          *string      `json:"provisioningState,omitempty"`
}

// WebApplicationFirewallConfiguration is application gateway web application
// firewall configuration.
type WebApplicationFirewallConfiguration struct {
	Enabled      *bool        `json:"enabled,omitempty"`
	FirewallMode FirewallMode `json:"firewallMode,omitempty"`
}
