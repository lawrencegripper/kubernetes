package appserviceplans

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// AutoHealActionType enumerates the values for auto heal action type.
type AutoHealActionType string

const (
	// CustomAction specifies the custom action state for auto heal action
	// type.
	CustomAction AutoHealActionType = "CustomAction"
	// LogEvent specifies the log event state for auto heal action type.
	LogEvent AutoHealActionType = "LogEvent"
	// Recycle specifies the recycle state for auto heal action type.
	Recycle AutoHealActionType = "Recycle"
)

// ConnectionStringType enumerates the values for connection string type.
type ConnectionStringType string

const (
	// APIHub specifies the api hub state for connection string type.
	APIHub ConnectionStringType = "ApiHub"
	// Custom specifies the custom state for connection string type.
	Custom ConnectionStringType = "Custom"
	// DocDb specifies the doc db state for connection string type.
	DocDb ConnectionStringType = "DocDb"
	// EventHub specifies the event hub state for connection string type.
	EventHub ConnectionStringType = "EventHub"
	// MySQL specifies the my sql state for connection string type.
	MySQL ConnectionStringType = "MySql"
	// NotificationHub specifies the notification hub state for connection
	// string type.
	NotificationHub ConnectionStringType = "NotificationHub"
	// PostgreSQL specifies the postgre sql state for connection string type.
	PostgreSQL ConnectionStringType = "PostgreSQL"
	// RedisCache specifies the redis cache state for connection string type.
	RedisCache ConnectionStringType = "RedisCache"
	// ServiceBus specifies the service bus state for connection string type.
	ServiceBus ConnectionStringType = "ServiceBus"
	// SQLAzure specifies the sql azure state for connection string type.
	SQLAzure ConnectionStringType = "SQLAzure"
	// SQLServer specifies the sql server state for connection string type.
	SQLServer ConnectionStringType = "SQLServer"
)

// HostType enumerates the values for host type.
type HostType string

const (
	// Repository specifies the repository state for host type.
	Repository HostType = "Repository"
	// Standard specifies the standard state for host type.
	Standard HostType = "Standard"
)

// ManagedPipelineMode enumerates the values for managed pipeline mode.
type ManagedPipelineMode string

const (
	// Classic specifies the classic state for managed pipeline mode.
	Classic ManagedPipelineMode = "Classic"
	// Integrated specifies the integrated state for managed pipeline mode.
	Integrated ManagedPipelineMode = "Integrated"
)

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// Canceled specifies the canceled state for provisioning state.
	Canceled ProvisioningState = "Canceled"
	// Deleting specifies the deleting state for provisioning state.
	Deleting ProvisioningState = "Deleting"
	// Failed specifies the failed state for provisioning state.
	Failed ProvisioningState = "Failed"
	// InProgress specifies the in progress state for provisioning state.
	InProgress ProvisioningState = "InProgress"
	// Succeeded specifies the succeeded state for provisioning state.
	Succeeded ProvisioningState = "Succeeded"
)

// RouteType enumerates the values for route type.
type RouteType string

const (
	// DEFAULT specifies the default state for route type.
	DEFAULT RouteType = "DEFAULT"
	// INHERITED specifies the inherited state for route type.
	INHERITED RouteType = "INHERITED"
	// STATIC specifies the static state for route type.
	STATIC RouteType = "STATIC"
)

// ScmType enumerates the values for scm type.
type ScmType string

const (
	// BitbucketGit specifies the bitbucket git state for scm type.
	BitbucketGit ScmType = "BitbucketGit"
	// BitbucketHg specifies the bitbucket hg state for scm type.
	BitbucketHg ScmType = "BitbucketHg"
	// CodePlexGit specifies the code plex git state for scm type.
	CodePlexGit ScmType = "CodePlexGit"
	// CodePlexHg specifies the code plex hg state for scm type.
	CodePlexHg ScmType = "CodePlexHg"
	// Dropbox specifies the dropbox state for scm type.
	Dropbox ScmType = "Dropbox"
	// ExternalGit specifies the external git state for scm type.
	ExternalGit ScmType = "ExternalGit"
	// ExternalHg specifies the external hg state for scm type.
	ExternalHg ScmType = "ExternalHg"
	// GitHub specifies the git hub state for scm type.
	GitHub ScmType = "GitHub"
	// LocalGit specifies the local git state for scm type.
	LocalGit ScmType = "LocalGit"
	// None specifies the none state for scm type.
	None ScmType = "None"
	// OneDrive specifies the one drive state for scm type.
	OneDrive ScmType = "OneDrive"
	// Tfs specifies the tfs state for scm type.
	Tfs ScmType = "Tfs"
	// VSO specifies the vso state for scm type.
	VSO ScmType = "VSO"
)

// SiteAvailabilityState enumerates the values for site availability state.
type SiteAvailabilityState string

const (
	// DisasterRecoveryMode specifies the disaster recovery mode state for site
	// availability state.
	DisasterRecoveryMode SiteAvailabilityState = "DisasterRecoveryMode"
	// Limited specifies the limited state for site availability state.
	Limited SiteAvailabilityState = "Limited"
	// Normal specifies the normal state for site availability state.
	Normal SiteAvailabilityState = "Normal"
)

// SiteLoadBalancing enumerates the values for site load balancing.
type SiteLoadBalancing string

const (
	// LeastRequests specifies the least requests state for site load
	// balancing.
	LeastRequests SiteLoadBalancing = "LeastRequests"
	// LeastResponseTime specifies the least response time state for site load
	// balancing.
	LeastResponseTime SiteLoadBalancing = "LeastResponseTime"
	// RequestHash specifies the request hash state for site load balancing.
	RequestHash SiteLoadBalancing = "RequestHash"
	// WeightedRoundRobin specifies the weighted round robin state for site
	// load balancing.
	WeightedRoundRobin SiteLoadBalancing = "WeightedRoundRobin"
	// WeightedTotalTraffic specifies the weighted total traffic state for site
	// load balancing.
	WeightedTotalTraffic SiteLoadBalancing = "WeightedTotalTraffic"
)

// SslState enumerates the values for ssl state.
type SslState string

const (
	// Disabled specifies the disabled state for ssl state.
	Disabled SslState = "Disabled"
	// IPBasedEnabled specifies the ip based enabled state for ssl state.
	IPBasedEnabled SslState = "IpBasedEnabled"
	// SniEnabled specifies the sni enabled state for ssl state.
	SniEnabled SslState = "SniEnabled"
)

// StatusOptions enumerates the values for status options.
type StatusOptions string

const (
	// Pending specifies the pending state for status options.
	Pending StatusOptions = "Pending"
	// Ready specifies the ready state for status options.
	Ready StatusOptions = "Ready"
)

// UsageState enumerates the values for usage state.
type UsageState string

const (
	// UsageStateExceeded specifies the usage state exceeded state for usage
	// state.
	UsageStateExceeded UsageState = "Exceeded"
	// UsageStateNormal specifies the usage state normal state for usage state.
	UsageStateNormal UsageState = "Normal"
)

// APIDefinitionInfo is information about the formal API definition for the
// app.
type APIDefinitionInfo struct {
	URL *string `json:"url,omitempty"`
}

// AppServicePlan is app Service plan.
type AppServicePlan struct {
	autorest.Response         `json:"-"`
	ID                        *string             `json:"id,omitempty"`
	Name                      *string             `json:"name,omitempty"`
	Kind                      *string             `json:"kind,omitempty"`
	Location                  *string             `json:"location,omitempty"`
	Type                      *string             `json:"type,omitempty"`
	Tags                      *map[string]*string `json:"tags,omitempty"`
	*AppServicePlanProperties `json:"properties,omitempty"`
	Sku                       *SkuDescription `json:"sku,omitempty"`
}

// AppServicePlanProperties is appServicePlan resource specific properties
type AppServicePlanProperties struct {
	Name                      *string                    `json:"name,omitempty"`
	WorkerTierName            *string                    `json:"workerTierName,omitempty"`
	Status                    StatusOptions              `json:"status,omitempty"`
	Subscription              *string                    `json:"subscription,omitempty"`
	AdminSiteName             *string                    `json:"adminSiteName,omitempty"`
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`
	MaximumNumberOfWorkers    *int32                     `json:"maximumNumberOfWorkers,omitempty"`
	GeoRegion                 *string                    `json:"geoRegion,omitempty"`
	PerSiteScaling            *bool                      `json:"perSiteScaling,omitempty"`
	NumberOfSites             *int32                     `json:"numberOfSites,omitempty"`
	ResourceGroup             *string                    `json:"resourceGroup,omitempty"`
	Reserved                  *bool                      `json:"reserved,omitempty"`
	TargetWorkerCount         *int32                     `json:"targetWorkerCount,omitempty"`
	TargetWorkerSizeID        *int32                     `json:"targetWorkerSizeId,omitempty"`
	ProvisioningState         ProvisioningState          `json:"provisioningState,omitempty"`
}

// AutoHealActions is actions which to take by the auto-heal module when a rule
// is triggered.
type AutoHealActions struct {
	ActionType              AutoHealActionType    `json:"actionType,omitempty"`
	CustomAction            *AutoHealCustomAction `json:"customAction,omitempty"`
	MinProcessExecutionTime *string               `json:"minProcessExecutionTime,omitempty"`
}

// AutoHealCustomAction is custom action to be executed
// when an auto heal rule is triggered.
type AutoHealCustomAction struct {
	Exe        *string `json:"exe,omitempty"`
	Parameters *string `json:"parameters,omitempty"`
}

// AutoHealRules is rules that can be defined for auto-heal.
type AutoHealRules struct {
	Triggers *AutoHealTriggers `json:"triggers,omitempty"`
	Actions  *AutoHealActions  `json:"actions,omitempty"`
}

// AutoHealTriggers is triggers for auto-heal.
type AutoHealTriggers struct {
	Requests         *RequestsBasedTrigger      `json:"requests,omitempty"`
	PrivateBytesInKB *int32                     `json:"privateBytesInKB,omitempty"`
	StatusCodes      *[]StatusCodesBasedTrigger `json:"statusCodes,omitempty"`
	SlowRequests     *SlowRequestsBasedTrigger  `json:"slowRequests,omitempty"`
}

// Capability is describes the capabilities/features allowed for a specific
// SKU.
type Capability struct {
	Name   *string `json:"name,omitempty"`
	Value  *string `json:"value,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// CloningInfo is information needed for cloning operation.
type CloningInfo struct {
	CorrelationID             *string             `json:"correlationId,omitempty"`
	Overwrite                 *bool               `json:"overwrite,omitempty"`
	CloneCustomHostNames      *bool               `json:"cloneCustomHostNames,omitempty"`
	CloneSourceControl        *bool               `json:"cloneSourceControl,omitempty"`
	SourceWebAppID            *string             `json:"sourceWebAppId,omitempty"`
	HostingEnvironment        *string             `json:"hostingEnvironment,omitempty"`
	AppSettingsOverrides      *map[string]*string `json:"appSettingsOverrides,omitempty"`
	ConfigureLoadBalancing    *bool               `json:"configureLoadBalancing,omitempty"`
	TrafficManagerProfileID   *string             `json:"trafficManagerProfileId,omitempty"`
	TrafficManagerProfileName *string             `json:"trafficManagerProfileName,omitempty"`
	IgnoreQuotas              *bool               `json:"ignoreQuotas,omitempty"`
}

// Collection is collection of App Service plans.
type Collection struct {
	autorest.Response `json:"-"`
	Value             *[]AppServicePlan `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// CollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client Collection) CollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ConnStringInfo is database connection string information.
type ConnStringInfo struct {
	Name             *string              `json:"name,omitempty"`
	ConnectionString *string              `json:"connectionString,omitempty"`
	Type             ConnectionStringType `json:"type,omitempty"`
}

// CorsSettings is cross-Origin Resource Sharing (CORS) settings for the app.
type CorsSettings struct {
	AllowedOrigins *[]string `json:"allowedOrigins,omitempty"`
}

// Experiments is routing rules in production experiments.
type Experiments struct {
	RampUpRules *[]RampUpRule `json:"rampUpRules,omitempty"`
}

// HandlerMapping is the IIS handler mappings used to define which handler
// processes HTTP requests with certain extension.
// For example, it is used to configure php-cgi.exe process to handle all HTTP
// requests with *.php extension.
type HandlerMapping struct {
	Extension       *string `json:"extension,omitempty"`
	ScriptProcessor *string `json:"scriptProcessor,omitempty"`
	Arguments       *string `json:"arguments,omitempty"`
}

// HostingEnvironmentProfile is specification for an App Service Environment to
// use for this resource.
type HostingEnvironmentProfile struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// HostNameSslState is sSL-enabled hostname.
type HostNameSslState struct {
	Name       *string  `json:"name,omitempty"`
	SslState   SslState `json:"sslState,omitempty"`
	VirtualIP  *string  `json:"virtualIP,omitempty"`
	Thumbprint *string  `json:"thumbprint,omitempty"`
	ToUpdate   *bool    `json:"toUpdate,omitempty"`
	HostType   HostType `json:"hostType,omitempty"`
}

// HybridConnection is hybrid Connection contract. This is used to configure a
// Hybrid Connection.
type HybridConnection struct {
	autorest.Response           `json:"-"`
	ID                          *string             `json:"id,omitempty"`
	Name                        *string             `json:"name,omitempty"`
	Kind                        *string             `json:"kind,omitempty"`
	Location                    *string             `json:"location,omitempty"`
	Type                        *string             `json:"type,omitempty"`
	Tags                        *map[string]*string `json:"tags,omitempty"`
	*HybridConnectionProperties `json:"properties,omitempty"`
}

// HybridConnectionProperties is hybridConnection resource specific properties
type HybridConnectionProperties struct {
	ServiceBusNamespace *string `json:"serviceBusNamespace,omitempty"`
	RelayName           *string `json:"relayName,omitempty"`
	RelayArmURI         *string `json:"relayArmUri,omitempty"`
	Hostname            *string `json:"hostname,omitempty"`
	Port                *int32  `json:"port,omitempty"`
	SendKeyName         *string `json:"sendKeyName,omitempty"`
	SendKeyValue        *string `json:"sendKeyValue,omitempty"`
}

// HybridConnectionCollection is collection of hostname bindings.
type HybridConnectionCollection struct {
	autorest.Response `json:"-"`
	Value             *[]HybridConnection `json:"value,omitempty"`
	NextLink          *string             `json:"nextLink,omitempty"`
}

// HybridConnectionCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client HybridConnectionCollection) HybridConnectionCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// HybridConnectionKey is hybrid Connection key contract. This has the send key
// name and value for a Hybrid Connection.
type HybridConnectionKey struct {
	autorest.Response              `json:"-"`
	ID                             *string             `json:"id,omitempty"`
	Name                           *string             `json:"name,omitempty"`
	Kind                           *string             `json:"kind,omitempty"`
	Location                       *string             `json:"location,omitempty"`
	Type                           *string             `json:"type,omitempty"`
	Tags                           *map[string]*string `json:"tags,omitempty"`
	*HybridConnectionKeyProperties `json:"properties,omitempty"`
}

// HybridConnectionKeyProperties is hybridConnectionKey resource specific
// properties
type HybridConnectionKeyProperties struct {
	SendKeyName  *string `json:"sendKeyName,omitempty"`
	SendKeyValue *string `json:"sendKeyValue,omitempty"`
}

// HybridConnectionLimits is hybrid Connection limits contract. This is used to
// return the plan limits of Hybrid Connections.
type HybridConnectionLimits struct {
	autorest.Response                 `json:"-"`
	ID                                *string             `json:"id,omitempty"`
	Name                              *string             `json:"name,omitempty"`
	Kind                              *string             `json:"kind,omitempty"`
	Location                          *string             `json:"location,omitempty"`
	Type                              *string             `json:"type,omitempty"`
	Tags                              *map[string]*string `json:"tags,omitempty"`
	*HybridConnectionLimitsProperties `json:"properties,omitempty"`
}

// HybridConnectionLimitsProperties is hybridConnectionLimits resource specific
// properties
type HybridConnectionLimitsProperties struct {
	Current *int32 `json:"current,omitempty"`
	Maximum *int32 `json:"maximum,omitempty"`
}

// IPSecurityRestriction is iP security restriction on an app.
type IPSecurityRestriction struct {
	IPAddress  *string `json:"ipAddress,omitempty"`
	SubnetMask *string `json:"subnetMask,omitempty"`
}

// ListCapability is
type ListCapability struct {
	autorest.Response `json:"-"`
	Value             *[]Capability `json:"value,omitempty"`
}

// ListVnetInfo is
type ListVnetInfo struct {
	autorest.Response `json:"-"`
	Value             *[]VnetInfo `json:"value,omitempty"`
}

// ListVnetRoute is
type ListVnetRoute struct {
	autorest.Response `json:"-"`
	Value             *[]VnetRoute `json:"value,omitempty"`
}

// NameValuePair is name value pair.
type NameValuePair struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PushSettings is push settings for the App.
type PushSettings struct {
	IsPushEnabled     *bool   `json:"isPushEnabled,omitempty"`
	TagWhitelistJSON  *string `json:"tagWhitelistJson,omitempty"`
	TagsRequiringAuth *string `json:"tagsRequiringAuth,omitempty"`
	DynamicTagsJSON   *string `json:"dynamicTagsJson,omitempty"`
}

// RampUpRule is routing rules for ramp up testing. This rule allows to
// redirect static traffic % to a slot or to gradually change routing % based
// on performance.
type RampUpRule struct {
	ActionHostName            *string  `json:"actionHostName,omitempty"`
	ReroutePercentage         *float64 `json:"reroutePercentage,omitempty"`
	ChangeStep                *float64 `json:"changeStep,omitempty"`
	ChangeIntervalInMinutes   *int32   `json:"changeIntervalInMinutes,omitempty"`
	MinReroutePercentage      *float64 `json:"minReroutePercentage,omitempty"`
	MaxReroutePercentage      *float64 `json:"maxReroutePercentage,omitempty"`
	ChangeDecisionCallbackURL *string  `json:"changeDecisionCallbackUrl,omitempty"`
	Name                      *string  `json:"name,omitempty"`
}

// RequestsBasedTrigger is trigger based on total requests.
type RequestsBasedTrigger struct {
	Count        *int32  `json:"count,omitempty"`
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// Resource is azure resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Kind     *string             `json:"kind,omitempty"`
	Location *string             `json:"location,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceCollection is collection of resources.
type ResourceCollection struct {
	autorest.Response `json:"-"`
	Value             *[]string `json:"value,omitempty"`
	NextLink          *string   `json:"nextLink,omitempty"`
}

// ResourceCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ResourceCollection) ResourceCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ResourceMetric is object representing a metric for any resource .
type ResourceMetric struct {
	Name         *ResourceMetricName       `json:"name,omitempty"`
	Unit         *string                   `json:"unit,omitempty"`
	TimeGrain    *string                   `json:"timeGrain,omitempty"`
	StartTime    *date.Time                `json:"startTime,omitempty"`
	EndTime      *date.Time                `json:"endTime,omitempty"`
	ResourceID   *string                   `json:"resourceId,omitempty"`
	ID           *string                   `json:"id,omitempty"`
	MetricValues *[]ResourceMetricValue    `json:"metricValues,omitempty"`
	Properties   *[]ResourceMetricProperty `json:"properties,omitempty"`
}

// ResourceMetricAvailability is metrics availability and retention.
type ResourceMetricAvailability struct {
	TimeGrain *string `json:"timeGrain,omitempty"`
	Retention *string `json:"retention,omitempty"`
}

// ResourceMetricCollection is collection of metric responses.
type ResourceMetricCollection struct {
	autorest.Response `json:"-"`
	Value             *[]ResourceMetric `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// ResourceMetricCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ResourceMetricCollection) ResourceMetricCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ResourceMetricDefinition is metadata for the metrics.
type ResourceMetricDefinition struct {
	ID                                  *string             `json:"id,omitempty"`
	Name                                *string             `json:"name,omitempty"`
	Kind                                *string             `json:"kind,omitempty"`
	Location                            *string             `json:"location,omitempty"`
	Type                                *string             `json:"type,omitempty"`
	Tags                                *map[string]*string `json:"tags,omitempty"`
	*ResourceMetricDefinitionProperties `json:"properties,omitempty"`
}

// ResourceMetricDefinitionProperties is resourceMetricDefinition resource
// specific properties
type ResourceMetricDefinitionProperties struct {
	Name                   *ResourceMetricName           `json:"name,omitempty"`
	Unit                   *string                       `json:"unit,omitempty"`
	PrimaryAggregationType *string                       `json:"primaryAggregationType,omitempty"`
	MetricAvailabilities   *[]ResourceMetricAvailability `json:"metricAvailabilities,omitempty"`
	ResourceURI            *string                       `json:"resourceUri,omitempty"`
	ID                     *string                       `json:"id,omitempty"`
	Properties             *map[string]*string           `json:"properties,omitempty"`
}

// ResourceMetricDefinitionCollection is collection of metric definitions.
type ResourceMetricDefinitionCollection struct {
	autorest.Response `json:"-"`
	Value             *[]ResourceMetricDefinition `json:"value,omitempty"`
	NextLink          *string                     `json:"nextLink,omitempty"`
}

// ResourceMetricDefinitionCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ResourceMetricDefinitionCollection) ResourceMetricDefinitionCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ResourceMetricName is name of a metric for any resource .
type ResourceMetricName struct {
	Value          *string `json:"value,omitempty"`
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// ResourceMetricProperty is resource metric property.
type ResourceMetricProperty struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ResourceMetricValue is value of resource metric.
type ResourceMetricValue struct {
	Timestamp  *string                   `json:"timestamp,omitempty"`
	Average    *float64                  `json:"average,omitempty"`
	Minimum    *float64                  `json:"minimum,omitempty"`
	Maximum    *float64                  `json:"maximum,omitempty"`
	Total      *float64                  `json:"total,omitempty"`
	Count      *float64                  `json:"count,omitempty"`
	Properties *[]ResourceMetricProperty `json:"properties,omitempty"`
}

// Site is a web app, a mobile app backend, or an API app.
type Site struct {
	ID              *string             `json:"id,omitempty"`
	Name            *string             `json:"name,omitempty"`
	Kind            *string             `json:"kind,omitempty"`
	Location        *string             `json:"location,omitempty"`
	Type            *string             `json:"type,omitempty"`
	Tags            *map[string]*string `json:"tags,omitempty"`
	*SiteProperties `json:"properties,omitempty"`
}

// SiteProperties is site resource specific properties
type SiteProperties struct {
	State                     *string                    `json:"state,omitempty"`
	HostNames                 *[]string                  `json:"hostNames,omitempty"`
	RepositorySiteName        *string                    `json:"repositorySiteName,omitempty"`
	UsageState                UsageState                 `json:"usageState,omitempty"`
	Enabled                   *bool                      `json:"enabled,omitempty"`
	EnabledHostNames          *[]string                  `json:"enabledHostNames,omitempty"`
	AvailabilityState         SiteAvailabilityState      `json:"availabilityState,omitempty"`
	HostNameSslStates         *[]HostNameSslState        `json:"hostNameSslStates,omitempty"`
	ServerFarmID              *string                    `json:"serverFarmId,omitempty"`
	Reserved                  *bool                      `json:"reserved,omitempty"`
	LastModifiedTimeUtc       *date.Time                 `json:"lastModifiedTimeUtc,omitempty"`
	SiteConfig                *SiteConfig                `json:"siteConfig,omitempty"`
	TrafficManagerHostNames   *[]string                  `json:"trafficManagerHostNames,omitempty"`
	PremiumAppDeployed        *bool                      `json:"premiumAppDeployed,omitempty"`
	ScmSiteAlsoStopped        *bool                      `json:"scmSiteAlsoStopped,omitempty"`
	TargetSwapSlot            *string                    `json:"targetSwapSlot,omitempty"`
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`
	MicroService              *string                    `json:"microService,omitempty"`
	GatewaySiteName           *string                    `json:"gatewaySiteName,omitempty"`
	ClientAffinityEnabled     *bool                      `json:"clientAffinityEnabled,omitempty"`
	ClientCertEnabled         *bool                      `json:"clientCertEnabled,omitempty"`
	HostNamesDisabled         *bool                      `json:"hostNamesDisabled,omitempty"`
	OutboundIPAddresses       *string                    `json:"outboundIpAddresses,omitempty"`
	ContainerSize             *int32                     `json:"containerSize,omitempty"`
	DailyMemoryTimeQuota      *int32                     `json:"dailyMemoryTimeQuota,omitempty"`
	SuspendedTill             *date.Time                 `json:"suspendedTill,omitempty"`
	MaxNumberOfWorkers        *int32                     `json:"maxNumberOfWorkers,omitempty"`
	CloningInfo               *CloningInfo               `json:"cloningInfo,omitempty"`
	ResourceGroup             *string                    `json:"resourceGroup,omitempty"`
	IsDefaultContainer        *bool                      `json:"isDefaultContainer,omitempty"`
	DefaultHostName           *string                    `json:"defaultHostName,omitempty"`
	SlotSwapStatus            *SlotSwapStatus            `json:"slotSwapStatus,omitempty"`
}

// SiteConfig is configuration of an App Service app.
type SiteConfig struct {
	NumberOfWorkers              *int32                   `json:"numberOfWorkers,omitempty"`
	DefaultDocuments             *[]string                `json:"defaultDocuments,omitempty"`
	NetFrameworkVersion          *string                  `json:"netFrameworkVersion,omitempty"`
	PhpVersion                   *string                  `json:"phpVersion,omitempty"`
	PythonVersion                *string                  `json:"pythonVersion,omitempty"`
	NodeVersion                  *string                  `json:"nodeVersion,omitempty"`
	LinuxFxVersion               *string                  `json:"linuxFxVersion,omitempty"`
	RequestTracingEnabled        *bool                    `json:"requestTracingEnabled,omitempty"`
	RequestTracingExpirationTime *date.Time               `json:"requestTracingExpirationTime,omitempty"`
	RemoteDebuggingEnabled       *bool                    `json:"remoteDebuggingEnabled,omitempty"`
	RemoteDebuggingVersion       *string                  `json:"remoteDebuggingVersion,omitempty"`
	HTTPLoggingEnabled           *bool                    `json:"httpLoggingEnabled,omitempty"`
	LogsDirectorySizeLimit       *int32                   `json:"logsDirectorySizeLimit,omitempty"`
	DetailedErrorLoggingEnabled  *bool                    `json:"detailedErrorLoggingEnabled,omitempty"`
	PublishingUsername           *string                  `json:"publishingUsername,omitempty"`
	AppSettings                  *[]NameValuePair         `json:"appSettings,omitempty"`
	ConnectionStrings            *[]ConnStringInfo        `json:"connectionStrings,omitempty"`
	MachineKey                   *SiteMachineKey          `json:"machineKey,omitempty"`
	HandlerMappings              *[]HandlerMapping        `json:"handlerMappings,omitempty"`
	DocumentRoot                 *string                  `json:"documentRoot,omitempty"`
	ScmType                      ScmType                  `json:"scmType,omitempty"`
	Use32BitWorkerProcess        *bool                    `json:"use32BitWorkerProcess,omitempty"`
	WebSocketsEnabled            *bool                    `json:"webSocketsEnabled,omitempty"`
	AlwaysOn                     *bool                    `json:"alwaysOn,omitempty"`
	JavaVersion                  *string                  `json:"javaVersion,omitempty"`
	JavaContainer                *string                  `json:"javaContainer,omitempty"`
	JavaContainerVersion         *string                  `json:"javaContainerVersion,omitempty"`
	AppCommandLine               *string                  `json:"appCommandLine,omitempty"`
	ManagedPipelineMode          ManagedPipelineMode      `json:"managedPipelineMode,omitempty"`
	VirtualApplications          *[]VirtualApplication    `json:"virtualApplications,omitempty"`
	LoadBalancing                SiteLoadBalancing        `json:"loadBalancing,omitempty"`
	Experiments                  *Experiments             `json:"experiments,omitempty"`
	Limits                       *SiteLimits              `json:"limits,omitempty"`
	AutoHealEnabled              *bool                    `json:"autoHealEnabled,omitempty"`
	AutoHealRules                *AutoHealRules           `json:"autoHealRules,omitempty"`
	TracingOptions               *string                  `json:"tracingOptions,omitempty"`
	VnetName                     *string                  `json:"vnetName,omitempty"`
	Cors                         *CorsSettings            `json:"cors,omitempty"`
	Push                         *PushSettings            `json:"push,omitempty"`
	APIDefinition                *APIDefinitionInfo       `json:"apiDefinition,omitempty"`
	AutoSwapSlotName             *string                  `json:"autoSwapSlotName,omitempty"`
	LocalMySQLEnabled            *bool                    `json:"localMySqlEnabled,omitempty"`
	IPSecurityRestrictions       *[]IPSecurityRestriction `json:"ipSecurityRestrictions,omitempty"`
}

// SiteLimits is metric limits set on an app.
type SiteLimits struct {
	MaxPercentageCPU *float64 `json:"maxPercentageCpu,omitempty"`
	MaxMemoryInMb    *int64   `json:"maxMemoryInMb,omitempty"`
	MaxDiskSizeInMb  *int64   `json:"maxDiskSizeInMb,omitempty"`
}

// SiteMachineKey is machineKey of an app.
type SiteMachineKey struct {
	Validation    *string `json:"validation,omitempty"`
	ValidationKey *string `json:"validationKey,omitempty"`
	Decryption    *string `json:"decryption,omitempty"`
	DecryptionKey *string `json:"decryptionKey,omitempty"`
}

// SkuCapacity is description of the App Service plan scale options.
type SkuCapacity struct {
	Minimum   *int32  `json:"minimum,omitempty"`
	Maximum   *int32  `json:"maximum,omitempty"`
	Default   *int32  `json:"default,omitempty"`
	ScaleType *string `json:"scaleType,omitempty"`
}

// SkuDescription is description of a SKU for a scalable resource.
type SkuDescription struct {
	Name         *string       `json:"name,omitempty"`
	Tier         *string       `json:"tier,omitempty"`
	Size         *string       `json:"size,omitempty"`
	Family       *string       `json:"family,omitempty"`
	Capacity     *int32        `json:"capacity,omitempty"`
	SkuCapacity  *SkuCapacity  `json:"skuCapacity,omitempty"`
	Locations    *[]string     `json:"locations,omitempty"`
	Capabilities *[]Capability `json:"capabilities,omitempty"`
}

// SlotSwapStatus is the status of the last successfull slot swap operation.
type SlotSwapStatus struct {
	TimestampUtc        *date.Time `json:"timestampUtc,omitempty"`
	SourceSlotName      *string    `json:"sourceSlotName,omitempty"`
	DestinationSlotName *string    `json:"destinationSlotName,omitempty"`
}

// SlowRequestsBasedTrigger is trigger based on request execution time.
type SlowRequestsBasedTrigger struct {
	TimeTaken    *string `json:"timeTaken,omitempty"`
	Count        *int32  `json:"count,omitempty"`
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// StatusCodesBasedTrigger is trigger based on status code.
type StatusCodesBasedTrigger struct {
	Status       *int32  `json:"status,omitempty"`
	SubStatus    *int32  `json:"subStatus,omitempty"`
	Win32Status  *int32  `json:"win32Status,omitempty"`
	Count        *int32  `json:"count,omitempty"`
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// VirtualApplication is virtual application in an app.
type VirtualApplication struct {
	VirtualPath        *string             `json:"virtualPath,omitempty"`
	PhysicalPath       *string             `json:"physicalPath,omitempty"`
	PreloadEnabled     *bool               `json:"preloadEnabled,omitempty"`
	VirtualDirectories *[]VirtualDirectory `json:"virtualDirectories,omitempty"`
}

// VirtualDirectory is directory for virtual application.
type VirtualDirectory struct {
	VirtualPath  *string `json:"virtualPath,omitempty"`
	PhysicalPath *string `json:"physicalPath,omitempty"`
}

// VnetGateway is the Virtual Network gateway contract. This is used to give
// the Virtual Network gateway access to the VPN package.
type VnetGateway struct {
	autorest.Response      `json:"-"`
	ID                     *string             `json:"id,omitempty"`
	Name                   *string             `json:"name,omitempty"`
	Kind                   *string             `json:"kind,omitempty"`
	Location               *string             `json:"location,omitempty"`
	Type                   *string             `json:"type,omitempty"`
	Tags                   *map[string]*string `json:"tags,omitempty"`
	*VnetGatewayProperties `json:"properties,omitempty"`
}

// VnetGatewayProperties is vnetGateway resource specific properties
type VnetGatewayProperties struct {
	VnetName      *string `json:"vnetName,omitempty"`
	VpnPackageURI *string `json:"vpnPackageUri,omitempty"`
}

// VnetInfo is virtual Network information contract.
type VnetInfo struct {
	autorest.Response `json:"-"`
	VnetResourceID    *string      `json:"vnetResourceId,omitempty"`
	CertThumbprint    *string      `json:"certThumbprint,omitempty"`
	CertBlob          *string      `json:"certBlob,omitempty"`
	Routes            *[]VnetRoute `json:"routes,omitempty"`
	ResyncRequired    *bool        `json:"resyncRequired,omitempty"`
	DNSServers        *string      `json:"dnsServers,omitempty"`
}

// VnetRoute is virtual Network route contract used to pass routing information
// for a Virtual Network.
type VnetRoute struct {
	autorest.Response    `json:"-"`
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Kind                 *string             `json:"kind,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*VnetRouteProperties `json:"properties,omitempty"`
}

// VnetRouteProperties is vnetRoute resource specific properties
type VnetRouteProperties struct {
	VnetRouteName *string   `json:"name,omitempty"`
	StartAddress  *string   `json:"startAddress,omitempty"`
	EndAddress    *string   `json:"endAddress,omitempty"`
	RouteType     RouteType `json:"routeType,omitempty"`
}

// WebAppCollection is collection of App Service apps.
type WebAppCollection struct {
	autorest.Response `json:"-"`
	Value             *[]Site `json:"value,omitempty"`
	NextLink          *string `json:"nextLink,omitempty"`
}

// WebAppCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client WebAppCollection) WebAppCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}
