package webapps

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"io"
	"net/http"
)

// AutoHealActionType enumerates the values for auto heal action type.
type AutoHealActionType string

const (
	// CustomAction specifies the custom action state for auto heal action
	// type.
	CustomAction AutoHealActionType = "CustomAction"
	// LogEvent specifies the log event state for auto heal action type.
	LogEvent AutoHealActionType = "LogEvent"
	// Recycle specifies the recycle state for auto heal action type.
	Recycle AutoHealActionType = "Recycle"
)

// AzureResourceType enumerates the values for azure resource type.
type AzureResourceType string

const (
	// TrafficManager specifies the traffic manager state for azure resource
	// type.
	TrafficManager AzureResourceType = "TrafficManager"
	// Website specifies the website state for azure resource type.
	Website AzureResourceType = "Website"
)

// BackupItemStatus enumerates the values for backup item status.
type BackupItemStatus string

const (
	// Created specifies the created state for backup item status.
	Created BackupItemStatus = "Created"
	// Deleted specifies the deleted state for backup item status.
	Deleted BackupItemStatus = "Deleted"
	// DeleteFailed specifies the delete failed state for backup item status.
	DeleteFailed BackupItemStatus = "DeleteFailed"
	// DeleteInProgress specifies the delete in progress state for backup item
	// status.
	DeleteInProgress BackupItemStatus = "DeleteInProgress"
	// Failed specifies the failed state for backup item status.
	Failed BackupItemStatus = "Failed"
	// InProgress specifies the in progress state for backup item status.
	InProgress BackupItemStatus = "InProgress"
	// PartiallySucceeded specifies the partially succeeded state for backup
	// item status.
	PartiallySucceeded BackupItemStatus = "PartiallySucceeded"
	// Skipped specifies the skipped state for backup item status.
	Skipped BackupItemStatus = "Skipped"
	// Succeeded specifies the succeeded state for backup item status.
	Succeeded BackupItemStatus = "Succeeded"
	// TimedOut specifies the timed out state for backup item status.
	TimedOut BackupItemStatus = "TimedOut"
)

// BackupRestoreOperationType enumerates the values for backup restore
// operation type.
type BackupRestoreOperationType string

const (
	// Clone specifies the clone state for backup restore operation type.
	Clone BackupRestoreOperationType = "Clone"
	// Default specifies the default state for backup restore operation type.
	Default BackupRestoreOperationType = "Default"
	// Relocation specifies the relocation state for backup restore operation
	// type.
	Relocation BackupRestoreOperationType = "Relocation"
)

// BuiltInAuthenticationProvider enumerates the values for built in
// authentication provider.
type BuiltInAuthenticationProvider string

const (
	// AzureActiveDirectory specifies the azure active directory state for
	// built in authentication provider.
	AzureActiveDirectory BuiltInAuthenticationProvider = "AzureActiveDirectory"
	// Facebook specifies the facebook state for built in authentication
	// provider.
	Facebook BuiltInAuthenticationProvider = "Facebook"
	// Google specifies the google state for built in authentication provider.
	Google BuiltInAuthenticationProvider = "Google"
	// MicrosoftAccount specifies the microsoft account state for built in
	// authentication provider.
	MicrosoftAccount BuiltInAuthenticationProvider = "MicrosoftAccount"
	// Twitter specifies the twitter state for built in authentication
	// provider.
	Twitter BuiltInAuthenticationProvider = "Twitter"
)

// CloneAbilityResult enumerates the values for clone ability result.
type CloneAbilityResult string

const (
	// Cloneable specifies the cloneable state for clone ability result.
	Cloneable CloneAbilityResult = "Cloneable"
	// NotCloneable specifies the not cloneable state for clone ability result.
	NotCloneable CloneAbilityResult = "NotCloneable"
	// PartiallyCloneable specifies the partially cloneable state for clone
	// ability result.
	PartiallyCloneable CloneAbilityResult = "PartiallyCloneable"
)

// ConnectionStringType enumerates the values for connection string type.
type ConnectionStringType string

const (
	// APIHub specifies the api hub state for connection string type.
	APIHub ConnectionStringType = "ApiHub"
	// Custom specifies the custom state for connection string type.
	Custom ConnectionStringType = "Custom"
	// DocDb specifies the doc db state for connection string type.
	DocDb ConnectionStringType = "DocDb"
	// EventHub specifies the event hub state for connection string type.
	EventHub ConnectionStringType = "EventHub"
	// MySQL specifies the my sql state for connection string type.
	MySQL ConnectionStringType = "MySql"
	// NotificationHub specifies the notification hub state for connection
	// string type.
	NotificationHub ConnectionStringType = "NotificationHub"
	// PostgreSQL specifies the postgre sql state for connection string type.
	PostgreSQL ConnectionStringType = "PostgreSQL"
	// RedisCache specifies the redis cache state for connection string type.
	RedisCache ConnectionStringType = "RedisCache"
	// ServiceBus specifies the service bus state for connection string type.
	ServiceBus ConnectionStringType = "ServiceBus"
	// SQLAzure specifies the sql azure state for connection string type.
	SQLAzure ConnectionStringType = "SQLAzure"
	// SQLServer specifies the sql server state for connection string type.
	SQLServer ConnectionStringType = "SQLServer"
)

// CustomHostNameDNSRecordType enumerates the values for custom host name dns
// record type.
type CustomHostNameDNSRecordType string

const (
	// A specifies the a state for custom host name dns record type.
	A CustomHostNameDNSRecordType = "A"
	// CName specifies the c name state for custom host name dns record type.
	CName CustomHostNameDNSRecordType = "CName"
)

// DatabaseType enumerates the values for database type.
type DatabaseType string

const (
	// DatabaseTypeLocalMySQL specifies the database type local my sql state
	// for database type.
	DatabaseTypeLocalMySQL DatabaseType = "LocalMySql"
	// DatabaseTypeMySQL specifies the database type my sql state for database
	// type.
	DatabaseTypeMySQL DatabaseType = "MySql"
	// DatabaseTypePostgreSQL specifies the database type postgre sql state for
	// database type.
	DatabaseTypePostgreSQL DatabaseType = "PostgreSql"
	// DatabaseTypeSQLAzure specifies the database type sql azure state for
	// database type.
	DatabaseTypeSQLAzure DatabaseType = "SqlAzure"
)

// DNSVerificationTestResult enumerates the values for dns verification test
// result.
type DNSVerificationTestResult string

const (
	// DNSVerificationTestResultFailed specifies the dns verification test
	// result failed state for dns verification test result.
	DNSVerificationTestResultFailed DNSVerificationTestResult = "Failed"
	// DNSVerificationTestResultPassed specifies the dns verification test
	// result passed state for dns verification test result.
	DNSVerificationTestResultPassed DNSVerificationTestResult = "Passed"
	// DNSVerificationTestResultSkipped specifies the dns verification test
	// result skipped state for dns verification test result.
	DNSVerificationTestResultSkipped DNSVerificationTestResult = "Skipped"
)

// FrequencyUnit enumerates the values for frequency unit.
type FrequencyUnit string

const (
	// Day specifies the day state for frequency unit.
	Day FrequencyUnit = "Day"
	// Hour specifies the hour state for frequency unit.
	Hour FrequencyUnit = "Hour"
)

// HostNameType enumerates the values for host name type.
type HostNameType string

const (
	// Managed specifies the managed state for host name type.
	Managed HostNameType = "Managed"
	// Verified specifies the verified state for host name type.
	Verified HostNameType = "Verified"
)

// HostType enumerates the values for host type.
type HostType string

const (
	// Repository specifies the repository state for host type.
	Repository HostType = "Repository"
	// Standard specifies the standard state for host type.
	Standard HostType = "Standard"
)

// LogLevel enumerates the values for log level.
type LogLevel string

const (
	// Error specifies the error state for log level.
	Error LogLevel = "Error"
	// Information specifies the information state for log level.
	Information LogLevel = "Information"
	// Off specifies the off state for log level.
	Off LogLevel = "Off"
	// Verbose specifies the verbose state for log level.
	Verbose LogLevel = "Verbose"
	// Warning specifies the warning state for log level.
	Warning LogLevel = "Warning"
)

// ManagedPipelineMode enumerates the values for managed pipeline mode.
type ManagedPipelineMode string

const (
	// Classic specifies the classic state for managed pipeline mode.
	Classic ManagedPipelineMode = "Classic"
	// Integrated specifies the integrated state for managed pipeline mode.
	Integrated ManagedPipelineMode = "Integrated"
)

// OperationStatus enumerates the values for operation status.
type OperationStatus string

const (
	// OperationStatusCreated specifies the operation status created state for
	// operation status.
	OperationStatusCreated OperationStatus = "Created"
	// OperationStatusFailed specifies the operation status failed state for
	// operation status.
	OperationStatusFailed OperationStatus = "Failed"
	// OperationStatusInProgress specifies the operation status in progress
	// state for operation status.
	OperationStatusInProgress OperationStatus = "InProgress"
	// OperationStatusSucceeded specifies the operation status succeeded state
	// for operation status.
	OperationStatusSucceeded OperationStatus = "Succeeded"
	// OperationStatusTimedOut specifies the operation status timed out state
	// for operation status.
	OperationStatusTimedOut OperationStatus = "TimedOut"
)

// PublishingProfileFormat enumerates the values for publishing profile format.
type PublishingProfileFormat string

const (
	// FileZilla3 specifies the file zilla 3 state for publishing profile
	// format.
	FileZilla3 PublishingProfileFormat = "FileZilla3"
	// Ftp specifies the ftp state for publishing profile format.
	Ftp PublishingProfileFormat = "Ftp"
	// WebDeploy specifies the web deploy state for publishing profile format.
	WebDeploy PublishingProfileFormat = "WebDeploy"
)

// RouteType enumerates the values for route type.
type RouteType string

const (
	// DEFAULT specifies the default state for route type.
	DEFAULT RouteType = "DEFAULT"
	// INHERITED specifies the inherited state for route type.
	INHERITED RouteType = "INHERITED"
	// STATIC specifies the static state for route type.
	STATIC RouteType = "STATIC"
)

// ScmType enumerates the values for scm type.
type ScmType string

const (
	// BitbucketGit specifies the bitbucket git state for scm type.
	BitbucketGit ScmType = "BitbucketGit"
	// BitbucketHg specifies the bitbucket hg state for scm type.
	BitbucketHg ScmType = "BitbucketHg"
	// CodePlexGit specifies the code plex git state for scm type.
	CodePlexGit ScmType = "CodePlexGit"
	// CodePlexHg specifies the code plex hg state for scm type.
	CodePlexHg ScmType = "CodePlexHg"
	// Dropbox specifies the dropbox state for scm type.
	Dropbox ScmType = "Dropbox"
	// ExternalGit specifies the external git state for scm type.
	ExternalGit ScmType = "ExternalGit"
	// ExternalHg specifies the external hg state for scm type.
	ExternalHg ScmType = "ExternalHg"
	// GitHub specifies the git hub state for scm type.
	GitHub ScmType = "GitHub"
	// LocalGit specifies the local git state for scm type.
	LocalGit ScmType = "LocalGit"
	// None specifies the none state for scm type.
	None ScmType = "None"
	// OneDrive specifies the one drive state for scm type.
	OneDrive ScmType = "OneDrive"
	// Tfs specifies the tfs state for scm type.
	Tfs ScmType = "Tfs"
	// VSO specifies the vso state for scm type.
	VSO ScmType = "VSO"
)

// SiteAvailabilityState enumerates the values for site availability state.
type SiteAvailabilityState string

const (
	// DisasterRecoveryMode specifies the disaster recovery mode state for site
	// availability state.
	DisasterRecoveryMode SiteAvailabilityState = "DisasterRecoveryMode"
	// Limited specifies the limited state for site availability state.
	Limited SiteAvailabilityState = "Limited"
	// Normal specifies the normal state for site availability state.
	Normal SiteAvailabilityState = "Normal"
)

// SiteLoadBalancing enumerates the values for site load balancing.
type SiteLoadBalancing string

const (
	// LeastRequests specifies the least requests state for site load
	// balancing.
	LeastRequests SiteLoadBalancing = "LeastRequests"
	// LeastResponseTime specifies the least response time state for site load
	// balancing.
	LeastResponseTime SiteLoadBalancing = "LeastResponseTime"
	// RequestHash specifies the request hash state for site load balancing.
	RequestHash SiteLoadBalancing = "RequestHash"
	// WeightedRoundRobin specifies the weighted round robin state for site
	// load balancing.
	WeightedRoundRobin SiteLoadBalancing = "WeightedRoundRobin"
	// WeightedTotalTraffic specifies the weighted total traffic state for site
	// load balancing.
	WeightedTotalTraffic SiteLoadBalancing = "WeightedTotalTraffic"
)

// SslState enumerates the values for ssl state.
type SslState string

const (
	// Disabled specifies the disabled state for ssl state.
	Disabled SslState = "Disabled"
	// IPBasedEnabled specifies the ip based enabled state for ssl state.
	IPBasedEnabled SslState = "IpBasedEnabled"
	// SniEnabled specifies the sni enabled state for ssl state.
	SniEnabled SslState = "SniEnabled"
)

// UnauthenticatedClientAction enumerates the values for unauthenticated client
// action.
type UnauthenticatedClientAction string

const (
	// AllowAnonymous specifies the allow anonymous state for unauthenticated
	// client action.
	AllowAnonymous UnauthenticatedClientAction = "AllowAnonymous"
	// RedirectToLoginPage specifies the redirect to login page state for
	// unauthenticated client action.
	RedirectToLoginPage UnauthenticatedClientAction = "RedirectToLoginPage"
)

// UsageState enumerates the values for usage state.
type UsageState string

const (
	// UsageStateExceeded specifies the usage state exceeded state for usage
	// state.
	UsageStateExceeded UsageState = "Exceeded"
	// UsageStateNormal specifies the usage state normal state for usage state.
	UsageStateNormal UsageState = "Normal"
)

// APIDefinitionInfo is information about the formal API definition for the
// app.
type APIDefinitionInfo struct {
	URL *string `json:"url,omitempty"`
}

// ApplicationLogsConfig is application logs configuration.
type ApplicationLogsConfig struct {
	FileSystem        *FileSystemApplicationLogsConfig        `json:"fileSystem,omitempty"`
	AzureTableStorage *AzureTableStorageApplicationLogsConfig `json:"azureTableStorage,omitempty"`
	AzureBlobStorage  *AzureBlobStorageApplicationLogsConfig  `json:"azureBlobStorage,omitempty"`
}

// AutoHealActions is actions which to take by the auto-heal module when a rule
// is triggered.
type AutoHealActions struct {
	ActionType              AutoHealActionType    `json:"actionType,omitempty"`
	CustomAction            *AutoHealCustomAction `json:"customAction,omitempty"`
	MinProcessExecutionTime *string               `json:"minProcessExecutionTime,omitempty"`
}

// AutoHealCustomAction is custom action to be executed
// when an auto heal rule is triggered.
type AutoHealCustomAction struct {
	Exe        *string `json:"exe,omitempty"`
	Parameters *string `json:"parameters,omitempty"`
}

// AutoHealRules is rules that can be defined for auto-heal.
type AutoHealRules struct {
	Triggers *AutoHealTriggers `json:"triggers,omitempty"`
	Actions  *AutoHealActions  `json:"actions,omitempty"`
}

// AutoHealTriggers is triggers for auto-heal.
type AutoHealTriggers struct {
	Requests         *RequestsBasedTrigger      `json:"requests,omitempty"`
	PrivateBytesInKB *int32                     `json:"privateBytesInKB,omitempty"`
	StatusCodes      *[]StatusCodesBasedTrigger `json:"statusCodes,omitempty"`
	SlowRequests     *SlowRequestsBasedTrigger  `json:"slowRequests,omitempty"`
}

// AzureBlobStorageApplicationLogsConfig is application logs azure blob storage
// configuration.
type AzureBlobStorageApplicationLogsConfig struct {
	Level           LogLevel `json:"level,omitempty"`
	SasURL          *string  `json:"sasUrl,omitempty"`
	RetentionInDays *int32   `json:"retentionInDays,omitempty"`
}

// AzureBlobStorageHTTPLogsConfig is http logs to azure blob storage
// configuration.
type AzureBlobStorageHTTPLogsConfig struct {
	SasURL          *string `json:"sasUrl,omitempty"`
	RetentionInDays *int32  `json:"retentionInDays,omitempty"`
	Enabled         *bool   `json:"enabled,omitempty"`
}

// AzureTableStorageApplicationLogsConfig is application logs to Azure table
// storage configuration.
type AzureTableStorageApplicationLogsConfig struct {
	Level  LogLevel `json:"level,omitempty"`
	SasURL *string  `json:"sasUrl,omitempty"`
}

// BackupItem is backup description.
type BackupItem struct {
	autorest.Response     `json:"-"`
	ID                    *string             `json:"id,omitempty"`
	Name                  *string             `json:"name,omitempty"`
	Kind                  *string             `json:"kind,omitempty"`
	Location              *string             `json:"location,omitempty"`
	Type                  *string             `json:"type,omitempty"`
	Tags                  *map[string]*string `json:"tags,omitempty"`
	*BackupItemProperties `json:"properties,omitempty"`
}

// BackupItemProperties is backupItem resource specific properties
type BackupItemProperties struct {
	BackupID             *int32                   `json:"id,omitempty"`
	StorageAccountURL    *string                  `json:"storageAccountUrl,omitempty"`
	BlobName             *string                  `json:"blobName,omitempty"`
	Name                 *string                  `json:"name,omitempty"`
	Status               BackupItemStatus         `json:"status,omitempty"`
	SizeInBytes          *int64                   `json:"sizeInBytes,omitempty"`
	Created              *date.Time               `json:"created,omitempty"`
	Log                  *string                  `json:"log,omitempty"`
	Databases            *[]DatabaseBackupSetting `json:"databases,omitempty"`
	Scheduled            *bool                    `json:"scheduled,omitempty"`
	LastRestoreTimeStamp *date.Time               `json:"lastRestoreTimeStamp,omitempty"`
	FinishedTimeStamp    *date.Time               `json:"finishedTimeStamp,omitempty"`
	CorrelationID        *string                  `json:"correlationId,omitempty"`
	WebsiteSizeInBytes   *int64                   `json:"websiteSizeInBytes,omitempty"`
}

// BackupItemCollection is collection of backup items.
type BackupItemCollection struct {
	autorest.Response `json:"-"`
	Value             *[]BackupItem `json:"value,omitempty"`
	NextLink          *string       `json:"nextLink,omitempty"`
}

// BackupItemCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client BackupItemCollection) BackupItemCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// BackupRequest is description of a backup which will be performed.
type BackupRequest struct {
	autorest.Response        `json:"-"`
	ID                       *string             `json:"id,omitempty"`
	Name                     *string             `json:"name,omitempty"`
	Kind                     *string             `json:"kind,omitempty"`
	Location                 *string             `json:"location,omitempty"`
	Type                     *string             `json:"type,omitempty"`
	Tags                     *map[string]*string `json:"tags,omitempty"`
	*BackupRequestProperties `json:"properties,omitempty"`
}

// BackupRequestProperties is backupRequest resource specific properties
type BackupRequestProperties struct {
	BackupRequestName *string                    `json:"name,omitempty"`
	Enabled           *bool                      `json:"enabled,omitempty"`
	StorageAccountURL *string                    `json:"storageAccountUrl,omitempty"`
	BackupSchedule    *BackupSchedule            `json:"backupSchedule,omitempty"`
	Databases         *[]DatabaseBackupSetting   `json:"databases,omitempty"`
	Type              BackupRestoreOperationType `json:"type,omitempty"`
}

// BackupSchedule is description of a backup schedule. Describes how often
// should be the backup performed and what should be the retention policy.
type BackupSchedule struct {
	FrequencyInterval     *int32        `json:"frequencyInterval,omitempty"`
	FrequencyUnit         FrequencyUnit `json:"frequencyUnit,omitempty"`
	KeepAtLeastOneBackup  *bool         `json:"keepAtLeastOneBackup,omitempty"`
	RetentionPeriodInDays *int32        `json:"retentionPeriodInDays,omitempty"`
	StartTime             *date.Time    `json:"startTime,omitempty"`
	LastExecutionTime     *date.Time    `json:"lastExecutionTime,omitempty"`
}

// CloningInfo is information needed for cloning operation.
type CloningInfo struct {
	CorrelationID             *string             `json:"correlationId,omitempty"`
	Overwrite                 *bool               `json:"overwrite,omitempty"`
	CloneCustomHostNames      *bool               `json:"cloneCustomHostNames,omitempty"`
	CloneSourceControl        *bool               `json:"cloneSourceControl,omitempty"`
	SourceWebAppID            *string             `json:"sourceWebAppId,omitempty"`
	HostingEnvironment        *string             `json:"hostingEnvironment,omitempty"`
	AppSettingsOverrides      *map[string]*string `json:"appSettingsOverrides,omitempty"`
	ConfigureLoadBalancing    *bool               `json:"configureLoadBalancing,omitempty"`
	TrafficManagerProfileID   *string             `json:"trafficManagerProfileId,omitempty"`
	TrafficManagerProfileName *string             `json:"trafficManagerProfileName,omitempty"`
	IgnoreQuotas              *bool               `json:"ignoreQuotas,omitempty"`
}

// Collection is collection of App Service apps.
type Collection struct {
	autorest.Response `json:"-"`
	Value             *[]Site `json:"value,omitempty"`
	NextLink          *string `json:"nextLink,omitempty"`
}

// CollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client Collection) CollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ConnectionStringDictionary is string dictionary resource.
type ConnectionStringDictionary struct {
	autorest.Response `json:"-"`
	ID                *string                              `json:"id,omitempty"`
	Name              *string                              `json:"name,omitempty"`
	Kind              *string                              `json:"kind,omitempty"`
	Location          *string                              `json:"location,omitempty"`
	Type              *string                              `json:"type,omitempty"`
	Tags              *map[string]*string                  `json:"tags,omitempty"`
	Properties        *map[string]*ConnStringValueTypePair `json:"properties,omitempty"`
}

// ConnStringInfo is database connection string information.
type ConnStringInfo struct {
	Name             *string              `json:"name,omitempty"`
	ConnectionString *string              `json:"connectionString,omitempty"`
	Type             ConnectionStringType `json:"type,omitempty"`
}

// ConnStringValueTypePair is database connection string value to type pair.
type ConnStringValueTypePair struct {
	Value *string              `json:"value,omitempty"`
	Type  ConnectionStringType `json:"type,omitempty"`
}

// CorsSettings is cross-Origin Resource Sharing (CORS) settings for the app.
type CorsSettings struct {
	AllowedOrigins *[]string `json:"allowedOrigins,omitempty"`
}

// CsmPublishingProfileOptions is publishing options for requested profile.
type CsmPublishingProfileOptions struct {
	Format PublishingProfileFormat `json:"format,omitempty"`
}

// CsmSiteRecoveryEntity is details about app recovery operation.
type CsmSiteRecoveryEntity struct {
	SnapshotTime *date.Time `json:"snapshotTime,omitempty"`
	SiteName     *string    `json:"siteName,omitempty"`
	SlotName     *string    `json:"slotName,omitempty"`
}

// CsmSlotEntity is deployment slot parameters.
type CsmSlotEntity struct {
	TargetSlot   *string `json:"targetSlot,omitempty"`
	PreserveVnet *bool   `json:"preserveVnet,omitempty"`
}

// CsmUsageQuota is usage of the quota resource.
type CsmUsageQuota struct {
	Unit          *string            `json:"unit,omitempty"`
	NextResetTime *date.Time         `json:"nextResetTime,omitempty"`
	CurrentValue  *int64             `json:"currentValue,omitempty"`
	Limit         *int64             `json:"limit,omitempty"`
	Name          *LocalizableString `json:"name,omitempty"`
}

// CsmUsageQuotaCollection is collection of CSM usage quotas.
type CsmUsageQuotaCollection struct {
	autorest.Response `json:"-"`
	Value             *[]CsmUsageQuota `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// CsmUsageQuotaCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CsmUsageQuotaCollection) CsmUsageQuotaCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// CustomHostnameAnalysisResult is custom domain analysis.
type CustomHostnameAnalysisResult struct {
	autorest.Response                       `json:"-"`
	ID                                      *string             `json:"id,omitempty"`
	Name                                    *string             `json:"name,omitempty"`
	Kind                                    *string             `json:"kind,omitempty"`
	Location                                *string             `json:"location,omitempty"`
	Type                                    *string             `json:"type,omitempty"`
	Tags                                    *map[string]*string `json:"tags,omitempty"`
	*CustomHostnameAnalysisResultProperties `json:"properties,omitempty"`
}

// CustomHostnameAnalysisResultProperties is customHostnameAnalysisResult
// resource specific properties
type CustomHostnameAnalysisResultProperties struct {
	IsHostnameAlreadyVerified           *bool                     `json:"isHostnameAlreadyVerified,omitempty"`
	CustomDomainVerificationTest        DNSVerificationTestResult `json:"customDomainVerificationTest,omitempty"`
	CustomDomainVerificationFailureInfo *ErrorEntity              `json:"customDomainVerificationFailureInfo,omitempty"`
	HasConflictOnScaleUnit              *bool                     `json:"hasConflictOnScaleUnit,omitempty"`
	HasConflictAcrossSubscription       *bool                     `json:"hasConflictAcrossSubscription,omitempty"`
	ConflictingAppResourceID            *string                   `json:"conflictingAppResourceId,omitempty"`
	CNameRecords                        *[]string                 `json:"cNameRecords,omitempty"`
	TxtRecords                          *[]string                 `json:"txtRecords,omitempty"`
	ARecords                            *[]string                 `json:"aRecords,omitempty"`
	AlternateCNameRecords               *[]string                 `json:"alternateCNameRecords,omitempty"`
	AlternateTxtRecords                 *[]string                 `json:"alternateTxtRecords,omitempty"`
}

// DatabaseBackupSetting is database backup settings.
type DatabaseBackupSetting struct {
	DatabaseType         DatabaseType `json:"databaseType,omitempty"`
	Name                 *string      `json:"name,omitempty"`
	ConnectionStringName *string      `json:"connectionStringName,omitempty"`
	ConnectionString     *string      `json:"connectionString,omitempty"`
}

// Deployment is user crendentials used for publishing activity.
type Deployment struct {
	autorest.Response     `json:"-"`
	ID                    *string             `json:"id,omitempty"`
	Name                  *string             `json:"name,omitempty"`
	Kind                  *string             `json:"kind,omitempty"`
	Location              *string             `json:"location,omitempty"`
	Type                  *string             `json:"type,omitempty"`
	Tags                  *map[string]*string `json:"tags,omitempty"`
	*DeploymentProperties `json:"properties,omitempty"`
}

// DeploymentProperties is deployment resource specific properties
type DeploymentProperties struct {
	ID          *string    `json:"id,omitempty"`
	Status      *int32     `json:"status,omitempty"`
	Message     *string    `json:"message,omitempty"`
	Author      *string    `json:"author,omitempty"`
	Deployer    *string    `json:"deployer,omitempty"`
	AuthorEmail *string    `json:"authorEmail,omitempty"`
	StartTime   *date.Time `json:"startTime,omitempty"`
	EndTime     *date.Time `json:"endTime,omitempty"`
	Active      *bool      `json:"active,omitempty"`
	Details     *string    `json:"details,omitempty"`
}

// DeploymentCollection is collection of app deployments.
type DeploymentCollection struct {
	autorest.Response `json:"-"`
	Value             *[]Deployment `json:"value,omitempty"`
	NextLink          *string       `json:"nextLink,omitempty"`
}

// DeploymentCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client DeploymentCollection) DeploymentCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// EnabledConfig is enabled configuration.
type EnabledConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// ErrorEntity is body of the error response returned from the API.
type ErrorEntity struct {
	ExtendedCode    *string        `json:"extendedCode,omitempty"`
	MessageTemplate *string        `json:"messageTemplate,omitempty"`
	Parameters      *[]string      `json:"parameters,omitempty"`
	InnerErrors     *[]ErrorEntity `json:"innerErrors,omitempty"`
	Code            *string        `json:"code,omitempty"`
	Message         *string        `json:"message,omitempty"`
}

// Experiments is routing rules in production experiments.
type Experiments struct {
	RampUpRules *[]RampUpRule `json:"rampUpRules,omitempty"`
}

// FileSystemApplicationLogsConfig is application logs to file system
// configuration.
type FileSystemApplicationLogsConfig struct {
	Level LogLevel `json:"level,omitempty"`
}

// FileSystemHTTPLogsConfig is http logs to file system configuration.
type FileSystemHTTPLogsConfig struct {
	RetentionInMb   *int32 `json:"retentionInMb,omitempty"`
	RetentionInDays *int32 `json:"retentionInDays,omitempty"`
	Enabled         *bool  `json:"enabled,omitempty"`
}

// HandlerMapping is the IIS handler mappings used to define which handler
// processes HTTP requests with certain extension.
// For example, it is used to configure php-cgi.exe process to handle all HTTP
// requests with *.php extension.
type HandlerMapping struct {
	Extension       *string `json:"extension,omitempty"`
	ScriptProcessor *string `json:"scriptProcessor,omitempty"`
	Arguments       *string `json:"arguments,omitempty"`
}

// HostingEnvironmentProfile is specification for an App Service Environment to
// use for this resource.
type HostingEnvironmentProfile struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// HostNameBinding is a hostname binding object.
type HostNameBinding struct {
	autorest.Response          `json:"-"`
	ID                         *string             `json:"id,omitempty"`
	Name                       *string             `json:"name,omitempty"`
	Kind                       *string             `json:"kind,omitempty"`
	Location                   *string             `json:"location,omitempty"`
	Type                       *string             `json:"type,omitempty"`
	Tags                       *map[string]*string `json:"tags,omitempty"`
	*HostNameBindingProperties `json:"properties,omitempty"`
}

// HostNameBindingProperties is hostNameBinding resource specific properties
type HostNameBindingProperties struct {
	Name                        *string                     `json:"name,omitempty"`
	SiteName                    *string                     `json:"siteName,omitempty"`
	DomainID                    *string                     `json:"domainId,omitempty"`
	AzureResourceName           *string                     `json:"azureResourceName,omitempty"`
	AzureResourceType           AzureResourceType           `json:"azureResourceType,omitempty"`
	CustomHostNameDNSRecordType CustomHostNameDNSRecordType `json:"customHostNameDnsRecordType,omitempty"`
	HostNameType                HostNameType                `json:"hostNameType,omitempty"`
	SslState                    SslState                    `json:"sslState,omitempty"`
	Thumbprint                  *string                     `json:"thumbprint,omitempty"`
	VirtualIP                   *string                     `json:"virtualIP,omitempty"`
}

// HostNameBindingCollection is collection of hostname bindings.
type HostNameBindingCollection struct {
	autorest.Response `json:"-"`
	Value             *[]HostNameBinding `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// HostNameBindingCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client HostNameBindingCollection) HostNameBindingCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// HostNameSslState is sSL-enabled hostname.
type HostNameSslState struct {
	Name       *string  `json:"name,omitempty"`
	SslState   SslState `json:"sslState,omitempty"`
	VirtualIP  *string  `json:"virtualIP,omitempty"`
	Thumbprint *string  `json:"thumbprint,omitempty"`
	ToUpdate   *bool    `json:"toUpdate,omitempty"`
	HostType   HostType `json:"hostType,omitempty"`
}

// HTTPLogsConfig is http logs configuration.
type HTTPLogsConfig struct {
	FileSystem       *FileSystemHTTPLogsConfig       `json:"fileSystem,omitempty"`
	AzureBlobStorage *AzureBlobStorageHTTPLogsConfig `json:"azureBlobStorage,omitempty"`
}

// HybridConnection is hybrid Connection contract. This is used to configure a
// Hybrid Connection.
type HybridConnection struct {
	autorest.Response           `json:"-"`
	ID                          *string             `json:"id,omitempty"`
	Name                        *string             `json:"name,omitempty"`
	Kind                        *string             `json:"kind,omitempty"`
	Location                    *string             `json:"location,omitempty"`
	Type                        *string             `json:"type,omitempty"`
	Tags                        *map[string]*string `json:"tags,omitempty"`
	*HybridConnectionProperties `json:"properties,omitempty"`
}

// HybridConnectionProperties is hybridConnection resource specific properties
type HybridConnectionProperties struct {
	ServiceBusNamespace *string `json:"serviceBusNamespace,omitempty"`
	RelayName           *string `json:"relayName,omitempty"`
	RelayArmURI         *string `json:"relayArmUri,omitempty"`
	Hostname            *string `json:"hostname,omitempty"`
	Port                *int32  `json:"port,omitempty"`
	SendKeyName         *string `json:"sendKeyName,omitempty"`
	SendKeyValue        *string `json:"sendKeyValue,omitempty"`
}

// HybridConnectionKey is hybrid Connection key contract. This has the send key
// name and value for a Hybrid Connection.
type HybridConnectionKey struct {
	autorest.Response              `json:"-"`
	ID                             *string             `json:"id,omitempty"`
	Name                           *string             `json:"name,omitempty"`
	Kind                           *string             `json:"kind,omitempty"`
	Location                       *string             `json:"location,omitempty"`
	Type                           *string             `json:"type,omitempty"`
	Tags                           *map[string]*string `json:"tags,omitempty"`
	*HybridConnectionKeyProperties `json:"properties,omitempty"`
}

// HybridConnectionKeyProperties is hybridConnectionKey resource specific
// properties
type HybridConnectionKeyProperties struct {
	SendKeyName  *string `json:"sendKeyName,omitempty"`
	SendKeyValue *string `json:"sendKeyValue,omitempty"`
}

// Identifier is identifier.
type Identifier struct {
	autorest.Response     `json:"-"`
	ID                    *string             `json:"id,omitempty"`
	Name                  *string             `json:"name,omitempty"`
	Kind                  *string             `json:"kind,omitempty"`
	Location              *string             `json:"location,omitempty"`
	Type                  *string             `json:"type,omitempty"`
	Tags                  *map[string]*string `json:"tags,omitempty"`
	*IdentifierProperties `json:"properties,omitempty"`
}

// IdentifierProperties is identifier resource specific properties
type IdentifierProperties struct {
	ID *string `json:"id,omitempty"`
}

// IdentifierCollection is collection of identifiers.
type IdentifierCollection struct {
	autorest.Response `json:"-"`
	Value             *[]Identifier `json:"value,omitempty"`
	NextLink          *string       `json:"nextLink,omitempty"`
}

// IdentifierCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client IdentifierCollection) IdentifierCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// InstanceCollection is collection of app instances.
type InstanceCollection struct {
	autorest.Response `json:"-"`
	Value             *[]SiteInstance `json:"value,omitempty"`
	NextLink          *string         `json:"nextLink,omitempty"`
}

// InstanceCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client InstanceCollection) InstanceCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// IPSecurityRestriction is iP security restriction on an app.
type IPSecurityRestriction struct {
	IPAddress  *string `json:"ipAddress,omitempty"`
	SubnetMask *string `json:"subnetMask,omitempty"`
}

// ListSiteConfigurationSnapshotInfo is
type ListSiteConfigurationSnapshotInfo struct {
	autorest.Response `json:"-"`
	Value             *[]SiteConfigurationSnapshotInfo `json:"value,omitempty"`
}

// ListVnetInfo is
type ListVnetInfo struct {
	autorest.Response `json:"-"`
	Value             *[]VnetInfo `json:"value,omitempty"`
}

// LocalizableString is localizable string object containing the name and a
// localized value.
type LocalizableString struct {
	Value          *string `json:"value,omitempty"`
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// MigrateMySQLRequest is mySQL migration request.
type MigrateMySQLRequest struct {
	ID                             *string             `json:"id,omitempty"`
	Name                           *string             `json:"name,omitempty"`
	Kind                           *string             `json:"kind,omitempty"`
	Location                       *string             `json:"location,omitempty"`
	Type                           *string             `json:"type,omitempty"`
	Tags                           *map[string]*string `json:"tags,omitempty"`
	*MigrateMySQLRequestProperties `json:"properties,omitempty"`
}

// MigrateMySQLRequestProperties is migrateMySqlRequest resource specific
// properties
type MigrateMySQLRequestProperties struct {
	ConnectionString *string `json:"connectionString,omitempty"`
}

// MigrateMySQLStatus is mySQL migration status.
type MigrateMySQLStatus struct {
	autorest.Response             `json:"-"`
	ID                            *string             `json:"id,omitempty"`
	Name                          *string             `json:"name,omitempty"`
	Kind                          *string             `json:"kind,omitempty"`
	Location                      *string             `json:"location,omitempty"`
	Type                          *string             `json:"type,omitempty"`
	Tags                          *map[string]*string `json:"tags,omitempty"`
	*MigrateMySQLStatusProperties `json:"properties,omitempty"`
}

// MigrateMySQLStatusProperties is migrateMySqlStatus resource specific
// properties
type MigrateMySQLStatusProperties struct {
	MigrationOperationStatus OperationStatus `json:"migrationOperationStatus,omitempty"`
	OperationID              *string         `json:"operationId,omitempty"`
	LocalMySQLEnabled        *bool           `json:"localMySqlEnabled,omitempty"`
}

// NameValuePair is name value pair.
type NameValuePair struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NetworkFeatures is full view of network features for an app (presently VNET
// integration and Hybrid Connections).
type NetworkFeatures struct {
	autorest.Response          `json:"-"`
	ID                         *string             `json:"id,omitempty"`
	Name                       *string             `json:"name,omitempty"`
	Kind                       *string             `json:"kind,omitempty"`
	Location                   *string             `json:"location,omitempty"`
	Type                       *string             `json:"type,omitempty"`
	Tags                       *map[string]*string `json:"tags,omitempty"`
	*NetworkFeaturesProperties `json:"properties,omitempty"`
}

// NetworkFeaturesProperties is networkFeatures resource specific properties
type NetworkFeaturesProperties struct {
	VirtualNetworkName       *string                         `json:"virtualNetworkName,omitempty"`
	VirtualNetworkConnection *VnetInfo                       `json:"virtualNetworkConnection,omitempty"`
	HybridConnections        *[]RelayServiceConnectionEntity `json:"hybridConnections,omitempty"`
	HybridConnectionsV2      *[]HybridConnection             `json:"hybridConnectionsV2,omitempty"`
}

// Operation is operation.
type Operation struct {
	autorest.Response    `json:"-"`
	ID                   *string         `json:"id,omitempty"`
	Name                 *string         `json:"name,omitempty"`
	Status               OperationStatus `json:"status,omitempty"`
	Errors               *[]ErrorEntity  `json:"errors,omitempty"`
	CreatedTime          *date.Time      `json:"createdTime,omitempty"`
	ModifiedTime         *date.Time      `json:"modifiedTime,omitempty"`
	ExpirationTime       *date.Time      `json:"expirationTime,omitempty"`
	GeoMasterOperationID *string         `json:"geoMasterOperationId,omitempty"`
}

// PerfMonCounterCollection is collection of performance monitor counters.
type PerfMonCounterCollection struct {
	autorest.Response `json:"-"`
	Value             *[]PerfMonResponse `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// PerfMonCounterCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client PerfMonCounterCollection) PerfMonCounterCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// PerfMonResponse is performance monitor API response.
type PerfMonResponse struct {
	Code    *string     `json:"code,omitempty"`
	Message *string     `json:"message,omitempty"`
	Data    *PerfMonSet `json:"data,omitempty"`
}

// PerfMonSample is performance monitor sample in a set.
type PerfMonSample struct {
	Time         *date.Time `json:"time,omitempty"`
	InstanceName *string    `json:"instanceName,omitempty"`
	Value        *float64   `json:"value,omitempty"`
}

// PerfMonSet is metric information.
type PerfMonSet struct {
	Name      *string          `json:"name,omitempty"`
	StartTime *date.Time       `json:"startTime,omitempty"`
	EndTime   *date.Time       `json:"endTime,omitempty"`
	TimeGrain *string          `json:"timeGrain,omitempty"`
	Values    *[]PerfMonSample `json:"values,omitempty"`
}

// PremierAddOn is premier add-on.
type PremierAddOn struct {
	autorest.Response       `json:"-"`
	ID                      *string             `json:"id,omitempty"`
	Name                    *string             `json:"name,omitempty"`
	Kind                    *string             `json:"kind,omitempty"`
	Location                *string             `json:"location,omitempty"`
	Type                    *string             `json:"type,omitempty"`
	Tags                    *map[string]*string `json:"tags,omitempty"`
	*PremierAddOnProperties `json:"properties,omitempty"`
}

// PremierAddOnProperties is premierAddOn resource specific properties
type PremierAddOnProperties struct {
	Sku                  *string             `json:"sku,omitempty"`
	Product              *string             `json:"product,omitempty"`
	Vendor               *string             `json:"vendor,omitempty"`
	PremierAddOnName     *string             `json:"name,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	MarketplacePublisher *string             `json:"marketplacePublisher,omitempty"`
	MarketplaceOffer     *string             `json:"marketplaceOffer,omitempty"`
}

// PushSettings is push settings for the App.
type PushSettings struct {
	autorest.Response `json:"-"`
	IsPushEnabled     *bool   `json:"isPushEnabled,omitempty"`
	TagWhitelistJSON  *string `json:"tagWhitelistJson,omitempty"`
	TagsRequiringAuth *string `json:"tagsRequiringAuth,omitempty"`
	DynamicTagsJSON   *string `json:"dynamicTagsJson,omitempty"`
}

// RampUpRule is routing rules for ramp up testing. This rule allows to
// redirect static traffic % to a slot or to gradually change routing % based
// on performance.
type RampUpRule struct {
	ActionHostName            *string  `json:"actionHostName,omitempty"`
	ReroutePercentage         *float64 `json:"reroutePercentage,omitempty"`
	ChangeStep                *float64 `json:"changeStep,omitempty"`
	ChangeIntervalInMinutes   *int32   `json:"changeIntervalInMinutes,omitempty"`
	MinReroutePercentage      *float64 `json:"minReroutePercentage,omitempty"`
	MaxReroutePercentage      *float64 `json:"maxReroutePercentage,omitempty"`
	ChangeDecisionCallbackURL *string  `json:"changeDecisionCallbackUrl,omitempty"`
	Name                      *string  `json:"name,omitempty"`
}

// ReadCloser is
type ReadCloser struct {
	autorest.Response `json:"-"`
	Value             *io.ReadCloser `json:"value,omitempty"`
}

// RecoverResponse is response for an app recovery request.
type RecoverResponse struct {
	autorest.Response          `json:"-"`
	ID                         *string             `json:"id,omitempty"`
	Name                       *string             `json:"name,omitempty"`
	Kind                       *string             `json:"kind,omitempty"`
	Location                   *string             `json:"location,omitempty"`
	Type                       *string             `json:"type,omitempty"`
	Tags                       *map[string]*string `json:"tags,omitempty"`
	*RecoverResponseProperties `json:"properties,omitempty"`
}

// RecoverResponseProperties is recoverResponse resource specific properties
type RecoverResponseProperties struct {
	OperationID *string `json:"operationId,omitempty"`
}

// RelayServiceConnectionEntity is hybrid Connection for an App Service app.
type RelayServiceConnectionEntity struct {
	autorest.Response                       `json:"-"`
	ID                                      *string             `json:"id,omitempty"`
	Name                                    *string             `json:"name,omitempty"`
	Kind                                    *string             `json:"kind,omitempty"`
	Location                                *string             `json:"location,omitempty"`
	Type                                    *string             `json:"type,omitempty"`
	Tags                                    *map[string]*string `json:"tags,omitempty"`
	*RelayServiceConnectionEntityProperties `json:"properties,omitempty"`
}

// RelayServiceConnectionEntityProperties is relayServiceConnectionEntity
// resource specific properties
type RelayServiceConnectionEntityProperties struct {
	EntityName               *string `json:"entityName,omitempty"`
	EntityConnectionString   *string `json:"entityConnectionString,omitempty"`
	ResourceType             *string `json:"resourceType,omitempty"`
	ResourceConnectionString *string `json:"resourceConnectionString,omitempty"`
	Hostname                 *string `json:"hostname,omitempty"`
	Port                     *int32  `json:"port,omitempty"`
	BiztalkURI               *string `json:"biztalkUri,omitempty"`
}

// RequestsBasedTrigger is trigger based on total requests.
type RequestsBasedTrigger struct {
	Count        *int32  `json:"count,omitempty"`
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// Resource is azure resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Kind     *string             `json:"kind,omitempty"`
	Location *string             `json:"location,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceHealthMetadata is used for getting ResourceHealthCheck settings.
type ResourceHealthMetadata struct {
	autorest.Response                 `json:"-"`
	ID                                *string             `json:"id,omitempty"`
	Name                              *string             `json:"name,omitempty"`
	Kind                              *string             `json:"kind,omitempty"`
	Location                          *string             `json:"location,omitempty"`
	Type                              *string             `json:"type,omitempty"`
	Tags                              *map[string]*string `json:"tags,omitempty"`
	*ResourceHealthMetadataProperties `json:"properties,omitempty"`
}

// ResourceHealthMetadataProperties is resourceHealthMetadata resource specific
// properties
type ResourceHealthMetadataProperties struct {
	ID                 *string `json:"id,omitempty"`
	Category           *string `json:"category,omitempty"`
	SignalAvailability *bool   `json:"signalAvailability,omitempty"`
}

// ResourceMetric is object representing a metric for any resource .
type ResourceMetric struct {
	Name         *ResourceMetricName       `json:"name,omitempty"`
	Unit         *string                   `json:"unit,omitempty"`
	TimeGrain    *string                   `json:"timeGrain,omitempty"`
	StartTime    *date.Time                `json:"startTime,omitempty"`
	EndTime      *date.Time                `json:"endTime,omitempty"`
	ResourceID   *string                   `json:"resourceId,omitempty"`
	ID           *string                   `json:"id,omitempty"`
	MetricValues *[]ResourceMetricValue    `json:"metricValues,omitempty"`
	Properties   *[]ResourceMetricProperty `json:"properties,omitempty"`
}

// ResourceMetricAvailability is metrics availability and retention.
type ResourceMetricAvailability struct {
	TimeGrain *string `json:"timeGrain,omitempty"`
	Retention *string `json:"retention,omitempty"`
}

// ResourceMetricCollection is collection of metric responses.
type ResourceMetricCollection struct {
	autorest.Response `json:"-"`
	Value             *[]ResourceMetric `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// ResourceMetricCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ResourceMetricCollection) ResourceMetricCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ResourceMetricDefinition is metadata for the metrics.
type ResourceMetricDefinition struct {
	ID                                  *string             `json:"id,omitempty"`
	Name                                *string             `json:"name,omitempty"`
	Kind                                *string             `json:"kind,omitempty"`
	Location                            *string             `json:"location,omitempty"`
	Type                                *string             `json:"type,omitempty"`
	Tags                                *map[string]*string `json:"tags,omitempty"`
	*ResourceMetricDefinitionProperties `json:"properties,omitempty"`
}

// ResourceMetricDefinitionProperties is resourceMetricDefinition resource
// specific properties
type ResourceMetricDefinitionProperties struct {
	Name                   *ResourceMetricName           `json:"name,omitempty"`
	Unit                   *string                       `json:"unit,omitempty"`
	PrimaryAggregationType *string                       `json:"primaryAggregationType,omitempty"`
	MetricAvailabilities   *[]ResourceMetricAvailability `json:"metricAvailabilities,omitempty"`
	ResourceURI            *string                       `json:"resourceUri,omitempty"`
	ID                     *string                       `json:"id,omitempty"`
	Properties             *map[string]*string           `json:"properties,omitempty"`
}

// ResourceMetricDefinitionCollection is collection of metric definitions.
type ResourceMetricDefinitionCollection struct {
	autorest.Response `json:"-"`
	Value             *[]ResourceMetricDefinition `json:"value,omitempty"`
	NextLink          *string                     `json:"nextLink,omitempty"`
}

// ResourceMetricDefinitionCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ResourceMetricDefinitionCollection) ResourceMetricDefinitionCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ResourceMetricName is name of a metric for any resource .
type ResourceMetricName struct {
	Value          *string `json:"value,omitempty"`
	LocalizedValue *string `json:"localizedValue,omitempty"`
}

// ResourceMetricProperty is resource metric property.
type ResourceMetricProperty struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ResourceMetricValue is value of resource metric.
type ResourceMetricValue struct {
	Timestamp  *string                   `json:"timestamp,omitempty"`
	Average    *float64                  `json:"average,omitempty"`
	Minimum    *float64                  `json:"minimum,omitempty"`
	Maximum    *float64                  `json:"maximum,omitempty"`
	Total      *float64                  `json:"total,omitempty"`
	Count      *float64                  `json:"count,omitempty"`
	Properties *[]ResourceMetricProperty `json:"properties,omitempty"`
}

// RestoreRequest is description of a restore request.
type RestoreRequest struct {
	autorest.Response         `json:"-"`
	ID                        *string             `json:"id,omitempty"`
	Name                      *string             `json:"name,omitempty"`
	Kind                      *string             `json:"kind,omitempty"`
	Location                  *string             `json:"location,omitempty"`
	Type                      *string             `json:"type,omitempty"`
	Tags                      *map[string]*string `json:"tags,omitempty"`
	*RestoreRequestProperties `json:"properties,omitempty"`
}

// RestoreRequestProperties is restoreRequest resource specific properties
type RestoreRequestProperties struct {
	StorageAccountURL          *string                    `json:"storageAccountUrl,omitempty"`
	BlobName                   *string                    `json:"blobName,omitempty"`
	Overwrite                  *bool                      `json:"overwrite,omitempty"`
	SiteName                   *string                    `json:"siteName,omitempty"`
	Databases                  *[]DatabaseBackupSetting   `json:"databases,omitempty"`
	IgnoreConflictingHostNames *bool                      `json:"ignoreConflictingHostNames,omitempty"`
	OperationType              BackupRestoreOperationType `json:"operationType,omitempty"`
	AdjustConnectionStrings    *bool                      `json:"adjustConnectionStrings,omitempty"`
	HostingEnvironment         *string                    `json:"hostingEnvironment,omitempty"`
}

// RestoreResponse is response for an app restore request.
type RestoreResponse struct {
	autorest.Response          `json:"-"`
	ID                         *string             `json:"id,omitempty"`
	Name                       *string             `json:"name,omitempty"`
	Kind                       *string             `json:"kind,omitempty"`
	Location                   *string             `json:"location,omitempty"`
	Type                       *string             `json:"type,omitempty"`
	Tags                       *map[string]*string `json:"tags,omitempty"`
	*RestoreResponseProperties `json:"properties,omitempty"`
}

// RestoreResponseProperties is restoreResponse resource specific properties
type RestoreResponseProperties struct {
	OperationID *string `json:"operationId,omitempty"`
}

// Site is a web app, a mobile app backend, or an API app.
type Site struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Kind              *string             `json:"kind,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*SiteProperties   `json:"properties,omitempty"`
}

// SiteProperties is site resource specific properties
type SiteProperties struct {
	State                     *string                    `json:"state,omitempty"`
	HostNames                 *[]string                  `json:"hostNames,omitempty"`
	RepositorySiteName        *string                    `json:"repositorySiteName,omitempty"`
	UsageState                UsageState                 `json:"usageState,omitempty"`
	Enabled                   *bool                      `json:"enabled,omitempty"`
	EnabledHostNames          *[]string                  `json:"enabledHostNames,omitempty"`
	AvailabilityState         SiteAvailabilityState      `json:"availabilityState,omitempty"`
	HostNameSslStates         *[]HostNameSslState        `json:"hostNameSslStates,omitempty"`
	ServerFarmID              *string                    `json:"serverFarmId,omitempty"`
	Reserved                  *bool                      `json:"reserved,omitempty"`
	LastModifiedTimeUtc       *date.Time                 `json:"lastModifiedTimeUtc,omitempty"`
	SiteConfig                *SiteConfig                `json:"siteConfig,omitempty"`
	TrafficManagerHostNames   *[]string                  `json:"trafficManagerHostNames,omitempty"`
	PremiumAppDeployed        *bool                      `json:"premiumAppDeployed,omitempty"`
	ScmSiteAlsoStopped        *bool                      `json:"scmSiteAlsoStopped,omitempty"`
	TargetSwapSlot            *string                    `json:"targetSwapSlot,omitempty"`
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`
	MicroService              *string                    `json:"microService,omitempty"`
	GatewaySiteName           *string                    `json:"gatewaySiteName,omitempty"`
	ClientAffinityEnabled     *bool                      `json:"clientAffinityEnabled,omitempty"`
	ClientCertEnabled         *bool                      `json:"clientCertEnabled,omitempty"`
	HostNamesDisabled         *bool                      `json:"hostNamesDisabled,omitempty"`
	OutboundIPAddresses       *string                    `json:"outboundIpAddresses,omitempty"`
	ContainerSize             *int32                     `json:"containerSize,omitempty"`
	DailyMemoryTimeQuota      *int32                     `json:"dailyMemoryTimeQuota,omitempty"`
	SuspendedTill             *date.Time                 `json:"suspendedTill,omitempty"`
	MaxNumberOfWorkers        *int32                     `json:"maxNumberOfWorkers,omitempty"`
	CloningInfo               *CloningInfo               `json:"cloningInfo,omitempty"`
	ResourceGroup             *string                    `json:"resourceGroup,omitempty"`
	IsDefaultContainer        *bool                      `json:"isDefaultContainer,omitempty"`
	DefaultHostName           *string                    `json:"defaultHostName,omitempty"`
	SlotSwapStatus            *SlotSwapStatus            `json:"slotSwapStatus,omitempty"`
}

// SiteAuthSettings is configuration settings for the Azure App Service
// Authentication / Authorization feature.
type SiteAuthSettings struct {
	autorest.Response           `json:"-"`
	ID                          *string             `json:"id,omitempty"`
	Name                        *string             `json:"name,omitempty"`
	Kind                        *string             `json:"kind,omitempty"`
	Location                    *string             `json:"location,omitempty"`
	Type                        *string             `json:"type,omitempty"`
	Tags                        *map[string]*string `json:"tags,omitempty"`
	*SiteAuthSettingsProperties `json:"properties,omitempty"`
}

// SiteAuthSettingsProperties is siteAuthSettings resource specific properties
type SiteAuthSettingsProperties struct {
	Enabled                      *bool                         `json:"enabled,omitempty"`
	RuntimeVersion               *string                       `json:"runtimeVersion,omitempty"`
	UnauthenticatedClientAction  UnauthenticatedClientAction   `json:"unauthenticatedClientAction,omitempty"`
	TokenStoreEnabled            *bool                         `json:"tokenStoreEnabled,omitempty"`
	AllowedExternalRedirectUrls  *[]string                     `json:"allowedExternalRedirectUrls,omitempty"`
	DefaultProvider              BuiltInAuthenticationProvider `json:"defaultProvider,omitempty"`
	TokenRefreshExtensionHours   *float64                      `json:"tokenRefreshExtensionHours,omitempty"`
	ClientID                     *string                       `json:"clientId,omitempty"`
	ClientSecret                 *string                       `json:"clientSecret,omitempty"`
	Issuer                       *string                       `json:"issuer,omitempty"`
	AllowedAudiences             *[]string                     `json:"allowedAudiences,omitempty"`
	AdditionalLoginParams        *[]string                     `json:"additionalLoginParams,omitempty"`
	GoogleClientID               *string                       `json:"googleClientId,omitempty"`
	GoogleClientSecret           *string                       `json:"googleClientSecret,omitempty"`
	GoogleOAuthScopes            *[]string                     `json:"googleOAuthScopes,omitempty"`
	FacebookAppID                *string                       `json:"facebookAppId,omitempty"`
	FacebookAppSecret            *string                       `json:"facebookAppSecret,omitempty"`
	FacebookOAuthScopes          *[]string                     `json:"facebookOAuthScopes,omitempty"`
	TwitterConsumerKey           *string                       `json:"twitterConsumerKey,omitempty"`
	TwitterConsumerSecret        *string                       `json:"twitterConsumerSecret,omitempty"`
	MicrosoftAccountClientID     *string                       `json:"microsoftAccountClientId,omitempty"`
	MicrosoftAccountClientSecret *string                       `json:"microsoftAccountClientSecret,omitempty"`
	MicrosoftAccountOAuthScopes  *[]string                     `json:"microsoftAccountOAuthScopes,omitempty"`
}

// SiteCloneability is represents whether or not an app is cloneable.
type SiteCloneability struct {
	autorest.Response       `json:"-"`
	Result                  CloneAbilityResult           `json:"result,omitempty"`
	BlockingFeatures        *[]SiteCloneabilityCriterion `json:"blockingFeatures,omitempty"`
	UnsupportedFeatures     *[]SiteCloneabilityCriterion `json:"unsupportedFeatures,omitempty"`
	BlockingCharacteristics *[]SiteCloneabilityCriterion `json:"blockingCharacteristics,omitempty"`
}

// SiteCloneabilityCriterion is an app cloneability criterion.
type SiteCloneabilityCriterion struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

// SiteConfig is configuration of an App Service app.
type SiteConfig struct {
	NumberOfWorkers              *int32                   `json:"numberOfWorkers,omitempty"`
	DefaultDocuments             *[]string                `json:"defaultDocuments,omitempty"`
	NetFrameworkVersion          *string                  `json:"netFrameworkVersion,omitempty"`
	PhpVersion                   *string                  `json:"phpVersion,omitempty"`
	PythonVersion                *string                  `json:"pythonVersion,omitempty"`
	NodeVersion                  *string                  `json:"nodeVersion,omitempty"`
	LinuxFxVersion               *string                  `json:"linuxFxVersion,omitempty"`
	RequestTracingEnabled        *bool                    `json:"requestTracingEnabled,omitempty"`
	RequestTracingExpirationTime *date.Time               `json:"requestTracingExpirationTime,omitempty"`
	RemoteDebuggingEnabled       *bool                    `json:"remoteDebuggingEnabled,omitempty"`
	RemoteDebuggingVersion       *string                  `json:"remoteDebuggingVersion,omitempty"`
	HTTPLoggingEnabled           *bool                    `json:"httpLoggingEnabled,omitempty"`
	LogsDirectorySizeLimit       *int32                   `json:"logsDirectorySizeLimit,omitempty"`
	DetailedErrorLoggingEnabled  *bool                    `json:"detailedErrorLoggingEnabled,omitempty"`
	PublishingUsername           *string                  `json:"publishingUsername,omitempty"`
	AppSettings                  *[]NameValuePair         `json:"appSettings,omitempty"`
	ConnectionStrings            *[]ConnStringInfo        `json:"connectionStrings,omitempty"`
	MachineKey                   *SiteMachineKey          `json:"machineKey,omitempty"`
	HandlerMappings              *[]HandlerMapping        `json:"handlerMappings,omitempty"`
	DocumentRoot                 *string                  `json:"documentRoot,omitempty"`
	ScmType                      ScmType                  `json:"scmType,omitempty"`
	Use32BitWorkerProcess        *bool                    `json:"use32BitWorkerProcess,omitempty"`
	WebSocketsEnabled            *bool                    `json:"webSocketsEnabled,omitempty"`
	AlwaysOn                     *bool                    `json:"alwaysOn,omitempty"`
	JavaVersion                  *string                  `json:"javaVersion,omitempty"`
	JavaContainer                *string                  `json:"javaContainer,omitempty"`
	JavaContainerVersion         *string                  `json:"javaContainerVersion,omitempty"`
	AppCommandLine               *string                  `json:"appCommandLine,omitempty"`
	ManagedPipelineMode          ManagedPipelineMode      `json:"managedPipelineMode,omitempty"`
	VirtualApplications          *[]VirtualApplication    `json:"virtualApplications,omitempty"`
	LoadBalancing                SiteLoadBalancing        `json:"loadBalancing,omitempty"`
	Experiments                  *Experiments             `json:"experiments,omitempty"`
	Limits                       *SiteLimits              `json:"limits,omitempty"`
	AutoHealEnabled              *bool                    `json:"autoHealEnabled,omitempty"`
	AutoHealRules                *AutoHealRules           `json:"autoHealRules,omitempty"`
	TracingOptions               *string                  `json:"tracingOptions,omitempty"`
	VnetName                     *string                  `json:"vnetName,omitempty"`
	Cors                         *CorsSettings            `json:"cors,omitempty"`
	Push                         *PushSettings            `json:"push,omitempty"`
	APIDefinition                *APIDefinitionInfo       `json:"apiDefinition,omitempty"`
	AutoSwapSlotName             *string                  `json:"autoSwapSlotName,omitempty"`
	LocalMySQLEnabled            *bool                    `json:"localMySqlEnabled,omitempty"`
	IPSecurityRestrictions       *[]IPSecurityRestriction `json:"ipSecurityRestrictions,omitempty"`
}

// SiteConfigResource is web app configuration ARM resource.
type SiteConfigResource struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Kind              *string             `json:"kind,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*SiteConfig       `json:"properties,omitempty"`
}

// SiteConfigResourceCollection is collection of site configurations.
type SiteConfigResourceCollection struct {
	autorest.Response `json:"-"`
	Value             *[]SiteConfigResource `json:"value,omitempty"`
	NextLink          *string               `json:"nextLink,omitempty"`
}

// SiteConfigResourceCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SiteConfigResourceCollection) SiteConfigResourceCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// SiteConfigurationSnapshotInfo is a snapshot of a web app configuration.
type SiteConfigurationSnapshotInfo struct {
	ID                                       *string             `json:"id,omitempty"`
	Name                                     *string             `json:"name,omitempty"`
	Kind                                     *string             `json:"kind,omitempty"`
	Location                                 *string             `json:"location,omitempty"`
	Type                                     *string             `json:"type,omitempty"`
	Tags                                     *map[string]*string `json:"tags,omitempty"`
	*SiteConfigurationSnapshotInfoProperties `json:"properties,omitempty"`
}

// SiteConfigurationSnapshotInfoProperties is siteConfigurationSnapshotInfo
// resource specific properties
type SiteConfigurationSnapshotInfoProperties struct {
	Time *date.Time `json:"time,omitempty"`
	ID   *int32     `json:"id,omitempty"`
}

// SiteInstance is instance of an app.
type SiteInstance struct {
	ID                      *string             `json:"id,omitempty"`
	Name                    *string             `json:"name,omitempty"`
	Kind                    *string             `json:"kind,omitempty"`
	Location                *string             `json:"location,omitempty"`
	Type                    *string             `json:"type,omitempty"`
	Tags                    *map[string]*string `json:"tags,omitempty"`
	*SiteInstanceProperties `json:"properties,omitempty"`
}

// SiteInstanceProperties is siteInstance resource specific properties
type SiteInstanceProperties struct {
	Name *string `json:"name,omitempty"`
}

// SiteLimits is metric limits set on an app.
type SiteLimits struct {
	MaxPercentageCPU *float64 `json:"maxPercentageCpu,omitempty"`
	MaxMemoryInMb    *int64   `json:"maxMemoryInMb,omitempty"`
	MaxDiskSizeInMb  *int64   `json:"maxDiskSizeInMb,omitempty"`
}

// SiteLogsConfig is configuration of App Service site logs.
type SiteLogsConfig struct {
	autorest.Response         `json:"-"`
	ID                        *string             `json:"id,omitempty"`
	Name                      *string             `json:"name,omitempty"`
	Kind                      *string             `json:"kind,omitempty"`
	Location                  *string             `json:"location,omitempty"`
	Type                      *string             `json:"type,omitempty"`
	Tags                      *map[string]*string `json:"tags,omitempty"`
	*SiteLogsConfigProperties `json:"properties,omitempty"`
}

// SiteLogsConfigProperties is siteLogsConfig resource specific properties
type SiteLogsConfigProperties struct {
	ApplicationLogs       *ApplicationLogsConfig `json:"applicationLogs,omitempty"`
	HTTPLogs              *HTTPLogsConfig        `json:"httpLogs,omitempty"`
	FailedRequestsTracing *EnabledConfig         `json:"failedRequestsTracing,omitempty"`
	DetailedErrorMessages *EnabledConfig         `json:"detailedErrorMessages,omitempty"`
}

// SiteMachineKey is machineKey of an app.
type SiteMachineKey struct {
	Validation    *string `json:"validation,omitempty"`
	ValidationKey *string `json:"validationKey,omitempty"`
	Decryption    *string `json:"decryption,omitempty"`
	DecryptionKey *string `json:"decryptionKey,omitempty"`
}

// SitePhpErrorLogFlag is used for getting PHP error logging flag.
type SitePhpErrorLogFlag struct {
	autorest.Response              `json:"-"`
	ID                             *string             `json:"id,omitempty"`
	Name                           *string             `json:"name,omitempty"`
	Kind                           *string             `json:"kind,omitempty"`
	Location                       *string             `json:"location,omitempty"`
	Type                           *string             `json:"type,omitempty"`
	Tags                           *map[string]*string `json:"tags,omitempty"`
	*SitePhpErrorLogFlagProperties `json:"properties,omitempty"`
}

// SitePhpErrorLogFlagProperties is sitePhpErrorLogFlag resource specific
// properties
type SitePhpErrorLogFlagProperties struct {
	LocalLogErrors           *string `json:"localLogErrors,omitempty"`
	MasterLogErrors          *string `json:"masterLogErrors,omitempty"`
	LocalLogErrorsMaxLength  *string `json:"localLogErrorsMaxLength,omitempty"`
	MasterLogErrorsMaxLength *string `json:"masterLogErrorsMaxLength,omitempty"`
}

// SiteSourceControl is source control configuration for an app.
type SiteSourceControl struct {
	autorest.Response            `json:"-"`
	ID                           *string             `json:"id,omitempty"`
	Name                         *string             `json:"name,omitempty"`
	Kind                         *string             `json:"kind,omitempty"`
	Location                     *string             `json:"location,omitempty"`
	Type                         *string             `json:"type,omitempty"`
	Tags                         *map[string]*string `json:"tags,omitempty"`
	*SiteSourceControlProperties `json:"properties,omitempty"`
}

// SiteSourceControlProperties is siteSourceControl resource specific
// properties
type SiteSourceControlProperties struct {
	RepoURL                   *string `json:"repoUrl,omitempty"`
	Branch                    *string `json:"branch,omitempty"`
	IsManualIntegration       *bool   `json:"isManualIntegration,omitempty"`
	DeploymentRollbackEnabled *bool   `json:"deploymentRollbackEnabled,omitempty"`
	IsMercurial               *bool   `json:"isMercurial,omitempty"`
}

// SlotConfigNames is names for connection strings and application settings to
// be marked as sticky to the deployment slot and not moved during a swap
// operation.
// This is valid for all deployment slots in an app.
type SlotConfigNames struct {
	ConnectionStringNames *[]string `json:"connectionStringNames,omitempty"`
	AppSettingNames       *[]string `json:"appSettingNames,omitempty"`
}

// SlotConfigNamesResource is slot Config names azure resource.
type SlotConfigNamesResource struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Kind              *string             `json:"kind,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*SlotConfigNames  `json:"properties,omitempty"`
}

// SlotDifference is a setting difference between two deployment slots of an
// app.
type SlotDifference struct {
	ID                        *string             `json:"id,omitempty"`
	Name                      *string             `json:"name,omitempty"`
	Kind                      *string             `json:"kind,omitempty"`
	Location                  *string             `json:"location,omitempty"`
	Type                      *string             `json:"type,omitempty"`
	Tags                      *map[string]*string `json:"tags,omitempty"`
	*SlotDifferenceProperties `json:"properties,omitempty"`
}

// SlotDifferenceProperties is slotDifference resource specific properties
type SlotDifferenceProperties struct {
	Type               *string `json:"type,omitempty"`
	SettingType        *string `json:"settingType,omitempty"`
	DiffRule           *string `json:"diffRule,omitempty"`
	SettingName        *string `json:"settingName,omitempty"`
	ValueInCurrentSlot *string `json:"valueInCurrentSlot,omitempty"`
	ValueInTargetSlot  *string `json:"valueInTargetSlot,omitempty"`
	Description        *string `json:"description,omitempty"`
}

// SlotDifferenceCollection is collection of slot differences.
type SlotDifferenceCollection struct {
	autorest.Response `json:"-"`
	Value             *[]SlotDifference `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// SlotDifferenceCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SlotDifferenceCollection) SlotDifferenceCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// SlotSwapStatus is the status of the last successfull slot swap operation.
type SlotSwapStatus struct {
	TimestampUtc        *date.Time `json:"timestampUtc,omitempty"`
	SourceSlotName      *string    `json:"sourceSlotName,omitempty"`
	DestinationSlotName *string    `json:"destinationSlotName,omitempty"`
}

// SlowRequestsBasedTrigger is trigger based on request execution time.
type SlowRequestsBasedTrigger struct {
	TimeTaken    *string `json:"timeTaken,omitempty"`
	Count        *int32  `json:"count,omitempty"`
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// Snapshot is a snapshot of an app.
type Snapshot struct {
	ID                  *string             `json:"id,omitempty"`
	Name                *string             `json:"name,omitempty"`
	Kind                *string             `json:"kind,omitempty"`
	Location            *string             `json:"location,omitempty"`
	Type                *string             `json:"type,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
	*SnapshotProperties `json:"properties,omitempty"`
}

// SnapshotProperties is snapshot resource specific properties
type SnapshotProperties struct {
	Time *date.Time `json:"time,omitempty"`
}

// SnapshotCollection is collection of snapshots which can be used to revert an
// app to a previous time.
type SnapshotCollection struct {
	autorest.Response `json:"-"`
	Value             *[]Snapshot `json:"value,omitempty"`
	NextLink          *string     `json:"nextLink,omitempty"`
}

// SnapshotCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SnapshotCollection) SnapshotCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// StatusCodesBasedTrigger is trigger based on status code.
type StatusCodesBasedTrigger struct {
	Status       *int32  `json:"status,omitempty"`
	SubStatus    *int32  `json:"subStatus,omitempty"`
	Win32Status  *int32  `json:"win32Status,omitempty"`
	Count        *int32  `json:"count,omitempty"`
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// StorageMigrationOptions is options for app content migration.
type StorageMigrationOptions struct {
	ID                                 *string             `json:"id,omitempty"`
	Name                               *string             `json:"name,omitempty"`
	Kind                               *string             `json:"kind,omitempty"`
	Location                           *string             `json:"location,omitempty"`
	Type                               *string             `json:"type,omitempty"`
	Tags                               *map[string]*string `json:"tags,omitempty"`
	*StorageMigrationOptionsProperties `json:"properties,omitempty"`
}

// StorageMigrationOptionsProperties is storageMigrationOptions resource
// specific properties
type StorageMigrationOptionsProperties struct {
	AzurefilesConnectionString *string `json:"azurefilesConnectionString,omitempty"`
	AzurefilesShare            *string `json:"azurefilesShare,omitempty"`
	SwitchSiteAfterMigration   *bool   `json:"switchSiteAfterMigration,omitempty"`
	BlockWriteAccessToSite     *bool   `json:"blockWriteAccessToSite,omitempty"`
}

// StorageMigrationResponse is response for a migration of app content request.
type StorageMigrationResponse struct {
	autorest.Response                   `json:"-"`
	ID                                  *string             `json:"id,omitempty"`
	Name                                *string             `json:"name,omitempty"`
	Kind                                *string             `json:"kind,omitempty"`
	Location                            *string             `json:"location,omitempty"`
	Type                                *string             `json:"type,omitempty"`
	Tags                                *map[string]*string `json:"tags,omitempty"`
	*StorageMigrationResponseProperties `json:"properties,omitempty"`
}

// StorageMigrationResponseProperties is storageMigrationResponse resource
// specific properties
type StorageMigrationResponseProperties struct {
	OperationID *string `json:"operationId,omitempty"`
}

// String is
type String struct {
	autorest.Response `json:"-"`
	Value             *string `json:"value,omitempty"`
}

// StringDictionary is string dictionary resource.
type StringDictionary struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Kind              *string             `json:"kind,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	Properties        *map[string]*string `json:"properties,omitempty"`
}

// User is user crendentials used for publishing activity.
type User struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Kind              *string             `json:"kind,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*UserProperties   `json:"properties,omitempty"`
}

// UserProperties is user resource specific properties
type UserProperties struct {
	UserName                   *string `json:"name,omitempty"`
	PublishingUserName         *string `json:"publishingUserName,omitempty"`
	PublishingPassword         *string `json:"publishingPassword,omitempty"`
	PublishingPasswordHash     *string `json:"publishingPasswordHash,omitempty"`
	PublishingPasswordHashSalt *string `json:"publishingPasswordHashSalt,omitempty"`
}

// VirtualApplication is virtual application in an app.
type VirtualApplication struct {
	VirtualPath        *string             `json:"virtualPath,omitempty"`
	PhysicalPath       *string             `json:"physicalPath,omitempty"`
	PreloadEnabled     *bool               `json:"preloadEnabled,omitempty"`
	VirtualDirectories *[]VirtualDirectory `json:"virtualDirectories,omitempty"`
}

// VirtualDirectory is directory for virtual application.
type VirtualDirectory struct {
	VirtualPath  *string `json:"virtualPath,omitempty"`
	PhysicalPath *string `json:"physicalPath,omitempty"`
}

// VnetGateway is the Virtual Network gateway contract. This is used to give
// the Virtual Network gateway access to the VPN package.
type VnetGateway struct {
	autorest.Response      `json:"-"`
	ID                     *string             `json:"id,omitempty"`
	Name                   *string             `json:"name,omitempty"`
	Kind                   *string             `json:"kind,omitempty"`
	Location               *string             `json:"location,omitempty"`
	Type                   *string             `json:"type,omitempty"`
	Tags                   *map[string]*string `json:"tags,omitempty"`
	*VnetGatewayProperties `json:"properties,omitempty"`
}

// VnetGatewayProperties is vnetGateway resource specific properties
type VnetGatewayProperties struct {
	VnetName      *string `json:"vnetName,omitempty"`
	VpnPackageURI *string `json:"vpnPackageUri,omitempty"`
}

// VnetInfo is virtual Network information contract.
type VnetInfo struct {
	autorest.Response `json:"-"`
	VnetResourceID    *string      `json:"vnetResourceId,omitempty"`
	CertThumbprint    *string      `json:"certThumbprint,omitempty"`
	CertBlob          *string      `json:"certBlob,omitempty"`
	Routes            *[]VnetRoute `json:"routes,omitempty"`
	ResyncRequired    *bool        `json:"resyncRequired,omitempty"`
	DNSServers        *string      `json:"dnsServers,omitempty"`
}

// VnetRoute is virtual Network route contract used to pass routing information
// for a Virtual Network.
type VnetRoute struct {
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Kind                 *string             `json:"kind,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*VnetRouteProperties `json:"properties,omitempty"`
}

// VnetRouteProperties is vnetRoute resource specific properties
type VnetRouteProperties struct {
	VnetRouteName *string   `json:"name,omitempty"`
	StartAddress  *string   `json:"startAddress,omitempty"`
	EndAddress    *string   `json:"endAddress,omitempty"`
	RouteType     RouteType `json:"routeType,omitempty"`
}
