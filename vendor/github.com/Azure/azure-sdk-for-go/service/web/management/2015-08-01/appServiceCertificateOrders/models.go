package appservicecertificateorders

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// CertificateOrderActionType enumerates the values for certificate order
// action type.
type CertificateOrderActionType string

const (
	// CertificateExpirationWarning specifies the certificate expiration
	// warning state for certificate order action type.
	CertificateExpirationWarning CertificateOrderActionType = "CertificateExpirationWarning"
	// CertificateExpired specifies the certificate expired state for
	// certificate order action type.
	CertificateExpired CertificateOrderActionType = "CertificateExpired"
	// CertificateIssued specifies the certificate issued state for certificate
	// order action type.
	CertificateIssued CertificateOrderActionType = "CertificateIssued"
	// CertificateOrderCanceled specifies the certificate order canceled state
	// for certificate order action type.
	CertificateOrderCanceled CertificateOrderActionType = "CertificateOrderCanceled"
	// CertificateOrderCreated specifies the certificate order created state
	// for certificate order action type.
	CertificateOrderCreated CertificateOrderActionType = "CertificateOrderCreated"
	// CertificateRevoked specifies the certificate revoked state for
	// certificate order action type.
	CertificateRevoked CertificateOrderActionType = "CertificateRevoked"
	// DomainValidationComplete specifies the domain validation complete state
	// for certificate order action type.
	DomainValidationComplete CertificateOrderActionType = "DomainValidationComplete"
	// FraudCleared specifies the fraud cleared state for certificate order
	// action type.
	FraudCleared CertificateOrderActionType = "FraudCleared"
	// FraudDetected specifies the fraud detected state for certificate order
	// action type.
	FraudDetected CertificateOrderActionType = "FraudDetected"
	// FraudDocumentationRequired specifies the fraud documentation required
	// state for certificate order action type.
	FraudDocumentationRequired CertificateOrderActionType = "FraudDocumentationRequired"
	// OrgNameChange specifies the org name change state for certificate order
	// action type.
	OrgNameChange CertificateOrderActionType = "OrgNameChange"
	// OrgValidationComplete specifies the org validation complete state for
	// certificate order action type.
	OrgValidationComplete CertificateOrderActionType = "OrgValidationComplete"
	// SanDrop specifies the san drop state for certificate order action type.
	SanDrop CertificateOrderActionType = "SanDrop"
	// Unknown specifies the unknown state for certificate order action type.
	Unknown CertificateOrderActionType = "Unknown"
)

// CertificateOrderStatus enumerates the values for certificate order status.
type CertificateOrderStatus string

const (
	// Canceled specifies the canceled state for certificate order status.
	Canceled CertificateOrderStatus = "Canceled"
	// Denied specifies the denied state for certificate order status.
	Denied CertificateOrderStatus = "Denied"
	// Expired specifies the expired state for certificate order status.
	Expired CertificateOrderStatus = "Expired"
	// Issued specifies the issued state for certificate order status.
	Issued CertificateOrderStatus = "Issued"
	// NotSubmitted specifies the not submitted state for certificate order
	// status.
	NotSubmitted CertificateOrderStatus = "NotSubmitted"
	// Pendingissuance specifies the pendingissuance state for certificate
	// order status.
	Pendingissuance CertificateOrderStatus = "Pendingissuance"
	// PendingRekey specifies the pending rekey state for certificate order
	// status.
	PendingRekey CertificateOrderStatus = "PendingRekey"
	// Pendingrevocation specifies the pendingrevocation state for certificate
	// order status.
	Pendingrevocation CertificateOrderStatus = "Pendingrevocation"
	// Revoked specifies the revoked state for certificate order status.
	Revoked CertificateOrderStatus = "Revoked"
	// Unused specifies the unused state for certificate order status.
	Unused CertificateOrderStatus = "Unused"
)

// CertificateProductType enumerates the values for certificate product type.
type CertificateProductType string

const (
	// StandardDomainValidatedSsl specifies the standard domain validated ssl
	// state for certificate product type.
	StandardDomainValidatedSsl CertificateProductType = "StandardDomainValidatedSsl"
	// StandardDomainValidatedWildCardSsl specifies the standard domain
	// validated wild card ssl state for certificate product type.
	StandardDomainValidatedWildCardSsl CertificateProductType = "StandardDomainValidatedWildCardSsl"
)

// KeyVaultSecretStatus enumerates the values for key vault secret status.
type KeyVaultSecretStatus string

const (
	// KeyVaultSecretStatusAzureServiceUnauthorizedToAccessKeyVault specifies
	// the key vault secret status azure service unauthorized to access key
	// vault state for key vault secret status.
	KeyVaultSecretStatusAzureServiceUnauthorizedToAccessKeyVault KeyVaultSecretStatus = "AzureServiceUnauthorizedToAccessKeyVault"
	// KeyVaultSecretStatusCertificateOrderFailed specifies the key vault
	// secret status certificate order failed state for key vault secret
	// status.
	KeyVaultSecretStatusCertificateOrderFailed KeyVaultSecretStatus = "CertificateOrderFailed"
	// KeyVaultSecretStatusExternalPrivateKey specifies the key vault secret
	// status external private key state for key vault secret status.
	KeyVaultSecretStatusExternalPrivateKey KeyVaultSecretStatus = "ExternalPrivateKey"
	// KeyVaultSecretStatusInitialized specifies the key vault secret status
	// initialized state for key vault secret status.
	KeyVaultSecretStatusInitialized KeyVaultSecretStatus = "Initialized"
	// KeyVaultSecretStatusKeyVaultDoesNotExist specifies the key vault secret
	// status key vault does not exist state for key vault secret status.
	KeyVaultSecretStatusKeyVaultDoesNotExist KeyVaultSecretStatus = "KeyVaultDoesNotExist"
	// KeyVaultSecretStatusKeyVaultSecretDoesNotExist specifies the key vault
	// secret status key vault secret does not exist state for key vault secret
	// status.
	KeyVaultSecretStatusKeyVaultSecretDoesNotExist KeyVaultSecretStatus = "KeyVaultSecretDoesNotExist"
	// KeyVaultSecretStatusOperationNotPermittedOnKeyVault specifies the key
	// vault secret status operation not permitted on key vault state for key
	// vault secret status.
	KeyVaultSecretStatusOperationNotPermittedOnKeyVault KeyVaultSecretStatus = "OperationNotPermittedOnKeyVault"
	// KeyVaultSecretStatusSucceeded specifies the key vault secret status
	// succeeded state for key vault secret status.
	KeyVaultSecretStatusSucceeded KeyVaultSecretStatus = "Succeeded"
	// KeyVaultSecretStatusUnknown specifies the key vault secret status
	// unknown state for key vault secret status.
	KeyVaultSecretStatusUnknown KeyVaultSecretStatus = "Unknown"
	// KeyVaultSecretStatusUnknownError specifies the key vault secret status
	// unknown error state for key vault secret status.
	KeyVaultSecretStatusUnknownError KeyVaultSecretStatus = "UnknownError"
	// KeyVaultSecretStatusWaitingOnCertificateOrder specifies the key vault
	// secret status waiting on certificate order state for key vault secret
	// status.
	KeyVaultSecretStatusWaitingOnCertificateOrder KeyVaultSecretStatus = "WaitingOnCertificateOrder"
)

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCanceled specifies the provisioning state canceled
	// state for provisioning state.
	ProvisioningStateCanceled ProvisioningState = "Canceled"
	// ProvisioningStateDeleting specifies the provisioning state deleting
	// state for provisioning state.
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed specifies the provisioning state failed state
	// for provisioning state.
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateInProgress specifies the provisioning state in progress
	// state for provisioning state.
	ProvisioningStateInProgress ProvisioningState = "InProgress"
	// ProvisioningStateSucceeded specifies the provisioning state succeeded
	// state for provisioning state.
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// AppServiceCertificate is key Vault container for a certificate that is
// purchased through Azure.
type AppServiceCertificate struct {
	KeyVaultID         *string              `json:"keyVaultId,omitempty"`
	KeyVaultSecretName *string              `json:"keyVaultSecretName,omitempty"`
	ProvisioningState  KeyVaultSecretStatus `json:"provisioningState,omitempty"`
}

// AppServiceCertificateCollection is collection of certitificateorder
// certificates.
type AppServiceCertificateCollection struct {
	autorest.Response `json:"-"`
	Value             *[]AppServiceCertificateResource `json:"value,omitempty"`
	NextLink          *string                          `json:"nextLink,omitempty"`
}

// AppServiceCertificateCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client AppServiceCertificateCollection) AppServiceCertificateCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// AppServiceCertificateOrder is sSL certificate purchase order.
type AppServiceCertificateOrder struct {
	autorest.Response                     `json:"-"`
	ID                                    *string             `json:"id,omitempty"`
	Name                                  *string             `json:"name,omitempty"`
	Kind                                  *string             `json:"kind,omitempty"`
	Location                              *string             `json:"location,omitempty"`
	Type                                  *string             `json:"type,omitempty"`
	Tags                                  *map[string]*string `json:"tags,omitempty"`
	*AppServiceCertificateOrderProperties `json:"properties,omitempty"`
}

// AppServiceCertificateOrderProperties is appServiceCertificateOrder resource
// specific properties
type AppServiceCertificateOrderProperties struct {
	Certificates                             *map[string]*AppServiceCertificate `json:"certificates,omitempty"`
	DistinguishedName                        *string                            `json:"distinguishedName,omitempty"`
	DomainVerificationToken                  *string                            `json:"domainVerificationToken,omitempty"`
	ValidityInYears                          *int32                             `json:"validityInYears,omitempty"`
	KeySize                                  *int32                             `json:"keySize,omitempty"`
	ProductType                              CertificateProductType             `json:"productType,omitempty"`
	AutoRenew                                *bool                              `json:"autoRenew,omitempty"`
	ProvisioningState                        ProvisioningState                  `json:"provisioningState,omitempty"`
	Status                                   CertificateOrderStatus             `json:"status,omitempty"`
	SignedCertificate                        *CertificateDetails                `json:"signedCertificate,omitempty"`
	Csr                                      *string                            `json:"csr,omitempty"`
	Intermediate                             *CertificateDetails                `json:"intermediate,omitempty"`
	Root                                     *CertificateDetails                `json:"root,omitempty"`
	SerialNumber                             *string                            `json:"serialNumber,omitempty"`
	LastCertificateIssuanceTime              *date.Time                         `json:"lastCertificateIssuanceTime,omitempty"`
	ExpirationTime                           *date.Time                         `json:"expirationTime,omitempty"`
	IsPrivateKeyExternal                     *bool                              `json:"isPrivateKeyExternal,omitempty"`
	AppServiceCertificateNotRenewableReasons *[]string                          `json:"appServiceCertificateNotRenewableReasons,omitempty"`
	NextAutoRenewalTimeStamp                 *date.Time                         `json:"nextAutoRenewalTimeStamp,omitempty"`
}

// AppServiceCertificateResource is key Vault container ARM resource for a
// certificate that is purchased through Azure.
type AppServiceCertificateResource struct {
	autorest.Response      `json:"-"`
	ID                     *string             `json:"id,omitempty"`
	Name                   *string             `json:"name,omitempty"`
	Kind                   *string             `json:"kind,omitempty"`
	Location               *string             `json:"location,omitempty"`
	Type                   *string             `json:"type,omitempty"`
	Tags                   *map[string]*string `json:"tags,omitempty"`
	*AppServiceCertificate `json:"properties,omitempty"`
}

// CertificateDetails is sSL certificate details.
type CertificateDetails struct {
	Version            *int32     `json:"version,omitempty"`
	SerialNumber       *string    `json:"serialNumber,omitempty"`
	Thumbprint         *string    `json:"thumbprint,omitempty"`
	Subject            *string    `json:"subject,omitempty"`
	NotBefore          *date.Time `json:"notBefore,omitempty"`
	NotAfter           *date.Time `json:"notAfter,omitempty"`
	SignatureAlgorithm *string    `json:"signatureAlgorithm,omitempty"`
	Issuer             *string    `json:"issuer,omitempty"`
	RawData            *string    `json:"rawData,omitempty"`
}

// CertificateEmail is sSL certificate email.
type CertificateEmail struct {
	ID                          *string             `json:"id,omitempty"`
	Name                        *string             `json:"name,omitempty"`
	Kind                        *string             `json:"kind,omitempty"`
	Location                    *string             `json:"location,omitempty"`
	Type                        *string             `json:"type,omitempty"`
	Tags                        *map[string]*string `json:"tags,omitempty"`
	*CertificateEmailProperties `json:"properties,omitempty"`
}

// CertificateEmailProperties is certificateEmail resource specific properties
type CertificateEmailProperties struct {
	EmailID   *string    `json:"emailId,omitempty"`
	TimeStamp *date.Time `json:"timeStamp,omitempty"`
}

// CertificateOrderAction is certificate order action.
type CertificateOrderAction struct {
	ID                                *string             `json:"id,omitempty"`
	Name                              *string             `json:"name,omitempty"`
	Kind                              *string             `json:"kind,omitempty"`
	Location                          *string             `json:"location,omitempty"`
	Type                              *string             `json:"type,omitempty"`
	Tags                              *map[string]*string `json:"tags,omitempty"`
	*CertificateOrderActionProperties `json:"properties,omitempty"`
}

// CertificateOrderActionProperties is certificateOrderAction resource specific
// properties
type CertificateOrderActionProperties struct {
	Type      CertificateOrderActionType `json:"type,omitempty"`
	CreatedAt *date.Time                 `json:"createdAt,omitempty"`
}

// Collection is collection of certitificate orders.
type Collection struct {
	autorest.Response `json:"-"`
	Value             *[]AppServiceCertificateOrder `json:"value,omitempty"`
	NextLink          *string                       `json:"nextLink,omitempty"`
}

// CollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client Collection) CollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ListCertificateEmail is
type ListCertificateEmail struct {
	autorest.Response `json:"-"`
	Value             *[]CertificateEmail `json:"value,omitempty"`
}

// ListCertificateOrderAction is
type ListCertificateOrderAction struct {
	autorest.Response `json:"-"`
	Value             *[]CertificateOrderAction `json:"value,omitempty"`
}

// NameIdentifier is identifies an object.
type NameIdentifier struct {
	Name *string `json:"name,omitempty"`
}

// ReissueCertificateOrderRequest is class representing certificate reissue
// request.
type ReissueCertificateOrderRequest struct {
	ID                                        *string             `json:"id,omitempty"`
	Name                                      *string             `json:"name,omitempty"`
	Kind                                      *string             `json:"kind,omitempty"`
	Location                                  *string             `json:"location,omitempty"`
	Type                                      *string             `json:"type,omitempty"`
	Tags                                      *map[string]*string `json:"tags,omitempty"`
	*ReissueCertificateOrderRequestProperties `json:"properties,omitempty"`
}

// ReissueCertificateOrderRequestProperties is reissueCertificateOrderRequest
// resource specific properties
type ReissueCertificateOrderRequestProperties struct {
	KeySize                    *int32  `json:"keySize,omitempty"`
	DelayExistingRevokeInHours *int32  `json:"delayExistingRevokeInHours,omitempty"`
	Csr                        *string `json:"csr,omitempty"`
	IsPrivateKeyExternal       *bool   `json:"isPrivateKeyExternal,omitempty"`
}

// RenewCertificateOrderRequest is class representing certificate renew
// request.
type RenewCertificateOrderRequest struct {
	ID                                      *string             `json:"id,omitempty"`
	Name                                    *string             `json:"name,omitempty"`
	Kind                                    *string             `json:"kind,omitempty"`
	Location                                *string             `json:"location,omitempty"`
	Type                                    *string             `json:"type,omitempty"`
	Tags                                    *map[string]*string `json:"tags,omitempty"`
	*RenewCertificateOrderRequestProperties `json:"properties,omitempty"`
}

// RenewCertificateOrderRequestProperties is renewCertificateOrderRequest
// resource specific properties
type RenewCertificateOrderRequestProperties struct {
	KeySize              *int32  `json:"keySize,omitempty"`
	Csr                  *string `json:"csr,omitempty"`
	IsPrivateKeyExternal *bool   `json:"isPrivateKeyExternal,omitempty"`
}

// Resource is azure resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Kind     *string             `json:"kind,omitempty"`
	Location *string             `json:"location,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// SiteSeal is site seal
type SiteSeal struct {
	autorest.Response `json:"-"`
	*string           `json:"html,omitempty"`
}

// SiteSealRequest is site seal request.
type SiteSealRequest struct {
	LightTheme *bool   `json:"lightTheme,omitempty"`
	Locale     *string `json:"locale,omitempty"`
}
