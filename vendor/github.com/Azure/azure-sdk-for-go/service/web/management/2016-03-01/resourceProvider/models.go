package resourceprovider

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// AppServicePlanRestrictions enumerates the values for app service plan
// restrictions.
type AppServicePlanRestrictions string

const (
	// Basic specifies the basic state for app service plan restrictions.
	Basic AppServicePlanRestrictions = "Basic"
	// Free specifies the free state for app service plan restrictions.
	Free AppServicePlanRestrictions = "Free"
	// None specifies the none state for app service plan restrictions.
	None AppServicePlanRestrictions = "None"
	// Premium specifies the premium state for app service plan restrictions.
	Premium AppServicePlanRestrictions = "Premium"
	// Shared specifies the shared state for app service plan restrictions.
	Shared AppServicePlanRestrictions = "Shared"
	// Standard specifies the standard state for app service plan restrictions.
	Standard AppServicePlanRestrictions = "Standard"
)

// CheckNameResourceTypes enumerates the values for check name resource types.
type CheckNameResourceTypes string

const (
	// HostingEnvironment specifies the hosting environment state for check
	// name resource types.
	HostingEnvironment CheckNameResourceTypes = "HostingEnvironment"
	// Site specifies the site state for check name resource types.
	Site CheckNameResourceTypes = "Site"
	// Slot specifies the slot state for check name resource types.
	Slot CheckNameResourceTypes = "Slot"
)

// InAvailabilityReasonType enumerates the values for in availability reason
// type.
type InAvailabilityReasonType string

const (
	// AlreadyExists specifies the already exists state for in availability
	// reason type.
	AlreadyExists InAvailabilityReasonType = "AlreadyExists"
	// Invalid specifies the invalid state for in availability reason type.
	Invalid InAvailabilityReasonType = "Invalid"
)

// SkuName enumerates the values for sku name.
type SkuName string

const (
	// SkuNameBasic specifies the sku name basic state for sku name.
	SkuNameBasic SkuName = "Basic"
	// SkuNameDynamic specifies the sku name dynamic state for sku name.
	SkuNameDynamic SkuName = "Dynamic"
	// SkuNameFree specifies the sku name free state for sku name.
	SkuNameFree SkuName = "Free"
	// SkuNameIsolated specifies the sku name isolated state for sku name.
	SkuNameIsolated SkuName = "Isolated"
	// SkuNamePremium specifies the sku name premium state for sku name.
	SkuNamePremium SkuName = "Premium"
	// SkuNameShared specifies the sku name shared state for sku name.
	SkuNameShared SkuName = "Shared"
	// SkuNameStandard specifies the sku name standard state for sku name.
	SkuNameStandard SkuName = "Standard"
)

// ValidateResourceTypes enumerates the values for validate resource types.
type ValidateResourceTypes string

const (
	// ValidateResourceTypesServerFarm specifies the validate resource types
	// server farm state for validate resource types.
	ValidateResourceTypesServerFarm ValidateResourceTypes = "ServerFarm"
	// ValidateResourceTypesSite specifies the validate resource types site
	// state for validate resource types.
	ValidateResourceTypesSite ValidateResourceTypes = "Site"
)

// Capability is describes the capabilities/features allowed for a specific
// SKU.
type Capability struct {
	Name   *string `json:"name,omitempty"`
	Value  *string `json:"value,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// CsmMoveResourceEnvelope is object with a list of the resources that need to
// be moved and the resource group they should be moved to.
type CsmMoveResourceEnvelope struct {
	TargetResourceGroup *string   `json:"targetResourceGroup,omitempty"`
	Resources           *[]string `json:"resources,omitempty"`
}

// GeoRegion is geographical region.
type GeoRegion struct {
	ID                   *string             `json:"id,omitempty"`
	Name                 *string             `json:"name,omitempty"`
	Kind                 *string             `json:"kind,omitempty"`
	Location             *string             `json:"location,omitempty"`
	Type                 *string             `json:"type,omitempty"`
	Tags                 *map[string]*string `json:"tags,omitempty"`
	*GeoRegionProperties `json:"properties,omitempty"`
}

// GeoRegionProperties is geoRegion resource specific properties
type GeoRegionProperties struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
}

// GeoRegionCollection is collection of geographical regions.
type GeoRegionCollection struct {
	autorest.Response `json:"-"`
	Value             *[]GeoRegion `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// GeoRegionCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client GeoRegionCollection) GeoRegionCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// GlobalCsmSkuDescription is a Global SKU Description.
type GlobalCsmSkuDescription struct {
	Name         *string       `json:"name,omitempty"`
	Tier         *string       `json:"tier,omitempty"`
	Capacity     *SkuCapacity  `json:"capacity,omitempty"`
	Locations    *[]string     `json:"locations,omitempty"`
	Capabilities *[]Capability `json:"capabilities,omitempty"`
}

// PremierAddOnOffer is premier add-on offer.
type PremierAddOnOffer struct {
	ID                           *string             `json:"id,omitempty"`
	Name                         *string             `json:"name,omitempty"`
	Kind                         *string             `json:"kind,omitempty"`
	Location                     *string             `json:"location,omitempty"`
	Type                         *string             `json:"type,omitempty"`
	Tags                         *map[string]*string `json:"tags,omitempty"`
	*PremierAddOnOfferProperties `json:"properties,omitempty"`
}

// PremierAddOnOfferProperties is premierAddOnOffer resource specific
// properties
type PremierAddOnOfferProperties struct {
	Sku                        *string                    `json:"sku,omitempty"`
	Product                    *string                    `json:"product,omitempty"`
	Vendor                     *string                    `json:"vendor,omitempty"`
	Name                       *string                    `json:"name,omitempty"`
	PromoCodeRequired          *bool                      `json:"promoCodeRequired,omitempty"`
	Quota                      *int32                     `json:"quota,omitempty"`
	WebHostingPlanRestrictions AppServicePlanRestrictions `json:"webHostingPlanRestrictions,omitempty"`
	PrivacyPolicyURL           *string                    `json:"privacyPolicyUrl,omitempty"`
	LegalTermsURL              *string                    `json:"legalTermsUrl,omitempty"`
	MarketplacePublisher       *string                    `json:"marketplacePublisher,omitempty"`
	MarketplaceOffer           *string                    `json:"marketplaceOffer,omitempty"`
}

// PremierAddOnOfferCollection is collection of premier add-on offers.
type PremierAddOnOfferCollection struct {
	autorest.Response `json:"-"`
	Value             *[]PremierAddOnOffer `json:"value,omitempty"`
	NextLink          *string              `json:"nextLink,omitempty"`
}

// PremierAddOnOfferCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client PremierAddOnOfferCollection) PremierAddOnOfferCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// Resource is azure resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Kind     *string             `json:"kind,omitempty"`
	Location *string             `json:"location,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// ResourceNameAvailability is information regarding availbility of a resource
// name.
type ResourceNameAvailability struct {
	autorest.Response `json:"-"`
	NameAvailable     *bool                    `json:"nameAvailable,omitempty"`
	Reason            InAvailabilityReasonType `json:"reason,omitempty"`
	Message           *string                  `json:"message,omitempty"`
}

// ResourceNameAvailabilityRequest is resource name availability request
// content.
type ResourceNameAvailabilityRequest struct {
	Name   *string                `json:"name,omitempty"`
	Type   CheckNameResourceTypes `json:"type,omitempty"`
	IsFqdn *bool                  `json:"isFqdn,omitempty"`
}

// SkuCapacity is description of the App Service plan scale options.
type SkuCapacity struct {
	Minimum   *int32  `json:"minimum,omitempty"`
	Maximum   *int32  `json:"maximum,omitempty"`
	Default   *int32  `json:"default,omitempty"`
	ScaleType *string `json:"scaleType,omitempty"`
}

// SkuInfos is collection of SKU information.
type SkuInfos struct {
	autorest.Response `json:"-"`
	ResourceType      *string                    `json:"resourceType,omitempty"`
	Skus              *[]GlobalCsmSkuDescription `json:"skus,omitempty"`
}

// SourceControl is the source control OAuth token.
type SourceControl struct {
	autorest.Response        `json:"-"`
	ID                       *string             `json:"id,omitempty"`
	Name                     *string             `json:"name,omitempty"`
	Kind                     *string             `json:"kind,omitempty"`
	Location                 *string             `json:"location,omitempty"`
	Type                     *string             `json:"type,omitempty"`
	Tags                     *map[string]*string `json:"tags,omitempty"`
	*SourceControlProperties `json:"properties,omitempty"`
}

// SourceControlProperties is sourceControl resource specific properties
type SourceControlProperties struct {
	Name           *string    `json:"name,omitempty"`
	Token          *string    `json:"token,omitempty"`
	TokenSecret    *string    `json:"tokenSecret,omitempty"`
	RefreshToken   *string    `json:"refreshToken,omitempty"`
	ExpirationTime *date.Time `json:"expirationTime,omitempty"`
}

// SourceControlCollection is collection of source controls.
type SourceControlCollection struct {
	autorest.Response `json:"-"`
	Value             *[]SourceControl `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// SourceControlCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SourceControlCollection) SourceControlCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// User is user crendentials used for publishing activity.
type User struct {
	autorest.Response `json:"-"`
	ID                *string             `json:"id,omitempty"`
	Name              *string             `json:"name,omitempty"`
	Kind              *string             `json:"kind,omitempty"`
	Location          *string             `json:"location,omitempty"`
	Type              *string             `json:"type,omitempty"`
	Tags              *map[string]*string `json:"tags,omitempty"`
	*UserProperties   `json:"properties,omitempty"`
}

// UserProperties is user resource specific properties
type UserProperties struct {
	UserName                   *string `json:"name,omitempty"`
	PublishingUserName         *string `json:"publishingUserName,omitempty"`
	PublishingPassword         *string `json:"publishingPassword,omitempty"`
	PublishingPasswordHash     *string `json:"publishingPasswordHash,omitempty"`
	PublishingPasswordHashSalt *string `json:"publishingPasswordHashSalt,omitempty"`
}

// ValidateProperties is app properties used for validation.
type ValidateProperties struct {
	ServerFarmID       *string `json:"serverFarmId,omitempty"`
	SkuName            *string `json:"skuName,omitempty"`
	NeedLinuxWorkers   *bool   `json:"needLinuxWorkers,omitempty"`
	Capacity           *int32  `json:"capacity,omitempty"`
	HostingEnvironment *string `json:"hostingEnvironment,omitempty"`
}

// ValidateRequest is resource validation request content.
type ValidateRequest struct {
	Name                *string               `json:"name,omitempty"`
	Type                ValidateResourceTypes `json:"type,omitempty"`
	Location            *string               `json:"location,omitempty"`
	*ValidateProperties `json:"properties,omitempty"`
}

// ValidateResponse is describes the result of resource validation.
type ValidateResponse struct {
	autorest.Response `json:"-"`
	Status            *string                `json:"status,omitempty"`
	Error             *ValidateResponseError `json:"error,omitempty"`
}

// ValidateResponseError is error details for when validation fails.
type ValidateResponseError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}
