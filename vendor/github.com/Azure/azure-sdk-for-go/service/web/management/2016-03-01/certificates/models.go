package certificates

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// KeyVaultSecretStatus enumerates the values for key vault secret status.
type KeyVaultSecretStatus string

const (
	// AzureServiceUnauthorizedToAccessKeyVault specifies the azure service
	// unauthorized to access key vault state for key vault secret status.
	AzureServiceUnauthorizedToAccessKeyVault KeyVaultSecretStatus = "AzureServiceUnauthorizedToAccessKeyVault"
	// CertificateOrderFailed specifies the certificate order failed state for
	// key vault secret status.
	CertificateOrderFailed KeyVaultSecretStatus = "CertificateOrderFailed"
	// ExternalPrivateKey specifies the external private key state for key
	// vault secret status.
	ExternalPrivateKey KeyVaultSecretStatus = "ExternalPrivateKey"
	// Initialized specifies the initialized state for key vault secret status.
	Initialized KeyVaultSecretStatus = "Initialized"
	// KeyVaultDoesNotExist specifies the key vault does not exist state for
	// key vault secret status.
	KeyVaultDoesNotExist KeyVaultSecretStatus = "KeyVaultDoesNotExist"
	// KeyVaultSecretDoesNotExist specifies the key vault secret does not exist
	// state for key vault secret status.
	KeyVaultSecretDoesNotExist KeyVaultSecretStatus = "KeyVaultSecretDoesNotExist"
	// OperationNotPermittedOnKeyVault specifies the operation not permitted on
	// key vault state for key vault secret status.
	OperationNotPermittedOnKeyVault KeyVaultSecretStatus = "OperationNotPermittedOnKeyVault"
	// Succeeded specifies the succeeded state for key vault secret status.
	Succeeded KeyVaultSecretStatus = "Succeeded"
	// Unknown specifies the unknown state for key vault secret status.
	Unknown KeyVaultSecretStatus = "Unknown"
	// UnknownError specifies the unknown error state for key vault secret
	// status.
	UnknownError KeyVaultSecretStatus = "UnknownError"
	// WaitingOnCertificateOrder specifies the waiting on certificate order
	// state for key vault secret status.
	WaitingOnCertificateOrder KeyVaultSecretStatus = "WaitingOnCertificateOrder"
)

// Certificate is sSL certificate for an app.
type Certificate struct {
	autorest.Response      `json:"-"`
	ID                     *string             `json:"id,omitempty"`
	Name                   *string             `json:"name,omitempty"`
	Kind                   *string             `json:"kind,omitempty"`
	Location               *string             `json:"location,omitempty"`
	Type                   *string             `json:"type,omitempty"`
	Tags                   *map[string]*string `json:"tags,omitempty"`
	*CertificateProperties `json:"properties,omitempty"`
}

// CertificateProperties is certificate resource specific properties
type CertificateProperties struct {
	FriendlyName              *string                    `json:"friendlyName,omitempty"`
	SubjectName               *string                    `json:"subjectName,omitempty"`
	HostNames                 *[]string                  `json:"hostNames,omitempty"`
	PfxBlob                   *[]byte                    `json:"pfxBlob,omitempty"`
	SiteName                  *string                    `json:"siteName,omitempty"`
	SelfLink                  *string                    `json:"selfLink,omitempty"`
	Issuer                    *string                    `json:"issuer,omitempty"`
	IssueDate                 *date.Time                 `json:"issueDate,omitempty"`
	ExpirationDate            *date.Time                 `json:"expirationDate,omitempty"`
	Password                  *string                    `json:"password,omitempty"`
	Thumbprint                *string                    `json:"thumbprint,omitempty"`
	Valid                     *bool                      `json:"valid,omitempty"`
	CerBlob                   *string                    `json:"cerBlob,omitempty"`
	PublicKeyHash             *string                    `json:"publicKeyHash,omitempty"`
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`
	KeyVaultID                *string                    `json:"keyVaultId,omitempty"`
	KeyVaultSecretName        *string                    `json:"keyVaultSecretName,omitempty"`
	KeyVaultSecretStatus      KeyVaultSecretStatus       `json:"keyVaultSecretStatus,omitempty"`
	GeoRegion                 *string                    `json:"geoRegion,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	ServerFarmID              *string                    `json:"serverFarmId,omitempty"`
}

// Collection is collection of certificates.
type Collection struct {
	autorest.Response `json:"-"`
	Value             *[]Certificate `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// CollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client Collection) CollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// HostingEnvironmentProfile is specification for an App Service Environment to
// use for this resource.
type HostingEnvironmentProfile struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Resource is azure resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Kind     *string             `json:"kind,omitempty"`
	Location *string             `json:"location,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}
